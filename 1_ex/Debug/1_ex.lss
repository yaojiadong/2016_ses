
1_ex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000624  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000010f8  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000422d  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  000059bd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059f0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
   4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  b4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  b8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  bc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  c0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  c4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  cc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  d0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  d4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  d8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  dc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  e0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  e4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  e8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  ec:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  f0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  f4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  f8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  fc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 100:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 104:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 108:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 10c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 110:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 114:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 118:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
 11c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf ef       	ldi	r28, 0xFF	; 255
 126:	d1 e4       	ldi	r29, 0x41	; 65
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
 130:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

00000134 <__bad_interrupt>:
 134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <blink>:


#include <avr/io.h>
#include <util/delay.h>
/**Toggles the red LED of the SES-board*/
void blink(void) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	2e 97       	sbiw	r28, 0x0e	; 14
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
    //DDRG |= 0x02; //RED LED PG1 config as output pin (bit 2)
	DDRF |= 0x40; //green LED PF6 as output (bit 6)
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	20 e3       	ldi	r18, 0x30	; 48
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	20 64       	ori	r18, 0x40	; 64
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	aa e7       	ldi	r26, 0x7A	; 122
 164:	b4 e4       	ldi	r27, 0x44	; 68
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	ab 83       	std	Y+3, r26	; 0x03
 16c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	4a e7       	ldi	r20, 0x7A	; 122
 174:	55 e4       	ldi	r21, 0x45	; 69
 176:	69 81       	ldd	r22, Y+1	; 0x01
 178:	7a 81       	ldd	r23, Y+2	; 0x02
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	9c 81       	ldd	r25, Y+4	; 0x04
 17e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__mulsf3>
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	9e 83       	std	Y+6, r25	; 0x06
 18a:	af 83       	std	Y+7, r26	; 0x07
 18c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e8       	ldi	r20, 0x80	; 128
 194:	5f e3       	ldi	r21, 0x3F	; 63
 196:	6d 81       	ldd	r22, Y+5	; 0x05
 198:	7e 81       	ldd	r23, Y+6	; 0x06
 19a:	8f 81       	ldd	r24, Y+7	; 0x07
 19c:	98 85       	ldd	r25, Y+8	; 0x08
 19e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__cmpsf2>
 1a2:	88 23       	and	r24, r24
 1a4:	2c f4       	brge	.+10     	; 0x1b0 <blink+0x78>
		__ticks = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9a 87       	std	Y+10, r25	; 0x0a
 1ac:	89 87       	std	Y+9, r24	; 0x09
 1ae:	3f c0       	rjmp	.+126    	; 0x22e <blink+0xf6>
	else if (__tmp > 65535)
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	3f ef       	ldi	r19, 0xFF	; 255
 1b4:	4f e7       	ldi	r20, 0x7F	; 127
 1b6:	57 e4       	ldi	r21, 0x47	; 71
 1b8:	6d 81       	ldd	r22, Y+5	; 0x05
 1ba:	7e 81       	ldd	r23, Y+6	; 0x06
 1bc:	8f 81       	ldd	r24, Y+7	; 0x07
 1be:	98 85       	ldd	r25, Y+8	; 0x08
 1c0:	0e 94 76 02 	call	0x4ec	; 0x4ec <__gesf2>
 1c4:	18 16       	cp	r1, r24
 1c6:	4c f5       	brge	.+82     	; 0x21a <blink+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e2       	ldi	r20, 0x20	; 32
 1ce:	51 e4       	ldi	r21, 0x41	; 65
 1d0:	69 81       	ldd	r22, Y+1	; 0x01
 1d2:	7a 81       	ldd	r23, Y+2	; 0x02
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	9c 81       	ldd	r25, Y+4	; 0x04
 1d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__mulsf3>
 1dc:	dc 01       	movw	r26, r24
 1de:	cb 01       	movw	r24, r22
 1e0:	bc 01       	movw	r22, r24
 1e2:	cd 01       	movw	r24, r26
 1e4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fixunssfsi>
 1e8:	dc 01       	movw	r26, r24
 1ea:	cb 01       	movw	r24, r22
 1ec:	9a 87       	std	Y+10, r25	; 0x0a
 1ee:	89 87       	std	Y+9, r24	; 0x09
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <blink+0xd8>
 1f2:	80 e9       	ldi	r24, 0x90	; 144
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	9c 87       	std	Y+12, r25	; 0x0c
 1f8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fa:	8b 85       	ldd	r24, Y+11	; 0x0b
 1fc:	9c 85       	ldd	r25, Y+12	; 0x0c
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <blink+0xc6>
 202:	9c 87       	std	Y+12, r25	; 0x0c
 204:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	89 85       	ldd	r24, Y+9	; 0x09
 208:	9a 85       	ldd	r25, Y+10	; 0x0a
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	9a 87       	std	Y+10, r25	; 0x0a
 20e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 210:	89 85       	ldd	r24, Y+9	; 0x09
 212:	9a 85       	ldd	r25, Y+10	; 0x0a
 214:	89 2b       	or	r24, r25
 216:	69 f7       	brne	.-38     	; 0x1f2 <blink+0xba>
 218:	14 c0       	rjmp	.+40     	; 0x242 <blink+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 21a:	6d 81       	ldd	r22, Y+5	; 0x05
 21c:	7e 81       	ldd	r23, Y+6	; 0x06
 21e:	8f 81       	ldd	r24, Y+7	; 0x07
 220:	98 85       	ldd	r25, Y+8	; 0x08
 222:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fixunssfsi>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	9a 87       	std	Y+10, r25	; 0x0a
 22c:	89 87       	std	Y+9, r24	; 0x09
 22e:	89 85       	ldd	r24, Y+9	; 0x09
 230:	9a 85       	ldd	r25, Y+10	; 0x0a
 232:	9e 87       	std	Y+14, r25	; 0x0e
 234:	8d 87       	std	Y+13, r24	; 0x0d
 236:	8d 85       	ldd	r24, Y+13	; 0x0d
 238:	9e 85       	ldd	r25, Y+14	; 0x0e
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <blink+0x102>
 23e:	9e 87       	std	Y+14, r25	; 0x0e
 240:	8d 87       	std	Y+13, r24	; 0x0d
	while (1) {
		_delay_ms(1000);
		//PORTG ^= 0x02;
		PORTF ^= 0x40;
 242:	81 e3       	ldi	r24, 0x31	; 49
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	21 e3       	ldi	r18, 0x31	; 49
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	30 81       	ld	r19, Z
 24e:	20 e4       	ldi	r18, 0x40	; 64
 250:	23 27       	eor	r18, r19
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
	}
 256:	83 cf       	rjmp	.-250    	; 0x15e <blink+0x26>

00000258 <wait>:
 // prevent code optimization by using inline assembler
 asm volatile ( "nop" ); // one cycle with no operation
 }
 }*/

void wait(uint16_t millis) {
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	2c 97       	sbiw	r28, 0x0c	; 12
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	98 87       	std	Y+8, r25	; 0x08
 26e:	8f 83       	std	Y+7, r24	; 0x07
	uint32_t i = millis * 16000L / 18000L;
 270:	8f 81       	ldd	r24, Y+7	; 0x07
 272:	98 85       	ldd	r25, Y+8	; 0x08
 274:	9c 01       	movw	r18, r24
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	9e e3       	ldi	r25, 0x3E	; 62
 27e:	dc 01       	movw	r26, r24
 280:	0e 94 b9 01 	call	0x372	; 0x372 <__muluhisi3>
 284:	dc 01       	movw	r26, r24
 286:	cb 01       	movw	r24, r22
 288:	20 e5       	ldi	r18, 0x50	; 80
 28a:	36 e4       	ldi	r19, 0x46	; 70
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	bc 01       	movw	r22, r24
 292:	cd 01       	movw	r24, r26
 294:	0e 94 9a 01 	call	0x334	; 0x334 <__divmodsi4>
 298:	da 01       	movw	r26, r20
 29a:	c9 01       	movw	r24, r18
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	9a 83       	std	Y+2, r25	; 0x02
 2a0:	ab 83       	std	Y+3, r26	; 0x03
 2a2:	bc 83       	std	Y+4, r27	; 0x04
	//uint32_t i =941;

	for (; i > 0; i--) {
 2a4:	1a c0       	rjmp	.+52     	; 0x2da <wait+0x82>
		uint16_t innerLoop = 1000;
 2a6:	88 ee       	ldi	r24, 0xE8	; 232
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	9e 83       	std	Y+6, r25	; 0x06
 2ac:	8d 83       	std	Y+5, r24	; 0x05
		for (; innerLoop > 0; innerLoop--) { // question
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <wait+0x64>
			asm volatile("nop");
 2b0:	00 00       	nop
	uint32_t i = millis * 16000L / 18000L;
	//uint32_t i =941;

	for (; i > 0; i--) {
		uint16_t innerLoop = 1000;
		for (; innerLoop > 0; innerLoop--) { // question
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
 2b4:	9e 81       	ldd	r25, Y+6	; 0x06
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	9e 83       	std	Y+6, r25	; 0x06
 2ba:	8d 83       	std	Y+5, r24	; 0x05
 2bc:	8d 81       	ldd	r24, Y+5	; 0x05
 2be:	9e 81       	ldd	r25, Y+6	; 0x06
 2c0:	89 2b       	or	r24, r25
 2c2:	b1 f7       	brne	.-20     	; 0x2b0 <wait+0x58>

void wait(uint16_t millis) {
	uint32_t i = millis * 16000L / 18000L;
	//uint32_t i =941;

	for (; i > 0; i--) {
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	9a 81       	ldd	r25, Y+2	; 0x02
 2c8:	ab 81       	ldd	r26, Y+3	; 0x03
 2ca:	bc 81       	ldd	r27, Y+4	; 0x04
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	a1 09       	sbc	r26, r1
 2d0:	b1 09       	sbc	r27, r1
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	ab 83       	std	Y+3, r26	; 0x03
 2d8:	bc 83       	std	Y+4, r27	; 0x04
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	ab 81       	ldd	r26, Y+3	; 0x03
 2e0:	bc 81       	ldd	r27, Y+4	; 0x04
 2e2:	89 2b       	or	r24, r25
 2e4:	8a 2b       	or	r24, r26
 2e6:	8b 2b       	or	r24, r27
 2e8:	f1 f6       	brne	.-68     	; 0x2a6 <wait+0x4e>
		uint16_t innerLoop = 1000;
		for (; innerLoop > 0; innerLoop--) { // question
			asm volatile("nop");
		}
	}
}
 2ea:	2c 96       	adiw	r28, 0x0c	; 12
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <main>:

/**Toggles the red LED of the SES-board*/
int main(void) {
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
	DDRG |= 0x02;
 304:	83 e3       	ldi	r24, 0x33	; 51
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	23 e3       	ldi	r18, 0x33	; 51
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	f9 01       	movw	r30, r18
 30e:	20 81       	ld	r18, Z
 310:	22 60       	ori	r18, 0x02	; 2
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
	//DDRF |= 0x40; //green LED PF6 as output (bit 6)
	while (1) {
		wait(10000);
 316:	80 e1       	ldi	r24, 0x10	; 16
 318:	97 e2       	ldi	r25, 0x27	; 39
 31a:	0e 94 2c 01 	call	0x258	; 0x258 <wait>
		//_delay_ms(1000);
		//PORTF ^= 0x40;
		PORTG ^= 0x02;
 31e:	84 e3       	ldi	r24, 0x34	; 52
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	24 e3       	ldi	r18, 0x34	; 52
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	30 81       	ld	r19, Z
 32a:	22 e0       	ldi	r18, 0x02	; 2
 32c:	23 27       	eor	r18, r19
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
	}
 332:	f1 cf       	rjmp	.-30     	; 0x316 <main+0x1a>

00000334 <__divmodsi4>:
 334:	05 2e       	mov	r0, r21
 336:	97 fb       	bst	r25, 7
 338:	1e f4       	brtc	.+6      	; 0x340 <__divmodsi4+0xc>
 33a:	00 94       	com	r0
 33c:	0e 94 b1 01 	call	0x362	; 0x362 <__negsi2>
 340:	57 fd       	sbrc	r21, 7
 342:	07 d0       	rcall	.+14     	; 0x352 <__divmodsi4_neg2>
 344:	0e 94 c4 01 	call	0x388	; 0x388 <__udivmodsi4>
 348:	07 fc       	sbrc	r0, 7
 34a:	03 d0       	rcall	.+6      	; 0x352 <__divmodsi4_neg2>
 34c:	4e f4       	brtc	.+18     	; 0x360 <__divmodsi4_exit>
 34e:	0c 94 b1 01 	jmp	0x362	; 0x362 <__negsi2>

00000352 <__divmodsi4_neg2>:
 352:	50 95       	com	r21
 354:	40 95       	com	r20
 356:	30 95       	com	r19
 358:	21 95       	neg	r18
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
 35c:	4f 4f       	sbci	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255

00000360 <__divmodsi4_exit>:
 360:	08 95       	ret

00000362 <__negsi2>:
 362:	90 95       	com	r25
 364:	80 95       	com	r24
 366:	70 95       	com	r23
 368:	61 95       	neg	r22
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	8f 4f       	sbci	r24, 0xFF	; 255
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	08 95       	ret

00000372 <__muluhisi3>:
 372:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__umulhisi3>
 376:	a5 9f       	mul	r26, r21
 378:	90 0d       	add	r25, r0
 37a:	b4 9f       	mul	r27, r20
 37c:	90 0d       	add	r25, r0
 37e:	a4 9f       	mul	r26, r20
 380:	80 0d       	add	r24, r0
 382:	91 1d       	adc	r25, r1
 384:	11 24       	eor	r1, r1
 386:	08 95       	ret

00000388 <__udivmodsi4>:
 388:	a1 e2       	ldi	r26, 0x21	; 33
 38a:	1a 2e       	mov	r1, r26
 38c:	aa 1b       	sub	r26, r26
 38e:	bb 1b       	sub	r27, r27
 390:	fd 01       	movw	r30, r26
 392:	0d c0       	rjmp	.+26     	; 0x3ae <__udivmodsi4_ep>

00000394 <__udivmodsi4_loop>:
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	ee 1f       	adc	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	a2 17       	cp	r26, r18
 39e:	b3 07       	cpc	r27, r19
 3a0:	e4 07       	cpc	r30, r20
 3a2:	f5 07       	cpc	r31, r21
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <__udivmodsi4_ep>
 3a6:	a2 1b       	sub	r26, r18
 3a8:	b3 0b       	sbc	r27, r19
 3aa:	e4 0b       	sbc	r30, r20
 3ac:	f5 0b       	sbc	r31, r21

000003ae <__udivmodsi4_ep>:
 3ae:	66 1f       	adc	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	1a 94       	dec	r1
 3b8:	69 f7       	brne	.-38     	; 0x394 <__udivmodsi4_loop>
 3ba:	60 95       	com	r22
 3bc:	70 95       	com	r23
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	9b 01       	movw	r18, r22
 3c4:	ac 01       	movw	r20, r24
 3c6:	bd 01       	movw	r22, r26
 3c8:	cf 01       	movw	r24, r30
 3ca:	08 95       	ret

000003cc <__umulhisi3>:
 3cc:	a2 9f       	mul	r26, r18
 3ce:	b0 01       	movw	r22, r0
 3d0:	b3 9f       	mul	r27, r19
 3d2:	c0 01       	movw	r24, r0
 3d4:	a3 9f       	mul	r26, r19
 3d6:	70 0d       	add	r23, r0
 3d8:	81 1d       	adc	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	91 1d       	adc	r25, r1
 3de:	b2 9f       	mul	r27, r18
 3e0:	70 0d       	add	r23, r0
 3e2:	81 1d       	adc	r24, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	91 1d       	adc	r25, r1
 3e8:	08 95       	ret

000003ea <__cmpsf2>:
 3ea:	0e 94 29 02 	call	0x452	; 0x452 <__fp_cmp>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <__cmpsf2+0x8>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret

000003f4 <__fixunssfsi>:
 3f4:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fp_splitA>
 3f8:	88 f0       	brcs	.+34     	; 0x41c <__fixunssfsi+0x28>
 3fa:	9f 57       	subi	r25, 0x7F	; 127
 3fc:	98 f0       	brcs	.+38     	; 0x424 <__fixunssfsi+0x30>
 3fe:	b9 2f       	mov	r27, r25
 400:	99 27       	eor	r25, r25
 402:	b7 51       	subi	r27, 0x17	; 23
 404:	b0 f0       	brcs	.+44     	; 0x432 <__fixunssfsi+0x3e>
 406:	e1 f0       	breq	.+56     	; 0x440 <__fixunssfsi+0x4c>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a f0       	brmi	.+6      	; 0x418 <__fixunssfsi+0x24>
 412:	ba 95       	dec	r27
 414:	c9 f7       	brne	.-14     	; 0x408 <__fixunssfsi+0x14>
 416:	14 c0       	rjmp	.+40     	; 0x440 <__fixunssfsi+0x4c>
 418:	b1 30       	cpi	r27, 0x01	; 1
 41a:	91 f0       	breq	.+36     	; 0x440 <__fixunssfsi+0x4c>
 41c:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_zero>
 420:	b1 e0       	ldi	r27, 0x01	; 1
 422:	08 95       	ret
 424:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_zero>
 428:	67 2f       	mov	r22, r23
 42a:	78 2f       	mov	r23, r24
 42c:	88 27       	eor	r24, r24
 42e:	b8 5f       	subi	r27, 0xF8	; 248
 430:	39 f0       	breq	.+14     	; 0x440 <__fixunssfsi+0x4c>
 432:	b9 3f       	cpi	r27, 0xF9	; 249
 434:	cc f3       	brlt	.-14     	; 0x428 <__fixunssfsi+0x34>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b3 95       	inc	r27
 43e:	d9 f7       	brne	.-10     	; 0x436 <__fixunssfsi+0x42>
 440:	3e f4       	brtc	.+14     	; 0x450 <__fixunssfsi+0x5c>
 442:	90 95       	com	r25
 444:	80 95       	com	r24
 446:	70 95       	com	r23
 448:	61 95       	neg	r22
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	08 95       	ret

00000452 <__fp_cmp>:
 452:	99 0f       	add	r25, r25
 454:	00 08       	sbc	r0, r0
 456:	55 0f       	add	r21, r21
 458:	aa 0b       	sbc	r26, r26
 45a:	e0 e8       	ldi	r30, 0x80	; 128
 45c:	fe ef       	ldi	r31, 0xFE	; 254
 45e:	16 16       	cp	r1, r22
 460:	17 06       	cpc	r1, r23
 462:	e8 07       	cpc	r30, r24
 464:	f9 07       	cpc	r31, r25
 466:	c0 f0       	brcs	.+48     	; 0x498 <__fp_cmp+0x46>
 468:	12 16       	cp	r1, r18
 46a:	13 06       	cpc	r1, r19
 46c:	e4 07       	cpc	r30, r20
 46e:	f5 07       	cpc	r31, r21
 470:	98 f0       	brcs	.+38     	; 0x498 <__fp_cmp+0x46>
 472:	62 1b       	sub	r22, r18
 474:	73 0b       	sbc	r23, r19
 476:	84 0b       	sbc	r24, r20
 478:	95 0b       	sbc	r25, r21
 47a:	39 f4       	brne	.+14     	; 0x48a <__fp_cmp+0x38>
 47c:	0a 26       	eor	r0, r26
 47e:	61 f0       	breq	.+24     	; 0x498 <__fp_cmp+0x46>
 480:	23 2b       	or	r18, r19
 482:	24 2b       	or	r18, r20
 484:	25 2b       	or	r18, r21
 486:	21 f4       	brne	.+8      	; 0x490 <__fp_cmp+0x3e>
 488:	08 95       	ret
 48a:	0a 26       	eor	r0, r26
 48c:	09 f4       	brne	.+2      	; 0x490 <__fp_cmp+0x3e>
 48e:	a1 40       	sbci	r26, 0x01	; 1
 490:	a6 95       	lsr	r26
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	81 1d       	adc	r24, r1
 496:	81 1d       	adc	r24, r1
 498:	08 95       	ret

0000049a <__fp_split3>:
 49a:	57 fd       	sbrc	r21, 7
 49c:	90 58       	subi	r25, 0x80	; 128
 49e:	44 0f       	add	r20, r20
 4a0:	55 1f       	adc	r21, r21
 4a2:	59 f0       	breq	.+22     	; 0x4ba <__fp_splitA+0x10>
 4a4:	5f 3f       	cpi	r21, 0xFF	; 255
 4a6:	71 f0       	breq	.+28     	; 0x4c4 <__fp_splitA+0x1a>
 4a8:	47 95       	ror	r20

000004aa <__fp_splitA>:
 4aa:	88 0f       	add	r24, r24
 4ac:	97 fb       	bst	r25, 7
 4ae:	99 1f       	adc	r25, r25
 4b0:	61 f0       	breq	.+24     	; 0x4ca <__fp_splitA+0x20>
 4b2:	9f 3f       	cpi	r25, 0xFF	; 255
 4b4:	79 f0       	breq	.+30     	; 0x4d4 <__fp_splitA+0x2a>
 4b6:	87 95       	ror	r24
 4b8:	08 95       	ret
 4ba:	12 16       	cp	r1, r18
 4bc:	13 06       	cpc	r1, r19
 4be:	14 06       	cpc	r1, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	f2 cf       	rjmp	.-28     	; 0x4a8 <__fp_split3+0xe>
 4c4:	46 95       	lsr	r20
 4c6:	f1 df       	rcall	.-30     	; 0x4aa <__fp_splitA>
 4c8:	08 c0       	rjmp	.+16     	; 0x4da <__fp_splitA+0x30>
 4ca:	16 16       	cp	r1, r22
 4cc:	17 06       	cpc	r1, r23
 4ce:	18 06       	cpc	r1, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	f1 cf       	rjmp	.-30     	; 0x4b6 <__fp_splitA+0xc>
 4d4:	86 95       	lsr	r24
 4d6:	71 05       	cpc	r23, r1
 4d8:	61 05       	cpc	r22, r1
 4da:	08 94       	sec
 4dc:	08 95       	ret

000004de <__fp_zero>:
 4de:	e8 94       	clt

000004e0 <__fp_szero>:
 4e0:	bb 27       	eor	r27, r27
 4e2:	66 27       	eor	r22, r22
 4e4:	77 27       	eor	r23, r23
 4e6:	cb 01       	movw	r24, r22
 4e8:	97 f9       	bld	r25, 7
 4ea:	08 95       	ret

000004ec <__gesf2>:
 4ec:	0e 94 29 02 	call	0x452	; 0x452 <__fp_cmp>
 4f0:	08 f4       	brcc	.+2      	; 0x4f4 <__gesf2+0x8>
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__mulsf3>:
 4f6:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3x>
 4fa:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__fp_round>
 4fe:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fp_pscA>
 502:	38 f0       	brcs	.+14     	; 0x512 <__mulsf3+0x1c>
 504:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_pscB>
 508:	20 f0       	brcs	.+8      	; 0x512 <__mulsf3+0x1c>
 50a:	95 23       	and	r25, r21
 50c:	11 f0       	breq	.+4      	; 0x512 <__mulsf3+0x1c>
 50e:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_inf>
 512:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_nan>
 516:	11 24       	eor	r1, r1
 518:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_szero>

0000051c <__mulsf3x>:
 51c:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_split3>
 520:	70 f3       	brcs	.-36     	; 0x4fe <__mulsf3+0x8>

00000522 <__mulsf3_pse>:
 522:	95 9f       	mul	r25, r21
 524:	c1 f3       	breq	.-16     	; 0x516 <__mulsf3+0x20>
 526:	95 0f       	add	r25, r21
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	55 1f       	adc	r21, r21
 52c:	62 9f       	mul	r22, r18
 52e:	f0 01       	movw	r30, r0
 530:	72 9f       	mul	r23, r18
 532:	bb 27       	eor	r27, r27
 534:	f0 0d       	add	r31, r0
 536:	b1 1d       	adc	r27, r1
 538:	63 9f       	mul	r22, r19
 53a:	aa 27       	eor	r26, r26
 53c:	f0 0d       	add	r31, r0
 53e:	b1 1d       	adc	r27, r1
 540:	aa 1f       	adc	r26, r26
 542:	64 9f       	mul	r22, r20
 544:	66 27       	eor	r22, r22
 546:	b0 0d       	add	r27, r0
 548:	a1 1d       	adc	r26, r1
 54a:	66 1f       	adc	r22, r22
 54c:	82 9f       	mul	r24, r18
 54e:	22 27       	eor	r18, r18
 550:	b0 0d       	add	r27, r0
 552:	a1 1d       	adc	r26, r1
 554:	62 1f       	adc	r22, r18
 556:	73 9f       	mul	r23, r19
 558:	b0 0d       	add	r27, r0
 55a:	a1 1d       	adc	r26, r1
 55c:	62 1f       	adc	r22, r18
 55e:	83 9f       	mul	r24, r19
 560:	a0 0d       	add	r26, r0
 562:	61 1d       	adc	r22, r1
 564:	22 1f       	adc	r18, r18
 566:	74 9f       	mul	r23, r20
 568:	33 27       	eor	r19, r19
 56a:	a0 0d       	add	r26, r0
 56c:	61 1d       	adc	r22, r1
 56e:	23 1f       	adc	r18, r19
 570:	84 9f       	mul	r24, r20
 572:	60 0d       	add	r22, r0
 574:	21 1d       	adc	r18, r1
 576:	82 2f       	mov	r24, r18
 578:	76 2f       	mov	r23, r22
 57a:	6a 2f       	mov	r22, r26
 57c:	11 24       	eor	r1, r1
 57e:	9f 57       	subi	r25, 0x7F	; 127
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	9a f0       	brmi	.+38     	; 0x5aa <__mulsf3_pse+0x88>
 584:	f1 f0       	breq	.+60     	; 0x5c2 <__mulsf3_pse+0xa0>
 586:	88 23       	and	r24, r24
 588:	4a f0       	brmi	.+18     	; 0x59c <__mulsf3_pse+0x7a>
 58a:	ee 0f       	add	r30, r30
 58c:	ff 1f       	adc	r31, r31
 58e:	bb 1f       	adc	r27, r27
 590:	66 1f       	adc	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	88 1f       	adc	r24, r24
 596:	91 50       	subi	r25, 0x01	; 1
 598:	50 40       	sbci	r21, 0x00	; 0
 59a:	a9 f7       	brne	.-22     	; 0x586 <__mulsf3_pse+0x64>
 59c:	9e 3f       	cpi	r25, 0xFE	; 254
 59e:	51 05       	cpc	r21, r1
 5a0:	80 f0       	brcs	.+32     	; 0x5c2 <__mulsf3_pse+0xa0>
 5a2:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_inf>
 5a6:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_szero>
 5aa:	5f 3f       	cpi	r21, 0xFF	; 255
 5ac:	e4 f3       	brlt	.-8      	; 0x5a6 <__mulsf3_pse+0x84>
 5ae:	98 3e       	cpi	r25, 0xE8	; 232
 5b0:	d4 f3       	brlt	.-12     	; 0x5a6 <__mulsf3_pse+0x84>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b7 95       	ror	r27
 5ba:	f7 95       	ror	r31
 5bc:	e7 95       	ror	r30
 5be:	9f 5f       	subi	r25, 0xFF	; 255
 5c0:	c1 f7       	brne	.-16     	; 0x5b2 <__mulsf3_pse+0x90>
 5c2:	fe 2b       	or	r31, r30
 5c4:	88 0f       	add	r24, r24
 5c6:	91 1d       	adc	r25, r1
 5c8:	96 95       	lsr	r25
 5ca:	87 95       	ror	r24
 5cc:	97 f9       	bld	r25, 7
 5ce:	08 95       	ret

000005d0 <__fp_inf>:
 5d0:	97 f9       	bld	r25, 7
 5d2:	9f 67       	ori	r25, 0x7F	; 127
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	08 95       	ret

000005dc <__fp_nan>:
 5dc:	9f ef       	ldi	r25, 0xFF	; 255
 5de:	80 ec       	ldi	r24, 0xC0	; 192
 5e0:	08 95       	ret

000005e2 <__fp_pscA>:
 5e2:	00 24       	eor	r0, r0
 5e4:	0a 94       	dec	r0
 5e6:	16 16       	cp	r1, r22
 5e8:	17 06       	cpc	r1, r23
 5ea:	18 06       	cpc	r1, r24
 5ec:	09 06       	cpc	r0, r25
 5ee:	08 95       	ret

000005f0 <__fp_pscB>:
 5f0:	00 24       	eor	r0, r0
 5f2:	0a 94       	dec	r0
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	14 06       	cpc	r1, r20
 5fa:	05 06       	cpc	r0, r21
 5fc:	08 95       	ret

000005fe <__fp_round>:
 5fe:	09 2e       	mov	r0, r25
 600:	03 94       	inc	r0
 602:	00 0c       	add	r0, r0
 604:	11 f4       	brne	.+4      	; 0x60a <__fp_round+0xc>
 606:	88 23       	and	r24, r24
 608:	52 f0       	brmi	.+20     	; 0x61e <__fp_round+0x20>
 60a:	bb 0f       	add	r27, r27
 60c:	40 f4       	brcc	.+16     	; 0x61e <__fp_round+0x20>
 60e:	bf 2b       	or	r27, r31
 610:	11 f4       	brne	.+4      	; 0x616 <__fp_round+0x18>
 612:	60 ff       	sbrs	r22, 0
 614:	04 c0       	rjmp	.+8      	; 0x61e <__fp_round+0x20>
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
