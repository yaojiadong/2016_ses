
7_ex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000065a  00800200  00002db2  00002e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026a  0080085a  0080085a  000034a0  2**0
                  ALLOC
  3 .stab         000047e8  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000582e  00000000  00000000  00007c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000008c  00000000  00000000  0000d4b6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d544  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_9>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__vector_13>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_17>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ac:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      d8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      dc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      e8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ec:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      f8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      fc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     100:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     104:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     108:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     10c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     110:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     114:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     118:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
     11c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	18 e0       	ldi	r17, 0x08	; 8
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	e2 eb       	ldi	r30, 0xB2	; 178
     134:	fd e2       	ldi	r31, 0x2D	; 45
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	aa 35       	cpi	r26, 0x5A	; 90
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	2a e0       	ldi	r18, 0x0A	; 10
     148:	aa e5       	ldi	r26, 0x5A	; 90
     14a:	b8 e0       	ldi	r27, 0x08	; 8
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a4 3c       	cpi	r26, 0xC4	; 196
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <main>
     15a:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <fsm_dispatch>:
 * the exit action and the next state will execute the entry action.
 *
 * @param fsm 	points to the Fsm struct which contains the updated states.
 * @param event decides which action the state is going to execute.
 * */
inline static void fsm_dispatch(Fsm* fsm, const Event* event) {
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	27 97       	sbiw	r28, 0x07	; 7
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	9d 83       	std	Y+5, r25	; 0x05
     178:	8c 83       	std	Y+4, r24	; 0x04
     17a:	7f 83       	std	Y+7, r23	; 0x07
     17c:	6e 83       	std	Y+6, r22	; 0x06
	static Event entryEvent = { .signal = ENTRY };
	static Event exitEvent = { .signal = EXIT };
	State s = fsm->state;
     17e:	8c 81       	ldd	r24, Y+4	; 0x04
     180:	9d 81       	ldd	r25, Y+5	; 0x05
     182:	fc 01       	movw	r30, r24
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	9a 83       	std	Y+2, r25	; 0x02
     18a:	89 83       	std	Y+1, r24	; 0x01
	fsmReturnStatus r = fsm->state(fsm, event);
     18c:	8c 81       	ldd	r24, Y+4	; 0x04
     18e:	9d 81       	ldd	r25, Y+5	; 0x05
     190:	fc 01       	movw	r30, r24
     192:	20 81       	ld	r18, Z
     194:	31 81       	ldd	r19, Z+1	; 0x01
     196:	4e 81       	ldd	r20, Y+6	; 0x06
     198:	5f 81       	ldd	r21, Y+7	; 0x07
     19a:	8c 81       	ldd	r24, Y+4	; 0x04
     19c:	9d 81       	ldd	r25, Y+5	; 0x05
     19e:	ba 01       	movw	r22, r20
     1a0:	f9 01       	movw	r30, r18
     1a2:	09 95       	icall
     1a4:	8b 83       	std	Y+3, r24	; 0x03
	if (r == RET_TRANSITION) {
     1a6:	8b 81       	ldd	r24, Y+3	; 0x03
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	99 f4       	brne	.+38     	; 0x1d2 <fsm_dispatch+0x70>
		s(fsm, &exitEvent); //< call exit action of last state
     1ac:	8c 81       	ldd	r24, Y+4	; 0x04
     1ae:	9d 81       	ldd	r25, Y+5	; 0x05
     1b0:	29 81       	ldd	r18, Y+1	; 0x01
     1b2:	3a 81       	ldd	r19, Y+2	; 0x02
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	72 e0       	ldi	r23, 0x02	; 2
     1b8:	f9 01       	movw	r30, r18
     1ba:	09 95       	icall
		fsm->state(fsm, &entryEvent); //< call entry action of new state
     1bc:	8c 81       	ldd	r24, Y+4	; 0x04
     1be:	9d 81       	ldd	r25, Y+5	; 0x05
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 81       	ld	r18, Z
     1c4:	31 81       	ldd	r19, Z+1	; 0x01
     1c6:	8c 81       	ldd	r24, Y+4	; 0x04
     1c8:	9d 81       	ldd	r25, Y+5	; 0x05
     1ca:	62 e9       	ldi	r22, 0x92	; 146
     1cc:	78 e0       	ldi	r23, 0x08	; 8
     1ce:	f9 01       	movw	r30, r18
     1d0:	09 95       	icall
	}
}
     1d2:	27 96       	adiw	r28, 0x07	; 7
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <alarm_init>:
static taskDescriptor td_turnoff_led;//turnoff led after 5s
static taskDescriptor td_time_increment;// time increment
static taskDescriptor td_check_matching;//check matching
static taskDescriptor td_check_rotary_encoder; //check rotary encoder

fsmReturnStatus alarm_init(Fsm * fsm, const Event* e) {
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <alarm_init+0x6>
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <alarm_init+0x8>
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	7c 83       	std	Y+4, r23	; 0x04
     1f6:	6b 83       	std	Y+3, r22	; 0x03

	td_toggle_led.task = &wrapper_red_led;
     1f8:	83 eb       	ldi	r24, 0xB3	; 179
     1fa:	98 e0       	ldi	r25, 0x08	; 8
     1fc:	90 93 5b 08 	sts	0x085B, r25
     200:	80 93 5a 08 	sts	0x085A, r24
	//td.param = ;
	td_toggle_led.expire = 0;
     204:	10 92 5f 08 	sts	0x085F, r1
     208:	10 92 5e 08 	sts	0x085E, r1
	td_toggle_led.period = 250;   //0.25s = 4Hz
     20c:	8a ef       	ldi	r24, 0xFA	; 250
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 61 08 	sts	0x0861, r25
     214:	80 93 60 08 	sts	0x0860, r24
	td_toggle_led.execute = 0;
     218:	80 91 62 08 	lds	r24, 0x0862
     21c:	8e 7f       	andi	r24, 0xFE	; 254
     21e:	80 93 62 08 	sts	0x0862, r24
	td_toggle_led.next = NULL;
     222:	10 92 64 08 	sts	0x0864, r1
     226:	10 92 63 08 	sts	0x0863, r1

	td_turnoff_led.task = &wrapper_turnoff_led;
     22a:	81 ec       	ldi	r24, 0xC1	; 193
     22c:	98 e0       	ldi	r25, 0x08	; 8
     22e:	90 93 66 08 	sts	0x0866, r25
     232:	80 93 65 08 	sts	0x0865, r24
	td_turnoff_led.param = fsm;
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	9a 81       	ldd	r25, Y+2	; 0x02
     23a:	90 93 68 08 	sts	0x0868, r25
     23e:	80 93 67 08 	sts	0x0867, r24
	td_turnoff_led.expire = 5000;  //count 5s
     242:	88 e8       	ldi	r24, 0x88	; 136
     244:	93 e1       	ldi	r25, 0x13	; 19
     246:	90 93 6a 08 	sts	0x086A, r25
     24a:	80 93 69 08 	sts	0x0869, r24
	td_turnoff_led.period = 0;
     24e:	10 92 6c 08 	sts	0x086C, r1
     252:	10 92 6b 08 	sts	0x086B, r1
	td_turnoff_led.execute = 0;
     256:	80 91 6d 08 	lds	r24, 0x086D
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	80 93 6d 08 	sts	0x086D, r24
	td_turnoff_led.next = NULL;
     260:	10 92 6f 08 	sts	0x086F, r1
     264:	10 92 6e 08 	sts	0x086E, r1

	td_time_increment.task = &time_increment;
     268:	89 ed       	ldi	r24, 0xD9	; 217
     26a:	98 e0       	ldi	r25, 0x08	; 8
     26c:	90 93 71 08 	sts	0x0871, r25
     270:	80 93 70 08 	sts	0x0870, r24
//	td3.param ;
	td_time_increment.expire = 0;
     274:	10 92 75 08 	sts	0x0875, r1
     278:	10 92 74 08 	sts	0x0874, r1
	td_time_increment.period = 1000; // every second update the time of the clock
     27c:	88 ee       	ldi	r24, 0xE8	; 232
     27e:	93 e0       	ldi	r25, 0x03	; 3
     280:	90 93 77 08 	sts	0x0877, r25
     284:	80 93 76 08 	sts	0x0876, r24
	td_time_increment.execute = 0;
     288:	80 91 78 08 	lds	r24, 0x0878
     28c:	8e 7f       	andi	r24, 0xFE	; 254
     28e:	80 93 78 08 	sts	0x0878, r24
	td_time_increment.next = NULL;
     292:	10 92 7a 08 	sts	0x087A, r1
     296:	10 92 79 08 	sts	0x0879, r1

	td_check_matching.task = &check_matching;
     29a:	8d e4       	ldi	r24, 0x4D	; 77
     29c:	99 e0       	ldi	r25, 0x09	; 9
     29e:	90 93 7c 08 	sts	0x087C, r25
     2a2:	80 93 7b 08 	sts	0x087B, r24
//	td4.param
	td_check_matching.expire = 0;
     2a6:	10 92 80 08 	sts	0x0880, r1
     2aa:	10 92 7f 08 	sts	0x087F, r1
	td_check_matching.period = 1000; // every second check if matching
     2ae:	88 ee       	ldi	r24, 0xE8	; 232
     2b0:	93 e0       	ldi	r25, 0x03	; 3
     2b2:	90 93 82 08 	sts	0x0882, r25
     2b6:	80 93 81 08 	sts	0x0881, r24
	td_check_matching.execute = 0;
     2ba:	80 91 83 08 	lds	r24, 0x0883
     2be:	8e 7f       	andi	r24, 0xFE	; 254
     2c0:	80 93 83 08 	sts	0x0883, r24
	td_check_matching.next = NULL;
     2c4:	10 92 85 08 	sts	0x0885, r1
     2c8:	10 92 84 08 	sts	0x0884, r1


	td_check_rotary_encoder.task = &wrapper_check_rotary;
     2cc:	86 e8       	ldi	r24, 0x86	; 134
     2ce:	9a e0       	ldi	r25, 0x0A	; 10
     2d0:	90 93 87 08 	sts	0x0887, r25
     2d4:	80 93 86 08 	sts	0x0886, r24
	td_check_rotary_encoder.expire = 0;  //immediately execute the task
     2d8:	10 92 8b 08 	sts	0x088B, r1
     2dc:	10 92 8a 08 	sts	0x088A, r1
	td_check_rotary_encoder.period = 1; //
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	90 93 8d 08 	sts	0x088D, r25
     2e8:	80 93 8c 08 	sts	0x088C, r24
	td_check_rotary_encoder.execute = 0;
     2ec:	80 91 8e 08 	lds	r24, 0x088E
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	80 93 8e 08 	sts	0x088E, r24
	td_check_rotary_encoder.next = NULL;
     2f6:	10 92 90 08 	sts	0x0890, r1
     2fa:	10 92 8f 08 	sts	0x088F, r1
	scheduler_add(&td_check_rotary_encoder);
     2fe:	86 e8       	ldi	r24, 0x86	; 134
     300:	98 e0       	ldi	r25, 0x08	; 8
     302:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>


	switch (e->signal) {
     306:	8b 81       	ldd	r24, Y+3	; 0x03
     308:	9c 81       	ldd	r25, Y+4	; 0x04
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	88 2f       	mov	r24, r24
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	89 2b       	or	r24, r25
     314:	09 f0       	breq	.+2      	; 0x318 <alarm_init+0x134>
     316:	42 c0       	rjmp	.+132    	; 0x39c <alarm_init+0x1b8>
	case ENTRY:
		fsm->isAlarmEnabled = false;
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	fc 01       	movw	r30, r24
     31e:	12 82       	std	Z+2, r1	; 0x02
		fprintf(lcdout, "%02d:%02d\n", 0, 0);
     320:	80 91 02 02 	lds	r24, 0x0202
     324:	90 91 03 02 	lds	r25, 0x0203
     328:	1f 92       	push	r1
     32a:	1f 92       	push	r1
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	24 e0       	ldi	r18, 0x04	; 4
     332:	32 e0       	ldi	r19, 0x02	; 2
     334:	23 2f       	mov	r18, r19
     336:	2f 93       	push	r18
     338:	24 e0       	ldi	r18, 0x04	; 4
     33a:	32 e0       	ldi	r19, 0x02	; 2
     33c:	2f 93       	push	r18
     33e:	29 2f       	mov	r18, r25
     340:	2f 93       	push	r18
     342:	8f 93       	push	r24
     344:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     348:	8d b7       	in	r24, 0x3d	; 61
     34a:	9e b7       	in	r25, 0x3e	; 62
     34c:	08 96       	adiw	r24, 0x08	; 8
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock hour");
     358:	80 91 02 02 	lds	r24, 0x0202
     35c:	90 91 03 02 	lds	r25, 0x0203
     360:	9c 01       	movw	r18, r24
     362:	4e e0       	ldi	r20, 0x0E	; 14
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	8f e0       	ldi	r24, 0x0F	; 15
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		(fsm->timeSet).hour = 0;
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	fc 01       	movw	r30, r24
     378:	13 82       	std	Z+3, r1	; 0x03
		(fsm->timeSet).minute = 0;
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	fc 01       	movw	r30, r24
     380:	14 82       	std	Z+4, r1	; 0x04
		(fsm->timeSet).second = 0;
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	fc 01       	movw	r30, r24
     388:	15 82       	std	Z+5, r1	; 0x05
		return TRANSITION(sethour);
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	26 ed       	ldi	r18, 0xD6	; 214
     390:	31 e0       	ldi	r19, 0x01	; 1
     392:	fc 01       	movw	r30, r24
     394:	31 83       	std	Z+1, r19	; 0x01
     396:	20 83       	st	Z, r18
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	01 c0       	rjmp	.+2      	; 0x39e <alarm_init+0x1ba>
	default:
		return RET_IGNORED;
     39c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <sethour>:

fsmReturnStatus sethour(Fsm * fsm, const Event* e) {
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <sethour+0x6>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <sethour+0x8>
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <sethour+0xa>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	9c 83       	std	Y+4, r25	; 0x04
     3bc:	8b 83       	std	Y+3, r24	; 0x03
     3be:	7e 83       	std	Y+6, r23	; 0x06
     3c0:	6d 83       	std	Y+5, r22	; 0x05
	Time_t *temp = &(fsm->timeSet);
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	03 96       	adiw	r24, 0x03	; 3
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01

	switch (e->signal) {
     3cc:	8d 81       	ldd	r24, Y+5	; 0x05
     3ce:	9e 81       	ldd	r25, Y+6	; 0x06
     3d0:	fc 01       	movw	r30, r24
     3d2:	80 81       	ld	r24, Z
     3d4:	88 2f       	mov	r24, r24
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	91 05       	cpc	r25, r1
     3dc:	b9 f0       	breq	.+46     	; 0x40c <sethour+0x60>
     3de:	83 30       	cpi	r24, 0x03	; 3
     3e0:	91 05       	cpc	r25, r1
     3e2:	34 f4       	brge	.+12     	; 0x3f0 <sethour+0x44>
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	81 f0       	breq	.+32     	; 0x408 <sethour+0x5c>
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	09 f4       	brne	.+2      	; 0x3ee <sethour+0x42>
     3ec:	12 c1       	rjmp	.+548    	; 0x612 <sethour+0x266>
     3ee:	13 c1       	rjmp	.+550    	; 0x616 <sethour+0x26a>
     3f0:	85 30       	cpi	r24, 0x05	; 5
     3f2:	91 05       	cpc	r25, r1
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <sethour+0x4c>
     3f6:	5d c0       	rjmp	.+186    	; 0x4b2 <sethour+0x106>
     3f8:	86 30       	cpi	r24, 0x06	; 6
     3fa:	91 05       	cpc	r25, r1
     3fc:	09 f4       	brne	.+2      	; 0x400 <sethour+0x54>
     3fe:	ac c0       	rjmp	.+344    	; 0x558 <sethour+0x1ac>
     400:	03 97       	sbiw	r24, 0x03	; 3
     402:	09 f4       	brne	.+2      	; 0x406 <sethour+0x5a>
     404:	fd c0       	rjmp	.+506    	; 0x600 <sethour+0x254>
     406:	07 c1       	rjmp	.+526    	; 0x616 <sethour+0x26a>
	case ENTRY:
		return RET_HANDLED;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	06 c1       	rjmp	.+524    	; 0x618 <sethour+0x26c>
	case ROTARY_PRESSED:
		if (++(temp->hour) > 23)
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	9a 81       	ldd	r25, Y+2	; 0x02
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	28 0f       	add	r18, r24
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	fc 01       	movw	r30, r24
     426:	80 81       	ld	r24, Z
     428:	88 31       	cpi	r24, 0x18	; 24
     42a:	20 f0       	brcs	.+8      	; 0x434 <sethour+0x88>
			temp->hour = 0;
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	fc 01       	movw	r30, r24
     432:	10 82       	st	Z, r1
		lcd_clear();
     434:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	fc 01       	movw	r30, r24
     446:	81 81       	ldd	r24, Z+1	; 0x01
     448:	48 2f       	mov	r20, r24
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	fc 01       	movw	r30, r24
     452:	80 81       	ld	r24, Z
     454:	28 2f       	mov	r18, r24
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	80 91 02 02 	lds	r24, 0x0202
     45c:	90 91 03 02 	lds	r25, 0x0203
     460:	65 2f       	mov	r22, r21
     462:	6f 93       	push	r22
     464:	4f 93       	push	r20
     466:	43 2f       	mov	r20, r19
     468:	4f 93       	push	r20
     46a:	2f 93       	push	r18
     46c:	24 e0       	ldi	r18, 0x04	; 4
     46e:	32 e0       	ldi	r19, 0x02	; 2
     470:	23 2f       	mov	r18, r19
     472:	2f 93       	push	r18
     474:	24 e0       	ldi	r18, 0x04	; 4
     476:	32 e0       	ldi	r19, 0x02	; 2
     478:	2f 93       	push	r18
     47a:	29 2f       	mov	r18, r25
     47c:	2f 93       	push	r18
     47e:	8f 93       	push	r24
     480:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     484:	8d b7       	in	r24, 0x3d	; 61
     486:	9e b7       	in	r25, 0x3e	; 62
     488:	08 96       	adiw	r24, 0x08	; 8
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock hour");
     494:	80 91 02 02 	lds	r24, 0x0202
     498:	90 91 03 02 	lds	r25, 0x0203
     49c:	9c 01       	movw	r18, r24
     49e:	4e e0       	ldi	r20, 0x0E	; 14
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	8f e0       	ldi	r24, 0x0F	; 15
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	b3 c0       	rjmp	.+358    	; 0x618 <sethour+0x26c>
	case ROTARY_INC:
		if (++(temp->hour) > 23)
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	28 0f       	add	r18, r24
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	88 31       	cpi	r24, 0x18	; 24
     4d0:	20 f0       	brcs	.+8      	; 0x4da <sethour+0x12e>
			temp->hour = 0;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	9a 81       	ldd	r25, Y+2	; 0x02
     4d6:	fc 01       	movw	r30, r24
     4d8:	10 82       	st	Z, r1
		lcd_clear();
     4da:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	fc 01       	movw	r30, r24
     4ec:	81 81       	ldd	r24, Z+1	; 0x01
     4ee:	48 2f       	mov	r20, r24
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	80 91 02 02 	lds	r24, 0x0202
     502:	90 91 03 02 	lds	r25, 0x0203
     506:	65 2f       	mov	r22, r21
     508:	6f 93       	push	r22
     50a:	4f 93       	push	r20
     50c:	43 2f       	mov	r20, r19
     50e:	4f 93       	push	r20
     510:	2f 93       	push	r18
     512:	24 e0       	ldi	r18, 0x04	; 4
     514:	32 e0       	ldi	r19, 0x02	; 2
     516:	23 2f       	mov	r18, r19
     518:	2f 93       	push	r18
     51a:	24 e0       	ldi	r18, 0x04	; 4
     51c:	32 e0       	ldi	r19, 0x02	; 2
     51e:	2f 93       	push	r18
     520:	29 2f       	mov	r18, r25
     522:	2f 93       	push	r18
     524:	8f 93       	push	r24
     526:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     52a:	8d b7       	in	r24, 0x3d	; 61
     52c:	9e b7       	in	r25, 0x3e	; 62
     52e:	08 96       	adiw	r24, 0x08	; 8
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock hour");
     53a:	80 91 02 02 	lds	r24, 0x0202
     53e:	90 91 03 02 	lds	r25, 0x0203
     542:	9c 01       	movw	r18, r24
     544:	4e e0       	ldi	r20, 0x0E	; 14
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	8f e0       	ldi	r24, 0x0F	; 15
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	60 c0       	rjmp	.+192    	; 0x618 <sethour+0x26c>
	case ROTARY_DEC:
		if ((temp->hour) == 0)
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	fc 01       	movw	r30, r24
     55e:	80 81       	ld	r24, Z
     560:	88 23       	and	r24, r24
     562:	29 f4       	brne	.+10     	; 0x56e <sethour+0x1c2>
			temp->hour = 24;
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	9a 81       	ldd	r25, Y+2	; 0x02
     568:	28 e1       	ldi	r18, 0x18	; 24
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18
		lcd_clear();
     56e:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", --(temp->hour), temp->minute);
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	fc 01       	movw	r30, r24
     580:	81 81       	ldd	r24, Z+1	; 0x01
     582:	48 2f       	mov	r20, r24
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	fc 01       	movw	r30, r24
     58c:	80 81       	ld	r24, Z
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	28 0f       	add	r18, r24
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	fc 01       	movw	r30, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	80 91 02 02 	lds	r24, 0x0202
     5aa:	90 91 03 02 	lds	r25, 0x0203
     5ae:	65 2f       	mov	r22, r21
     5b0:	6f 93       	push	r22
     5b2:	4f 93       	push	r20
     5b4:	43 2f       	mov	r20, r19
     5b6:	4f 93       	push	r20
     5b8:	2f 93       	push	r18
     5ba:	24 e0       	ldi	r18, 0x04	; 4
     5bc:	32 e0       	ldi	r19, 0x02	; 2
     5be:	23 2f       	mov	r18, r19
     5c0:	2f 93       	push	r18
     5c2:	24 e0       	ldi	r18, 0x04	; 4
     5c4:	32 e0       	ldi	r19, 0x02	; 2
     5c6:	2f 93       	push	r18
     5c8:	29 2f       	mov	r18, r25
     5ca:	2f 93       	push	r18
     5cc:	8f 93       	push	r24
     5ce:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     5d2:	8d b7       	in	r24, 0x3d	; 61
     5d4:	9e b7       	in	r25, 0x3e	; 62
     5d6:	08 96       	adiw	r24, 0x08	; 8
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock hour");
     5e2:	80 91 02 02 	lds	r24, 0x0202
     5e6:	90 91 03 02 	lds	r25, 0x0203
     5ea:	9c 01       	movw	r18, r24
     5ec:	4e e0       	ldi	r20, 0x0E	; 14
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	8f e0       	ldi	r24, 0x0F	; 15
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	0c c0       	rjmp	.+24     	; 0x618 <sethour+0x26c>
	case JOYSTICK_PRESSED:
		return TRANSITION(setmin);
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	25 e1       	ldi	r18, 0x15	; 21
     606:	33 e0       	ldi	r19, 0x03	; 3
     608:	fc 01       	movw	r30, r24
     60a:	31 83       	std	Z+1, r19	; 0x01
     60c:	20 83       	st	Z, r18
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	03 c0       	rjmp	.+6      	; 0x618 <sethour+0x26c>
	case EXIT:
		return RET_HANDLED;
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	01 c0       	rjmp	.+2      	; 0x618 <sethour+0x26c>
	default:
		return RET_IGNORED;
     616:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     618:	26 96       	adiw	r28, 0x06	; 6
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <setmin>:
fsmReturnStatus setmin(Fsm * fsm, const Event* e) {
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	2a 97       	sbiw	r28, 0x0a	; 10
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	98 87       	std	Y+8, r25	; 0x08
     648:	8f 83       	std	Y+7, r24	; 0x07
     64a:	7a 87       	std	Y+10, r23	; 0x0a
     64c:	69 87       	std	Y+9, r22	; 0x09
	Time_t *temp = &(fsm->timeSet);
     64e:	8f 81       	ldd	r24, Y+7	; 0x07
     650:	98 85       	ldd	r25, Y+8	; 0x08
     652:	03 96       	adiw	r24, 0x03	; 3
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
	systemTime_t now;

	switch (e->signal) {
     658:	89 85       	ldd	r24, Y+9	; 0x09
     65a:	9a 85       	ldd	r25, Y+10	; 0x0a
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	91 05       	cpc	r25, r1
     668:	09 f4       	brne	.+2      	; 0x66c <setmin+0x42>
     66a:	54 c0       	rjmp	.+168    	; 0x714 <setmin+0xea>
     66c:	83 30       	cpi	r24, 0x03	; 3
     66e:	91 05       	cpc	r25, r1
     670:	34 f4       	brge	.+12     	; 0x67e <setmin+0x54>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	81 f0       	breq	.+32     	; 0x696 <setmin+0x6c>
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	09 f4       	brne	.+2      	; 0x67c <setmin+0x52>
     67a:	4f c1       	rjmp	.+670    	; 0x91a <setmin+0x2f0>
     67c:	85 c1       	rjmp	.+778    	; 0x988 <setmin+0x35e>
     67e:	85 30       	cpi	r24, 0x05	; 5
     680:	91 05       	cpc	r25, r1
     682:	09 f4       	brne	.+2      	; 0x686 <setmin+0x5c>
     684:	9a c0       	rjmp	.+308    	; 0x7ba <setmin+0x190>
     686:	86 30       	cpi	r24, 0x06	; 6
     688:	91 05       	cpc	r25, r1
     68a:	09 f4       	brne	.+2      	; 0x68e <setmin+0x64>
     68c:	e9 c0       	rjmp	.+466    	; 0x860 <setmin+0x236>
     68e:	03 97       	sbiw	r24, 0x03	; 3
     690:	09 f4       	brne	.+2      	; 0x694 <setmin+0x6a>
     692:	3a c1       	rjmp	.+628    	; 0x908 <setmin+0x2de>
     694:	79 c1       	rjmp	.+754    	; 0x988 <setmin+0x35e>
	case ENTRY:
		lcd_clear();
     696:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	fc 01       	movw	r30, r24
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	48 2f       	mov	r20, r24
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	fc 01       	movw	r30, r24
     6b4:	80 81       	ld	r24, Z
     6b6:	28 2f       	mov	r18, r24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	80 91 02 02 	lds	r24, 0x0202
     6be:	90 91 03 02 	lds	r25, 0x0203
     6c2:	65 2f       	mov	r22, r21
     6c4:	6f 93       	push	r22
     6c6:	4f 93       	push	r20
     6c8:	43 2f       	mov	r20, r19
     6ca:	4f 93       	push	r20
     6cc:	2f 93       	push	r18
     6ce:	24 e0       	ldi	r18, 0x04	; 4
     6d0:	32 e0       	ldi	r19, 0x02	; 2
     6d2:	23 2f       	mov	r18, r19
     6d4:	2f 93       	push	r18
     6d6:	24 e0       	ldi	r18, 0x04	; 4
     6d8:	32 e0       	ldi	r19, 0x02	; 2
     6da:	2f 93       	push	r18
     6dc:	29 2f       	mov	r18, r25
     6de:	2f 93       	push	r18
     6e0:	8f 93       	push	r24
     6e2:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     6e6:	8d b7       	in	r24, 0x3d	; 61
     6e8:	9e b7       	in	r25, 0x3e	; 62
     6ea:	08 96       	adiw	r24, 0x08	; 8
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock min");
     6f6:	80 91 02 02 	lds	r24, 0x0202
     6fa:	90 91 03 02 	lds	r25, 0x0203
     6fe:	9c 01       	movw	r18, r24
     700:	4d e0       	ldi	r20, 0x0D	; 13
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	8e e1       	ldi	r24, 0x1E	; 30
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	3b c1       	rjmp	.+630    	; 0x98a <setmin+0x360>
	case ROTARY_PRESSED:
		if (++(temp->minute) > 59)
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	81 81       	ldd	r24, Z+1	; 0x01
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	28 0f       	add	r18, r24
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	fc 01       	movw	r30, r24
     726:	21 83       	std	Z+1, r18	; 0x01
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	fc 01       	movw	r30, r24
     72e:	81 81       	ldd	r24, Z+1	; 0x01
     730:	8c 33       	cpi	r24, 0x3C	; 60
     732:	20 f0       	brcs	.+8      	; 0x73c <setmin+0x112>
			temp->minute = 0;
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	9a 81       	ldd	r25, Y+2	; 0x02
     738:	fc 01       	movw	r30, r24
     73a:	11 82       	std	Z+1, r1	; 0x01
		lcd_clear();
     73c:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	fc 01       	movw	r30, r24
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	48 2f       	mov	r20, r24
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	28 2f       	mov	r18, r24
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	80 91 02 02 	lds	r24, 0x0202
     764:	90 91 03 02 	lds	r25, 0x0203
     768:	65 2f       	mov	r22, r21
     76a:	6f 93       	push	r22
     76c:	4f 93       	push	r20
     76e:	43 2f       	mov	r20, r19
     770:	4f 93       	push	r20
     772:	2f 93       	push	r18
     774:	24 e0       	ldi	r18, 0x04	; 4
     776:	32 e0       	ldi	r19, 0x02	; 2
     778:	23 2f       	mov	r18, r19
     77a:	2f 93       	push	r18
     77c:	24 e0       	ldi	r18, 0x04	; 4
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	2f 93       	push	r18
     782:	29 2f       	mov	r18, r25
     784:	2f 93       	push	r18
     786:	8f 93       	push	r24
     788:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     78c:	8d b7       	in	r24, 0x3d	; 61
     78e:	9e b7       	in	r25, 0x3e	; 62
     790:	08 96       	adiw	r24, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock min");
     79c:	80 91 02 02 	lds	r24, 0x0202
     7a0:	90 91 03 02 	lds	r25, 0x0203
     7a4:	9c 01       	movw	r18, r24
     7a6:	4d e0       	ldi	r20, 0x0D	; 13
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	8e e1       	ldi	r24, 0x1E	; 30
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	e8 c0       	rjmp	.+464    	; 0x98a <setmin+0x360>
	case ROTARY_INC:
		if (++(temp->minute) > 59)
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	fc 01       	movw	r30, r24
     7c0:	81 81       	ldd	r24, Z+1	; 0x01
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	28 0f       	add	r18, r24
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	fc 01       	movw	r30, r24
     7cc:	21 83       	std	Z+1, r18	; 0x01
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	fc 01       	movw	r30, r24
     7d4:	81 81       	ldd	r24, Z+1	; 0x01
     7d6:	8c 33       	cpi	r24, 0x3C	; 60
     7d8:	20 f0       	brcs	.+8      	; 0x7e2 <setmin+0x1b8>
			temp->minute = 0;
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	11 82       	std	Z+1, r1	; 0x01
		lcd_clear();
     7e2:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	fc 01       	movw	r30, r24
     7f4:	81 81       	ldd	r24, Z+1	; 0x01
     7f6:	48 2f       	mov	r20, r24
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	fc 01       	movw	r30, r24
     800:	80 81       	ld	r24, Z
     802:	28 2f       	mov	r18, r24
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	80 91 02 02 	lds	r24, 0x0202
     80a:	90 91 03 02 	lds	r25, 0x0203
     80e:	65 2f       	mov	r22, r21
     810:	6f 93       	push	r22
     812:	4f 93       	push	r20
     814:	43 2f       	mov	r20, r19
     816:	4f 93       	push	r20
     818:	2f 93       	push	r18
     81a:	24 e0       	ldi	r18, 0x04	; 4
     81c:	32 e0       	ldi	r19, 0x02	; 2
     81e:	23 2f       	mov	r18, r19
     820:	2f 93       	push	r18
     822:	24 e0       	ldi	r18, 0x04	; 4
     824:	32 e0       	ldi	r19, 0x02	; 2
     826:	2f 93       	push	r18
     828:	29 2f       	mov	r18, r25
     82a:	2f 93       	push	r18
     82c:	8f 93       	push	r24
     82e:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     832:	8d b7       	in	r24, 0x3d	; 61
     834:	9e b7       	in	r25, 0x3e	; 62
     836:	08 96       	adiw	r24, 0x08	; 8
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock min");
     842:	80 91 02 02 	lds	r24, 0x0202
     846:	90 91 03 02 	lds	r25, 0x0203
     84a:	9c 01       	movw	r18, r24
     84c:	4d e0       	ldi	r20, 0x0D	; 13
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	8e e1       	ldi	r24, 0x1E	; 30
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	95 c0       	rjmp	.+298    	; 0x98a <setmin+0x360>
	case ROTARY_DEC:
		if ((temp->minute) == 0)
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	fc 01       	movw	r30, r24
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	88 23       	and	r24, r24
     86a:	29 f4       	brne	.+10     	; 0x876 <setmin+0x24c>
			temp->minute = 60;
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	9a 81       	ldd	r25, Y+2	; 0x02
     870:	2c e3       	ldi	r18, 0x3C	; 60
     872:	fc 01       	movw	r30, r24
     874:	21 83       	std	Z+1, r18	; 0x01
		lcd_clear();
     876:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, --(temp->minute));
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	fc 01       	movw	r30, r24
     888:	81 81       	ldd	r24, Z+1	; 0x01
     88a:	2f ef       	ldi	r18, 0xFF	; 255
     88c:	28 0f       	add	r18, r24
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	fc 01       	movw	r30, r24
     894:	21 83       	std	Z+1, r18	; 0x01
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	fc 01       	movw	r30, r24
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	48 2f       	mov	r20, r24
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	9a 81       	ldd	r25, Y+2	; 0x02
     8a6:	fc 01       	movw	r30, r24
     8a8:	80 81       	ld	r24, Z
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	80 91 02 02 	lds	r24, 0x0202
     8b2:	90 91 03 02 	lds	r25, 0x0203
     8b6:	65 2f       	mov	r22, r21
     8b8:	6f 93       	push	r22
     8ba:	4f 93       	push	r20
     8bc:	43 2f       	mov	r20, r19
     8be:	4f 93       	push	r20
     8c0:	2f 93       	push	r18
     8c2:	24 e0       	ldi	r18, 0x04	; 4
     8c4:	32 e0       	ldi	r19, 0x02	; 2
     8c6:	23 2f       	mov	r18, r19
     8c8:	2f 93       	push	r18
     8ca:	24 e0       	ldi	r18, 0x04	; 4
     8cc:	32 e0       	ldi	r19, 0x02	; 2
     8ce:	2f 93       	push	r18
     8d0:	29 2f       	mov	r18, r25
     8d2:	2f 93       	push	r18
     8d4:	8f 93       	push	r24
     8d6:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     8da:	8d b7       	in	r24, 0x3d	; 61
     8dc:	9e b7       	in	r25, 0x3e	; 62
     8de:	08 96       	adiw	r24, 0x08	; 8
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set clock min");
     8ea:	80 91 02 02 	lds	r24, 0x0202
     8ee:	90 91 03 02 	lds	r25, 0x0203
     8f2:	9c 01       	movw	r18, r24
     8f4:	4d e0       	ldi	r20, 0x0D	; 13
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	8e e1       	ldi	r24, 0x1E	; 30
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	41 c0       	rjmp	.+130    	; 0x98a <setmin+0x360>
	case JOYSTICK_PRESSED:
		return TRANSITION(normal_operating);
     908:	8f 81       	ldd	r24, Y+7	; 0x07
     90a:	98 85       	ldd	r25, Y+8	; 0x08
     90c:	22 ed       	ldi	r18, 0xD2	; 210
     90e:	34 e0       	ldi	r19, 0x04	; 4
     910:	fc 01       	movw	r30, r24
     912:	31 83       	std	Z+1, r19	; 0x01
     914:	20 83       	st	Z, r18
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	38 c0       	rjmp	.+112    	; 0x98a <setmin+0x360>
	case EXIT: //set the time variable in scheduler. The variable is the real clock.
		temp->second = 0;
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	fc 01       	movw	r30, r24
     920:	12 82       	std	Z+2, r1	; 0x02
		now = (systemTime_t) ((temp->hour) * 3600 + (temp->minute) * 60) * 1000;
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	9c 01       	movw	r18, r24
     934:	ad 01       	movw	r20, r26
     936:	60 e8       	ldi	r22, 0x80	; 128
     938:	7e ee       	ldi	r23, 0xEE	; 238
     93a:	86 e3       	ldi	r24, 0x36	; 54
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     942:	7b 01       	movw	r14, r22
     944:	8c 01       	movw	r16, r24
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	fc 01       	movw	r30, r24
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	28 2f       	mov	r18, r24
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	80 e6       	ldi	r24, 0x60	; 96
     958:	9a ee       	ldi	r25, 0xEA	; 234
     95a:	dc 01       	movw	r26, r24
     95c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__muluhisi3>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	8e 0d       	add	r24, r14
     966:	9f 1d       	adc	r25, r15
     968:	a0 1f       	adc	r26, r16
     96a:	b1 1f       	adc	r27, r17
     96c:	8b 83       	std	Y+3, r24	; 0x03
     96e:	9c 83       	std	Y+4, r25	; 0x04
     970:	ad 83       	std	Y+5, r26	; 0x05
     972:	be 83       	std	Y+6, r27	; 0x06
		scheduler_setTime(now);
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	ad 81       	ldd	r26, Y+5	; 0x05
     97a:	be 81       	ldd	r27, Y+6	; 0x06
     97c:	bc 01       	movw	r22, r24
     97e:	cd 01       	movw	r24, r26
     980:	0e 94 ac 10 	call	0x2158	; 0x2158 <scheduler_setTime>
		return RET_HANDLED;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	01 c0       	rjmp	.+2      	; 0x98a <setmin+0x360>
	default:
		return RET_IGNORED;
     988:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     98a:	2a 96       	adiw	r28, 0x0a	; 10
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	08 95       	ret

000009a4 <normal_operating>:
fsmReturnStatus normal_operating(Fsm * fsm, const Event* e) {
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <normal_operating+0x6>
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <normal_operating+0x8>
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	9a 83       	std	Y+2, r25	; 0x02
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	7c 83       	std	Y+4, r23	; 0x04
     9b6:	6b 83       	std	Y+3, r22	; 0x03
	static bool enable = false;

	switch (e->signal) {
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	9c 81       	ldd	r25, Y+4	; 0x04
     9bc:	fc 01       	movw	r30, r24
     9be:	80 81       	ld	r24, Z
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	91 05       	cpc	r25, r1
     9c8:	11 f1       	breq	.+68     	; 0xa0e <normal_operating+0x6a>
     9ca:	83 30       	cpi	r24, 0x03	; 3
     9cc:	91 05       	cpc	r25, r1
     9ce:	34 f4       	brge	.+12     	; 0x9dc <normal_operating+0x38>
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	51 f0       	breq	.+20     	; 0x9e8 <normal_operating+0x44>
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	09 f4       	brne	.+2      	; 0x9da <normal_operating+0x36>
     9d8:	4b c0       	rjmp	.+150    	; 0xa70 <normal_operating+0xcc>
     9da:	50 c0       	rjmp	.+160    	; 0xa7c <normal_operating+0xd8>
     9dc:	83 30       	cpi	r24, 0x03	; 3
     9de:	91 05       	cpc	r25, r1
     9e0:	69 f0       	breq	.+26     	; 0x9fc <normal_operating+0x58>
     9e2:	04 97       	sbiw	r24, 0x04	; 4
     9e4:	a1 f1       	breq	.+104    	; 0xa4e <normal_operating+0xaa>
     9e6:	4a c0       	rjmp	.+148    	; 0xa7c <normal_operating+0xd8>
	case ENTRY:
		td_time_increment.expire = 0;
     9e8:	10 92 75 08 	sts	0x0875, r1
     9ec:	10 92 74 08 	sts	0x0874, r1
		scheduler_add(&td_time_increment);
     9f0:	80 e7       	ldi	r24, 0x70	; 112
     9f2:	98 e0       	ldi	r25, 0x08	; 8
     9f4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
		return RET_HANDLED;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	41 c0       	rjmp	.+130    	; 0xa7e <normal_operating+0xda>
	case JOYSTICK_PRESSED:
		return TRANSITION(set_alarm_hour);
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	26 e4       	ldi	r18, 0x46	; 70
     a02:	35 e0       	ldi	r19, 0x05	; 5
     a04:	fc 01       	movw	r30, r24
     a06:	31 83       	std	Z+1, r19	; 0x01
     a08:	20 83       	st	Z, r18
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	38 c0       	rjmp	.+112    	; 0xa7e <normal_operating+0xda>
	case ROTARY_PRESSED:
		enable = !enable;
     a0e:	80 91 91 08 	lds	r24, 0x0891
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	89 2b       	or	r24, r25
     a1a:	09 f4       	brne	.+2      	; 0xa1e <normal_operating+0x7a>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	82 27       	eor	r24, r18
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	81 70       	andi	r24, 0x01	; 1
     a28:	80 93 91 08 	sts	0x0891, r24
		fsm->isAlarmEnabled = enable;
     a2c:	20 91 91 08 	lds	r18, 0x0891
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	fc 01       	movw	r30, r24
     a36:	22 83       	std	Z+2, r18	; 0x02
		if (enable)
     a38:	80 91 91 08 	lds	r24, 0x0891
     a3c:	88 23       	and	r24, r24
     a3e:	19 f0       	breq	.+6      	; 0xa46 <normal_operating+0xa2>
			led_yellowOn();
     a40:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <led_yellowOn>
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <normal_operating+0xa6>
		else
			led_yellowOff();
     a46:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <led_yellowOff>
		return RET_HANDLED;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	18 c0       	rjmp	.+48     	; 0xa7e <normal_operating+0xda>
	case MATCHING:
		if (fsm->isAlarmEnabled) {
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	fc 01       	movw	r30, r24
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	88 23       	and	r24, r24
     a58:	49 f0       	breq	.+18     	; 0xa6c <normal_operating+0xc8>
			return TRANSITION(led_toggle);
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	2e e4       	ldi	r18, 0x4E	; 78
     a60:	38 e0       	ldi	r19, 0x08	; 8
     a62:	fc 01       	movw	r30, r24
     a64:	31 83       	std	Z+1, r19	; 0x01
     a66:	20 83       	st	Z, r18
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	09 c0       	rjmp	.+18     	; 0xa7e <normal_operating+0xda>
		} else
			return RET_HANDLED;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	07 c0       	rjmp	.+14     	; 0xa7e <normal_operating+0xda>
	case EXIT:
		scheduler_remove(&td_time_increment);
     a70:	80 e7       	ldi	r24, 0x70	; 112
     a72:	98 e0       	ldi	r25, 0x08	; 8
     a74:	0e 94 09 10 	call	0x2012	; 0x2012 <scheduler_remove>
		return RET_HANDLED;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <normal_operating+0xda>
	default:
		return RET_IGNORED;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <set_alarm_hour>:
fsmReturnStatus set_alarm_hour(Fsm * fsm, const Event* e) {
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	00 d0       	rcall	.+0      	; 0xa92 <set_alarm_hour+0x6>
     a92:	00 d0       	rcall	.+0      	; 0xa94 <set_alarm_hour+0x8>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <set_alarm_hour+0xa>
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	9c 83       	std	Y+4, r25	; 0x04
     a9c:	8b 83       	std	Y+3, r24	; 0x03
     a9e:	7e 83       	std	Y+6, r23	; 0x06
     aa0:	6d 83       	std	Y+5, r22	; 0x05
	Time_t *temp = &(fsm->timeSet);
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	03 96       	adiw	r24, 0x03	; 3
     aa8:	9a 83       	std	Y+2, r25	; 0x02
     aaa:	89 83       	std	Y+1, r24	; 0x01
	switch (e->signal) {
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	9e 81       	ldd	r25, Y+6	; 0x06
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	91 05       	cpc	r25, r1
     abc:	09 f4       	brne	.+2      	; 0xac0 <set_alarm_hour+0x34>
     abe:	54 c0       	rjmp	.+168    	; 0xb68 <set_alarm_hour+0xdc>
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	91 05       	cpc	r25, r1
     ac4:	34 f4       	brge	.+12     	; 0xad2 <set_alarm_hour+0x46>
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	81 f0       	breq	.+32     	; 0xaea <set_alarm_hour+0x5e>
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	09 f4       	brne	.+2      	; 0xad0 <set_alarm_hour+0x44>
     ace:	4f c1       	rjmp	.+670    	; 0xd6e <set_alarm_hour+0x2e2>
     ad0:	50 c1       	rjmp	.+672    	; 0xd72 <set_alarm_hour+0x2e6>
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	91 05       	cpc	r25, r1
     ad6:	09 f4       	brne	.+2      	; 0xada <set_alarm_hour+0x4e>
     ad8:	9a c0       	rjmp	.+308    	; 0xc0e <set_alarm_hour+0x182>
     ada:	86 30       	cpi	r24, 0x06	; 6
     adc:	91 05       	cpc	r25, r1
     ade:	09 f4       	brne	.+2      	; 0xae2 <set_alarm_hour+0x56>
     ae0:	e9 c0       	rjmp	.+466    	; 0xcb4 <set_alarm_hour+0x228>
     ae2:	03 97       	sbiw	r24, 0x03	; 3
     ae4:	09 f4       	brne	.+2      	; 0xae8 <set_alarm_hour+0x5c>
     ae6:	3a c1       	rjmp	.+628    	; 0xd5c <set_alarm_hour+0x2d0>
     ae8:	44 c1       	rjmp	.+648    	; 0xd72 <set_alarm_hour+0x2e6>
	case ENTRY:
		lcd_clear();
     aea:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	fc 01       	movw	r30, r24
     afc:	81 81       	ldd	r24, Z+1	; 0x01
     afe:	48 2f       	mov	r20, r24
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	80 91 02 02 	lds	r24, 0x0202
     b12:	90 91 03 02 	lds	r25, 0x0203
     b16:	65 2f       	mov	r22, r21
     b18:	6f 93       	push	r22
     b1a:	4f 93       	push	r20
     b1c:	43 2f       	mov	r20, r19
     b1e:	4f 93       	push	r20
     b20:	2f 93       	push	r18
     b22:	24 e0       	ldi	r18, 0x04	; 4
     b24:	32 e0       	ldi	r19, 0x02	; 2
     b26:	23 2f       	mov	r18, r19
     b28:	2f 93       	push	r18
     b2a:	24 e0       	ldi	r18, 0x04	; 4
     b2c:	32 e0       	ldi	r19, 0x02	; 2
     b2e:	2f 93       	push	r18
     b30:	29 2f       	mov	r18, r25
     b32:	2f 93       	push	r18
     b34:	8f 93       	push	r24
     b36:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     b3a:	8d b7       	in	r24, 0x3d	; 61
     b3c:	9e b7       	in	r25, 0x3e	; 62
     b3e:	08 96       	adiw	r24, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm hour");
     b4a:	80 91 02 02 	lds	r24, 0x0202
     b4e:	90 91 03 02 	lds	r25, 0x0203
     b52:	9c 01       	movw	r18, r24
     b54:	4e e0       	ldi	r20, 0x0E	; 14
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	8c e2       	ldi	r24, 0x2C	; 44
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	06 c1       	rjmp	.+524    	; 0xd74 <set_alarm_hour+0x2e8>
	case ROTARY_PRESSED:
		if (++(temp->hour) > 23)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	fc 01       	movw	r30, r24
     b6e:	80 81       	ld	r24, Z
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	28 0f       	add	r18, r24
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	fc 01       	movw	r30, r24
     b82:	80 81       	ld	r24, Z
     b84:	88 31       	cpi	r24, 0x18	; 24
     b86:	20 f0       	brcs	.+8      	; 0xb90 <set_alarm_hour+0x104>
			temp->hour = 0;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	fc 01       	movw	r30, r24
     b8e:	10 82       	st	Z, r1
		lcd_clear();
     b90:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	fc 01       	movw	r30, r24
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	48 2f       	mov	r20, r24
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	fc 01       	movw	r30, r24
     bae:	80 81       	ld	r24, Z
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	80 91 02 02 	lds	r24, 0x0202
     bb8:	90 91 03 02 	lds	r25, 0x0203
     bbc:	65 2f       	mov	r22, r21
     bbe:	6f 93       	push	r22
     bc0:	4f 93       	push	r20
     bc2:	43 2f       	mov	r20, r19
     bc4:	4f 93       	push	r20
     bc6:	2f 93       	push	r18
     bc8:	24 e0       	ldi	r18, 0x04	; 4
     bca:	32 e0       	ldi	r19, 0x02	; 2
     bcc:	23 2f       	mov	r18, r19
     bce:	2f 93       	push	r18
     bd0:	24 e0       	ldi	r18, 0x04	; 4
     bd2:	32 e0       	ldi	r19, 0x02	; 2
     bd4:	2f 93       	push	r18
     bd6:	29 2f       	mov	r18, r25
     bd8:	2f 93       	push	r18
     bda:	8f 93       	push	r24
     bdc:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     be0:	8d b7       	in	r24, 0x3d	; 61
     be2:	9e b7       	in	r25, 0x3e	; 62
     be4:	08 96       	adiw	r24, 0x08	; 8
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm hour");
     bf0:	80 91 02 02 	lds	r24, 0x0202
     bf4:	90 91 03 02 	lds	r25, 0x0203
     bf8:	9c 01       	movw	r18, r24
     bfa:	4e e0       	ldi	r20, 0x0E	; 14
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	8c e2       	ldi	r24, 0x2C	; 44
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	b3 c0       	rjmp	.+358    	; 0xd74 <set_alarm_hour+0x2e8>
	case ROTARY_INC:
		if (++(temp->hour) > 23)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	28 0f       	add	r18, r24
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	fc 01       	movw	r30, r24
     c28:	80 81       	ld	r24, Z
     c2a:	88 31       	cpi	r24, 0x18	; 24
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <set_alarm_hour+0x1aa>
			temp->hour = 0;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	fc 01       	movw	r30, r24
     c34:	10 82       	st	Z, r1
		lcd_clear();
     c36:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	fc 01       	movw	r30, r24
     c48:	81 81       	ldd	r24, Z+1	; 0x01
     c4a:	48 2f       	mov	r20, r24
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	80 91 02 02 	lds	r24, 0x0202
     c5e:	90 91 03 02 	lds	r25, 0x0203
     c62:	65 2f       	mov	r22, r21
     c64:	6f 93       	push	r22
     c66:	4f 93       	push	r20
     c68:	43 2f       	mov	r20, r19
     c6a:	4f 93       	push	r20
     c6c:	2f 93       	push	r18
     c6e:	24 e0       	ldi	r18, 0x04	; 4
     c70:	32 e0       	ldi	r19, 0x02	; 2
     c72:	23 2f       	mov	r18, r19
     c74:	2f 93       	push	r18
     c76:	24 e0       	ldi	r18, 0x04	; 4
     c78:	32 e0       	ldi	r19, 0x02	; 2
     c7a:	2f 93       	push	r18
     c7c:	29 2f       	mov	r18, r25
     c7e:	2f 93       	push	r18
     c80:	8f 93       	push	r24
     c82:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     c86:	8d b7       	in	r24, 0x3d	; 61
     c88:	9e b7       	in	r25, 0x3e	; 62
     c8a:	08 96       	adiw	r24, 0x08	; 8
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm hour");
     c96:	80 91 02 02 	lds	r24, 0x0202
     c9a:	90 91 03 02 	lds	r25, 0x0203
     c9e:	9c 01       	movw	r18, r24
     ca0:	4e e0       	ldi	r20, 0x0E	; 14
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	8c e2       	ldi	r24, 0x2C	; 44
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	60 c0       	rjmp	.+192    	; 0xd74 <set_alarm_hour+0x2e8>
	case ROTARY_DEC:
		if ((temp->hour) == 0)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	fc 01       	movw	r30, r24
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	29 f4       	brne	.+10     	; 0xcca <set_alarm_hour+0x23e>
			temp->hour = 24;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	28 e1       	ldi	r18, 0x18	; 24
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
		lcd_clear();
     cca:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", --(temp->hour), temp->minute);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	fc 01       	movw	r30, r24
     cdc:	81 81       	ldd	r24, Z+1	; 0x01
     cde:	48 2f       	mov	r20, r24
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	fc 01       	movw	r30, r24
     ce8:	80 81       	ld	r24, Z
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	28 0f       	add	r18, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	80 91 02 02 	lds	r24, 0x0202
     d06:	90 91 03 02 	lds	r25, 0x0203
     d0a:	65 2f       	mov	r22, r21
     d0c:	6f 93       	push	r22
     d0e:	4f 93       	push	r20
     d10:	43 2f       	mov	r20, r19
     d12:	4f 93       	push	r20
     d14:	2f 93       	push	r18
     d16:	24 e0       	ldi	r18, 0x04	; 4
     d18:	32 e0       	ldi	r19, 0x02	; 2
     d1a:	23 2f       	mov	r18, r19
     d1c:	2f 93       	push	r18
     d1e:	24 e0       	ldi	r18, 0x04	; 4
     d20:	32 e0       	ldi	r19, 0x02	; 2
     d22:	2f 93       	push	r18
     d24:	29 2f       	mov	r18, r25
     d26:	2f 93       	push	r18
     d28:	8f 93       	push	r24
     d2a:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     d2e:	8d b7       	in	r24, 0x3d	; 61
     d30:	9e b7       	in	r25, 0x3e	; 62
     d32:	08 96       	adiw	r24, 0x08	; 8
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm hour");
     d3e:	80 91 02 02 	lds	r24, 0x0202
     d42:	90 91 03 02 	lds	r25, 0x0203
     d46:	9c 01       	movw	r18, r24
     d48:	4e e0       	ldi	r20, 0x0E	; 14
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	8c e2       	ldi	r24, 0x2C	; 44
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <set_alarm_hour+0x2e8>
	case JOYSTICK_PRESSED:
		return TRANSITION(set_alarm_min);
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	23 ec       	ldi	r18, 0xC3	; 195
     d62:	36 e0       	ldi	r19, 0x06	; 6
     d64:	fc 01       	movw	r30, r24
     d66:	31 83       	std	Z+1, r19	; 0x01
     d68:	20 83       	st	Z, r18
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <set_alarm_hour+0x2e8>
	case EXIT:
		return RET_HANDLED;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <set_alarm_hour+0x2e8>
	default:
		return RET_IGNORED;
     d72:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     d74:	26 96       	adiw	r28, 0x06	; 6
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <set_alarm_min>:
fsmReturnStatus set_alarm_min(Fsm * fsm, const Event* e) {
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <set_alarm_min+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <set_alarm_min+0x8>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <set_alarm_min+0xa>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	7e 83       	std	Y+6, r23	; 0x06
     d9a:	6d 83       	std	Y+5, r22	; 0x05

	Time_t *temp = &(fsm->timeSet);
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	03 96       	adiw	r24, 0x03	; 3
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01

	switch (e->signal) {
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <set_alarm_min+0x34>
     db8:	54 c0       	rjmp	.+168    	; 0xe62 <set_alarm_min+0xdc>
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	91 05       	cpc	r25, r1
     dbe:	34 f4       	brge	.+12     	; 0xdcc <set_alarm_min+0x46>
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	81 f0       	breq	.+32     	; 0xde4 <set_alarm_min+0x5e>
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	09 f4       	brne	.+2      	; 0xdca <set_alarm_min+0x44>
     dc8:	4f c1       	rjmp	.+670    	; 0x1068 <set_alarm_min+0x2e2>
     dca:	5e c1       	rjmp	.+700    	; 0x1088 <set_alarm_min+0x302>
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <set_alarm_min+0x4e>
     dd2:	9a c0       	rjmp	.+308    	; 0xf08 <set_alarm_min+0x182>
     dd4:	86 30       	cpi	r24, 0x06	; 6
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <set_alarm_min+0x56>
     dda:	e9 c0       	rjmp	.+466    	; 0xfae <set_alarm_min+0x228>
     ddc:	03 97       	sbiw	r24, 0x03	; 3
     dde:	09 f4       	brne	.+2      	; 0xde2 <set_alarm_min+0x5c>
     de0:	3a c1       	rjmp	.+628    	; 0x1056 <set_alarm_min+0x2d0>
     de2:	52 c1       	rjmp	.+676    	; 0x1088 <set_alarm_min+0x302>
	case ENTRY:
		lcd_clear();
     de4:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	fc 01       	movw	r30, r24
     df6:	81 81       	ldd	r24, Z+1	; 0x01
     df8:	48 2f       	mov	r20, r24
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	fc 01       	movw	r30, r24
     e02:	80 81       	ld	r24, Z
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	80 91 02 02 	lds	r24, 0x0202
     e0c:	90 91 03 02 	lds	r25, 0x0203
     e10:	65 2f       	mov	r22, r21
     e12:	6f 93       	push	r22
     e14:	4f 93       	push	r20
     e16:	43 2f       	mov	r20, r19
     e18:	4f 93       	push	r20
     e1a:	2f 93       	push	r18
     e1c:	24 e0       	ldi	r18, 0x04	; 4
     e1e:	32 e0       	ldi	r19, 0x02	; 2
     e20:	23 2f       	mov	r18, r19
     e22:	2f 93       	push	r18
     e24:	24 e0       	ldi	r18, 0x04	; 4
     e26:	32 e0       	ldi	r19, 0x02	; 2
     e28:	2f 93       	push	r18
     e2a:	29 2f       	mov	r18, r25
     e2c:	2f 93       	push	r18
     e2e:	8f 93       	push	r24
     e30:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     e34:	8d b7       	in	r24, 0x3d	; 61
     e36:	9e b7       	in	r25, 0x3e	; 62
     e38:	08 96       	adiw	r24, 0x08	; 8
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm min");
     e44:	80 91 02 02 	lds	r24, 0x0202
     e48:	90 91 03 02 	lds	r25, 0x0203
     e4c:	9c 01       	movw	r18, r24
     e4e:	4d e0       	ldi	r20, 0x0D	; 13
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	8b e3       	ldi	r24, 0x3B	; 59
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	14 c1       	rjmp	.+552    	; 0x108a <set_alarm_min+0x304>
	case ROTARY_PRESSED:
		if (++(temp->minute) > 59)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	fc 01       	movw	r30, r24
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	28 0f       	add	r18, r24
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	fc 01       	movw	r30, r24
     e74:	21 83       	std	Z+1, r18	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	fc 01       	movw	r30, r24
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	8c 33       	cpi	r24, 0x3C	; 60
     e80:	20 f0       	brcs	.+8      	; 0xe8a <set_alarm_min+0x104>
			temp->minute = 0;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	fc 01       	movw	r30, r24
     e88:	11 82       	std	Z+1, r1	; 0x01
		lcd_clear();
     e8a:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	fc 01       	movw	r30, r24
     e9c:	81 81       	ldd	r24, Z+1	; 0x01
     e9e:	48 2f       	mov	r20, r24
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	80 91 02 02 	lds	r24, 0x0202
     eb2:	90 91 03 02 	lds	r25, 0x0203
     eb6:	65 2f       	mov	r22, r21
     eb8:	6f 93       	push	r22
     eba:	4f 93       	push	r20
     ebc:	43 2f       	mov	r20, r19
     ebe:	4f 93       	push	r20
     ec0:	2f 93       	push	r18
     ec2:	24 e0       	ldi	r18, 0x04	; 4
     ec4:	32 e0       	ldi	r19, 0x02	; 2
     ec6:	23 2f       	mov	r18, r19
     ec8:	2f 93       	push	r18
     eca:	24 e0       	ldi	r18, 0x04	; 4
     ecc:	32 e0       	ldi	r19, 0x02	; 2
     ece:	2f 93       	push	r18
     ed0:	29 2f       	mov	r18, r25
     ed2:	2f 93       	push	r18
     ed4:	8f 93       	push	r24
     ed6:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     eda:	8d b7       	in	r24, 0x3d	; 61
     edc:	9e b7       	in	r25, 0x3e	; 62
     ede:	08 96       	adiw	r24, 0x08	; 8
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm min");
     eea:	80 91 02 02 	lds	r24, 0x0202
     eee:	90 91 03 02 	lds	r25, 0x0203
     ef2:	9c 01       	movw	r18, r24
     ef4:	4d e0       	ldi	r20, 0x0D	; 13
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	8b e3       	ldi	r24, 0x3B	; 59
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	c1 c0       	rjmp	.+386    	; 0x108a <set_alarm_min+0x304>
	case ROTARY_INC:
		if (++(temp->minute) > 59)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	fc 01       	movw	r30, r24
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	28 0f       	add	r18, r24
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	fc 01       	movw	r30, r24
     f1a:	21 83       	std	Z+1, r18	; 0x01
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	fc 01       	movw	r30, r24
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	8c 33       	cpi	r24, 0x3C	; 60
     f26:	20 f0       	brcs	.+8      	; 0xf30 <set_alarm_min+0x1aa>
			temp->minute = 0;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	11 82       	std	Z+1, r1	; 0x01
		lcd_clear();
     f30:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, temp->minute);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	81 81       	ldd	r24, Z+1	; 0x01
     f44:	48 2f       	mov	r20, r24
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	80 91 02 02 	lds	r24, 0x0202
     f58:	90 91 03 02 	lds	r25, 0x0203
     f5c:	65 2f       	mov	r22, r21
     f5e:	6f 93       	push	r22
     f60:	4f 93       	push	r20
     f62:	43 2f       	mov	r20, r19
     f64:	4f 93       	push	r20
     f66:	2f 93       	push	r18
     f68:	24 e0       	ldi	r18, 0x04	; 4
     f6a:	32 e0       	ldi	r19, 0x02	; 2
     f6c:	23 2f       	mov	r18, r19
     f6e:	2f 93       	push	r18
     f70:	24 e0       	ldi	r18, 0x04	; 4
     f72:	32 e0       	ldi	r19, 0x02	; 2
     f74:	2f 93       	push	r18
     f76:	29 2f       	mov	r18, r25
     f78:	2f 93       	push	r18
     f7a:	8f 93       	push	r24
     f7c:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
     f80:	8d b7       	in	r24, 0x3d	; 61
     f82:	9e b7       	in	r25, 0x3e	; 62
     f84:	08 96       	adiw	r24, 0x08	; 8
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm min");
     f90:	80 91 02 02 	lds	r24, 0x0202
     f94:	90 91 03 02 	lds	r25, 0x0203
     f98:	9c 01       	movw	r18, r24
     f9a:	4d e0       	ldi	r20, 0x0D	; 13
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	8b e3       	ldi	r24, 0x3B	; 59
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	6e c0       	rjmp	.+220    	; 0x108a <set_alarm_min+0x304>
	case ROTARY_DEC:
		if ((temp->minute) == 0)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	fc 01       	movw	r30, r24
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	88 23       	and	r24, r24
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <set_alarm_min+0x23e>
			temp->minute = 60;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	2c e3       	ldi	r18, 0x3C	; 60
     fc0:	fc 01       	movw	r30, r24
     fc2:	21 83       	std	Z+1, r18	; 0x01
		lcd_clear();
     fc4:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
		lcd_setCursor(0, 0);
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
		fprintf(lcdout, "%02d:%02d\n", temp->hour, --(temp->minute));
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	fc 01       	movw	r30, r24
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	2f ef       	ldi	r18, 0xFF	; 255
     fda:	28 0f       	add	r18, r24
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	fc 01       	movw	r30, r24
     fe2:	21 83       	std	Z+1, r18	; 0x01
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	fc 01       	movw	r30, r24
     fea:	81 81       	ldd	r24, Z+1	; 0x01
     fec:	48 2f       	mov	r20, r24
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	80 91 02 02 	lds	r24, 0x0202
    1000:	90 91 03 02 	lds	r25, 0x0203
    1004:	65 2f       	mov	r22, r21
    1006:	6f 93       	push	r22
    1008:	4f 93       	push	r20
    100a:	43 2f       	mov	r20, r19
    100c:	4f 93       	push	r20
    100e:	2f 93       	push	r18
    1010:	24 e0       	ldi	r18, 0x04	; 4
    1012:	32 e0       	ldi	r19, 0x02	; 2
    1014:	23 2f       	mov	r18, r19
    1016:	2f 93       	push	r18
    1018:	24 e0       	ldi	r18, 0x04	; 4
    101a:	32 e0       	ldi	r19, 0x02	; 2
    101c:	2f 93       	push	r18
    101e:	29 2f       	mov	r18, r25
    1020:	2f 93       	push	r18
    1022:	8f 93       	push	r24
    1024:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
    1028:	8d b7       	in	r24, 0x3d	; 61
    102a:	9e b7       	in	r25, 0x3e	; 62
    102c:	08 96       	adiw	r24, 0x08	; 8
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
		fprintf(lcdout, "set alarm min");
    1038:	80 91 02 02 	lds	r24, 0x0202
    103c:	90 91 03 02 	lds	r25, 0x0203
    1040:	9c 01       	movw	r18, r24
    1042:	4d e0       	ldi	r20, 0x0D	; 13
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	8b e3       	ldi	r24, 0x3B	; 59
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <fwrite>
		return RET_HANDLED;
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	1a c0       	rjmp	.+52     	; 0x108a <set_alarm_min+0x304>
	case JOYSTICK_PRESSED:
		return TRANSITION(normal_operating);
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	22 ed       	ldi	r18, 0xD2	; 210
    105c:	34 e0       	ldi	r19, 0x04	; 4
    105e:	fc 01       	movw	r30, r24
    1060:	31 83       	std	Z+1, r19	; 0x01
    1062:	20 83       	st	Z, r18
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	11 c0       	rjmp	.+34     	; 0x108a <set_alarm_min+0x304>
	case EXIT:
		td_check_matching.param = fsm;//in order to get the timeSet in the check matching
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	90 93 7e 08 	sts	0x087E, r25
    1070:	80 93 7d 08 	sts	0x087D, r24
		td_check_matching.expire = 0;
    1074:	10 92 80 08 	sts	0x0880, r1
    1078:	10 92 7f 08 	sts	0x087F, r1
		scheduler_add(&td_check_matching);
    107c:	8b e7       	ldi	r24, 0x7B	; 123
    107e:	98 e0       	ldi	r25, 0x08	; 8
    1080:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
		return RET_HANDLED;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	01 c0       	rjmp	.+2      	; 0x108a <set_alarm_min+0x304>
	default:
		return RET_IGNORED;
    1088:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    108a:	26 96       	adiw	r28, 0x06	; 6
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <led_toggle>:
fsmReturnStatus led_toggle(Fsm * fsm, const Event* e) {
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <led_toggle+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <led_toggle+0x8>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	7c 83       	std	Y+4, r23	; 0x04
    10ae:	6b 83       	std	Y+3, r22	; 0x03
//	td3.expire = 0;
//	td3.period = 1000; // every second update the time of the clock
//	td3.execute = 0;
//	td3.next = NULL;

	switch (e->signal) {
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	fc 01       	movw	r30, r24
    10b6:	80 81       	ld	r24, Z
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	d1 f1       	breq	.+116    	; 0x1136 <led_toggle+0x9a>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	91 05       	cpc	r25, r1
    10c6:	1c f4       	brge	.+6      	; 0x10ce <led_toggle+0x32>
    10c8:	89 2b       	or	r24, r25
    10ca:	39 f0       	breq	.+14     	; 0x10da <led_toggle+0x3e>
    10cc:	44 c0       	rjmp	.+136    	; 0x1156 <led_toggle+0xba>
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	41 f1       	breq	.+80     	; 0x1124 <led_toggle+0x88>
    10d4:	03 97       	sbiw	r24, 0x03	; 3
    10d6:	e9 f0       	breq	.+58     	; 0x1112 <led_toggle+0x76>
    10d8:	3e c0       	rjmp	.+124    	; 0x1156 <led_toggle+0xba>
	case ENTRY:
		td_toggle_led.expire = 0;
    10da:	10 92 5f 08 	sts	0x085F, r1
    10de:	10 92 5e 08 	sts	0x085E, r1
		td_turnoff_led.expire = 5000;
    10e2:	88 e8       	ldi	r24, 0x88	; 136
    10e4:	93 e1       	ldi	r25, 0x13	; 19
    10e6:	90 93 6a 08 	sts	0x086A, r25
    10ea:	80 93 69 08 	sts	0x0869, r24
		td_time_increment.expire = 0;
    10ee:	10 92 75 08 	sts	0x0875, r1
    10f2:	10 92 74 08 	sts	0x0874, r1
		scheduler_add(&td_toggle_led);
    10f6:	8a e5       	ldi	r24, 0x5A	; 90
    10f8:	98 e0       	ldi	r25, 0x08	; 8
    10fa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
		scheduler_add(&td_turnoff_led);
    10fe:	85 e6       	ldi	r24, 0x65	; 101
    1100:	98 e0       	ldi	r25, 0x08	; 8
    1102:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
		scheduler_add(&td_time_increment);
    1106:	80 e7       	ldi	r24, 0x70	; 112
    1108:	98 e0       	ldi	r25, 0x08	; 8
    110a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
		return RET_HANDLED;
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	23 c0       	rjmp	.+70     	; 0x1158 <led_toggle+0xbc>
	case JOYSTICK_PRESSED:
		return TRANSITION(normal_operating);
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	22 ed       	ldi	r18, 0xD2	; 210
    1118:	34 e0       	ldi	r19, 0x04	; 4
    111a:	fc 01       	movw	r30, r24
    111c:	31 83       	std	Z+1, r19	; 0x01
    111e:	20 83       	st	Z, r18
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <led_toggle+0xbc>
	case ROTARY_PRESSED:
		return TRANSITION(normal_operating);
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	22 ed       	ldi	r18, 0xD2	; 210
    112a:	34 e0       	ldi	r19, 0x04	; 4
    112c:	fc 01       	movw	r30, r24
    112e:	31 83       	std	Z+1, r19	; 0x01
    1130:	20 83       	st	Z, r18
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	11 c0       	rjmp	.+34     	; 0x1158 <led_toggle+0xbc>
	case EXIT:
		led_redOff();
    1136:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <led_redOff>
		scheduler_remove(&td_toggle_led);
    113a:	8a e5       	ldi	r24, 0x5A	; 90
    113c:	98 e0       	ldi	r25, 0x08	; 8
    113e:	0e 94 09 10 	call	0x2012	; 0x2012 <scheduler_remove>
		scheduler_remove(&td_turnoff_led);
    1142:	85 e6       	ldi	r24, 0x65	; 101
    1144:	98 e0       	ldi	r25, 0x08	; 8
    1146:	0e 94 09 10 	call	0x2012	; 0x2012 <scheduler_remove>
		scheduler_remove(&td_time_increment);
    114a:	80 e7       	ldi	r24, 0x70	; 112
    114c:	98 e0       	ldi	r25, 0x08	; 8
    114e:	0e 94 09 10 	call	0x2012	; 0x2012 <scheduler_remove>
		return RET_HANDLED;
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <led_toggle+0xbc>
	default:
		return RET_IGNORED;
    1156:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <wrapper_red_led>:

static void wrapper_red_led(void* a) {
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	00 d0       	rcall	.+0      	; 0x116c <wrapper_red_led+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	led_redToggle();
    1174:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <led_redToggle>
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <wrapper_turnoff_led>:

static void wrapper_turnoff_led(void* fsm) {
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	00 d0       	rcall	.+0      	; 0x1188 <wrapper_turnoff_led+0x6>
    1188:	1f 92       	push	r1
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9b 83       	std	Y+3, r25	; 0x03
    1190:	8a 83       	std	Y+2, r24	; 0x02

	Event event = { .signal = JOYSTICK_PRESSED }; //choose any button
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	89 83       	std	Y+1, r24	; 0x01
	fsm_dispatch((Fsm*) fsm, &event);
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	9e 01       	movw	r18, r28
    119c:	2f 5f       	subi	r18, 0xFF	; 255
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	b9 01       	movw	r22, r18
    11a2:	0e 94 b1 00 	call	0x162	; 0x162 <fsm_dispatch>
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <time_increment>:

static void time_increment(void* dummy) {
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	27 97       	sbiw	r28, 0x07	; 7
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	9f 83       	std	Y+7, r25	; 0x07
    11d8:	8e 83       	std	Y+6, r24	; 0x06

	led_greenToggle();
    11da:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <led_greenToggle>
	Time_t clock = wrapper_time_format(scheduler_getTime());
    11de:	0e 94 79 10 	call	0x20f2	; 0x20f2 <scheduler_getTime>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 ae 09 	call	0x135c	; 0x135c <wrapper_time_format>
    11ee:	a2 2e       	mov	r10, r18
    11f0:	b3 2e       	mov	r11, r19
    11f2:	c4 2e       	mov	r12, r20
    11f4:	d5 2e       	mov	r13, r21
    11f6:	e6 2e       	mov	r14, r22
    11f8:	f7 2e       	mov	r15, r23
    11fa:	08 2f       	mov	r16, r24
    11fc:	19 2f       	mov	r17, r25
    11fe:	2a 2d       	mov	r18, r10
    1200:	3b 2d       	mov	r19, r11
    1202:	4c 2d       	mov	r20, r12
    1204:	5d 2d       	mov	r21, r13
    1206:	6e 2d       	mov	r22, r14
    1208:	7f 2d       	mov	r23, r15
    120a:	80 2f       	mov	r24, r16
    120c:	91 2f       	mov	r25, r17
    120e:	29 83       	std	Y+1, r18	; 0x01
    1210:	3a 83       	std	Y+2, r19	; 0x02
    1212:	4b 83       	std	Y+3, r20	; 0x03
    1214:	5c 83       	std	Y+4, r21	; 0x04
    1216:	6d 83       	std	Y+5, r22	; 0x05
//	systemTime_t temp = scheduler_getTime();
//	clock = wrapper_time_format(temp);

	lcd_clear();
    1218:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
	lcd_setCursor(0, 0);
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <lcd_setCursor>
	fprintf(lcdout, "%02d:%02d:%02d\n", clock.hour, clock.minute, clock.second);
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	68 2f       	mov	r22, r24
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	48 2f       	mov	r20, r24
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	80 91 02 02 	lds	r24, 0x0202
    123a:	90 91 03 02 	lds	r25, 0x0203
    123e:	e7 2f       	mov	r30, r23
    1240:	ef 93       	push	r30
    1242:	6f 93       	push	r22
    1244:	65 2f       	mov	r22, r21
    1246:	6f 93       	push	r22
    1248:	4f 93       	push	r20
    124a:	43 2f       	mov	r20, r19
    124c:	4f 93       	push	r20
    124e:	2f 93       	push	r18
    1250:	29 e4       	ldi	r18, 0x49	; 73
    1252:	32 e0       	ldi	r19, 0x02	; 2
    1254:	23 2f       	mov	r18, r19
    1256:	2f 93       	push	r18
    1258:	29 e4       	ldi	r18, 0x49	; 73
    125a:	32 e0       	ldi	r19, 0x02	; 2
    125c:	2f 93       	push	r18
    125e:	29 2f       	mov	r18, r25
    1260:	2f 93       	push	r18
    1262:	8f 93       	push	r24
    1264:	0e 94 de 13 	call	0x27bc	; 0x27bc <fprintf>
    1268:	8d b7       	in	r24, 0x3d	; 61
    126a:	9e b7       	in	r25, 0x3e	; 62
    126c:	0a 96       	adiw	r24, 0x0a	; 10
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
//	fprintf(lcdout, "system time: ""%"PRIu32, temp);//debugging
}
    1278:	27 96       	adiw	r28, 0x07	; 7
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	08 95       	ret

0000129a <check_matching>:

static void check_matching(void *fsm) {
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	62 97       	sbiw	r28, 0x12	; 18
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	9e 87       	std	Y+14, r25	; 0x0e
    12b0:	8d 87       	std	Y+13, r24	; 0x0d

	Fsm* theFsm = (Fsm*)fsm;
    12b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
	Time_t alarm = theFsm->timeSet;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	25 e0       	ldi	r18, 0x05	; 5
    12c0:	fc 01       	movw	r30, r24
    12c2:	33 96       	adiw	r30, 0x03	; 3
    12c4:	de 01       	movw	r26, r28
    12c6:	17 96       	adiw	r26, 0x07	; 7
    12c8:	01 90       	ld	r0, Z+
    12ca:	0d 92       	st	X+, r0
    12cc:	2a 95       	dec	r18
    12ce:	e1 f7       	brne	.-8      	; 0x12c8 <check_matching+0x2e>
	Event event = { .signal = MATCHING };
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	8c 87       	std	Y+12, r24	; 0x0c

	systemTime_t alarm_time = alarm.hour * 60 + alarm.minute;
    12d4:	8f 81       	ldd	r24, Y+7	; 0x07
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	4c e3       	ldi	r20, 0x3C	; 60
    12dc:	48 9f       	mul	r20, r24
    12de:	90 01       	movw	r18, r0
    12e0:	49 9f       	mul	r20, r25
    12e2:	30 0d       	add	r19, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	88 85       	ldd	r24, Y+8	; 0x08
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	09 2e       	mov	r0, r25
    12f2:	00 0c       	add	r0, r0
    12f4:	aa 0b       	sbc	r26, r26
    12f6:	bb 0b       	sbc	r27, r27
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	ad 83       	std	Y+5, r26	; 0x05
    12fe:	be 83       	std	Y+6, r27	; 0x06
	if (alarm_time == (scheduler_getTime() / 60000)) {
    1300:	0e 94 79 10 	call	0x20f2	; 0x20f2 <scheduler_getTime>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	20 e6       	ldi	r18, 0x60	; 96
    130a:	3a ee       	ldi	r19, 0xEA	; 234
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    1318:	da 01       	movw	r26, r20
    131a:	c9 01       	movw	r24, r18
    131c:	9c 01       	movw	r18, r24
    131e:	ad 01       	movw	r20, r26
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	ad 81       	ldd	r26, Y+5	; 0x05
    1326:	be 81       	ldd	r27, Y+6	; 0x06
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	4a 07       	cpc	r20, r26
    132e:	5b 07       	cpc	r21, r27
    1330:	61 f4       	brne	.+24     	; 0x134a <check_matching+0xb0>
		fsm_dispatch(theFsm, &event);  //goto led_toggle
    1332:	9e 01       	movw	r18, r28
    1334:	24 5f       	subi	r18, 0xF4	; 244
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	b9 01       	movw	r22, r18
    133e:	0e 94 b1 00 	call	0x162	; 0x162 <fsm_dispatch>
		scheduler_remove(&td_check_matching);
    1342:	8b e7       	ldi	r24, 0x7B	; 123
    1344:	98 e0       	ldi	r25, 0x08	; 8
    1346:	0e 94 09 10 	call	0x2012	; 0x2012 <scheduler_remove>
	}
}
    134a:	62 96       	adiw	r28, 0x12	; 18
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <wrapper_time_format>:
static Time_t wrapper_time_format(systemTime_t time) {
    135c:	2f 92       	push	r2
    135e:	3f 92       	push	r3
    1360:	4f 92       	push	r4
    1362:	5f 92       	push	r5
    1364:	6f 92       	push	r6
    1366:	7f 92       	push	r7
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	ac 97       	sbiw	r28, 0x2c	; 44
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	6d 8b       	std	Y+21, r22	; 0x15
    1392:	7e 8b       	std	Y+22, r23	; 0x16
    1394:	8f 8b       	std	Y+23, r24	; 0x17
    1396:	98 8f       	std	Y+24, r25	; 0x18
	Time_t clock_time;

	uint32_t second = (uint32_t) time / 1000;
    1398:	8d 89       	ldd	r24, Y+21	; 0x15
    139a:	9e 89       	ldd	r25, Y+22	; 0x16
    139c:	af 89       	ldd	r26, Y+23	; 0x17
    139e:	b8 8d       	ldd	r27, Y+24	; 0x18
    13a0:	28 ee       	ldi	r18, 0xE8	; 232
    13a2:	33 e0       	ldi	r19, 0x03	; 3
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    13b0:	da 01       	movw	r26, r20
    13b2:	c9 01       	movw	r24, r18
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	ab 83       	std	Y+3, r26	; 0x03
    13ba:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t milli = (uint16_t) time % 1000;
    13bc:	4d 89       	ldd	r20, Y+21	; 0x15
    13be:	5e 89       	ldd	r21, Y+22	; 0x16
    13c0:	ca 01       	movw	r24, r20
    13c2:	96 95       	lsr	r25
    13c4:	87 95       	ror	r24
    13c6:	96 95       	lsr	r25
    13c8:	87 95       	ror	r24
    13ca:	96 95       	lsr	r25
    13cc:	87 95       	ror	r24
    13ce:	9c 01       	movw	r18, r24
    13d0:	a5 ec       	ldi	r26, 0xC5	; 197
    13d2:	b0 e2       	ldi	r27, 0x20	; 32
    13d4:	0e 94 c4 13 	call	0x2788	; 0x2788 <__umulhisi3>
    13d8:	bc 01       	movw	r22, r24
    13da:	72 95       	swap	r23
    13dc:	62 95       	swap	r22
    13de:	6f 70       	andi	r22, 0x0F	; 15
    13e0:	67 27       	eor	r22, r23
    13e2:	7f 70       	andi	r23, 0x0F	; 15
    13e4:	67 27       	eor	r22, r23
    13e6:	28 ee       	ldi	r18, 0xE8	; 232
    13e8:	33 e0       	ldi	r19, 0x03	; 3
    13ea:	62 9f       	mul	r22, r18
    13ec:	c0 01       	movw	r24, r0
    13ee:	63 9f       	mul	r22, r19
    13f0:	90 0d       	add	r25, r0
    13f2:	72 9f       	mul	r23, r18
    13f4:	90 0d       	add	r25, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	9a 01       	movw	r18, r20
    13fa:	28 1b       	sub	r18, r24
    13fc:	39 0b       	sbc	r19, r25
    13fe:	c9 01       	movw	r24, r18
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t minute = (uint32_t) second / 60;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	ab 81       	ldd	r26, Y+3	; 0x03
    140a:	bc 81       	ldd	r27, Y+4	; 0x04
    140c:	2c e3       	ldi	r18, 0x3C	; 60
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    141c:	da 01       	movw	r26, r20
    141e:	c9 01       	movw	r24, r18
    1420:	8f 83       	std	Y+7, r24	; 0x07
    1422:	98 87       	std	Y+8, r25	; 0x08
    1424:	a9 87       	std	Y+9, r26	; 0x09
    1426:	ba 87       	std	Y+10, r27	; 0x0a

	clock_time.milli = milli;
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	9c 8b       	std	Y+20, r25	; 0x14
    142e:	8b 8b       	std	Y+19, r24	; 0x13
	clock_time.second = (uint8_t) (second % 60); //parenthese are important.
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	ab 81       	ldd	r26, Y+3	; 0x03
    1436:	bc 81       	ldd	r27, Y+4	; 0x04
    1438:	2c e3       	ldi	r18, 0x3C	; 60
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8a 8b       	std	Y+18, r24	; 0x12
	clock_time.minute = (uint8_t) (minute % 60);
    144e:	8f 81       	ldd	r24, Y+7	; 0x07
    1450:	98 85       	ldd	r25, Y+8	; 0x08
    1452:	a9 85       	ldd	r26, Y+9	; 0x09
    1454:	ba 85       	ldd	r27, Y+10	; 0x0a
    1456:	2c e3       	ldi	r18, 0x3C	; 60
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	89 8b       	std	Y+17, r24	; 0x11
	clock_time.hour = (uint8_t) (minute / 60);
    146c:	8f 81       	ldd	r24, Y+7	; 0x07
    146e:	98 85       	ldd	r25, Y+8	; 0x08
    1470:	a9 85       	ldd	r26, Y+9	; 0x09
    1472:	ba 85       	ldd	r27, Y+10	; 0x0a
    1474:	2c e3       	ldi	r18, 0x3C	; 60
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    1484:	da 01       	movw	r26, r20
    1486:	c9 01       	movw	r24, r18
    1488:	88 8b       	std	Y+16, r24	; 0x10
//	lcd_clear();
//	lcd_setCursor(0, 0);
//	fprintf(lcdout, "In wrapper,%u:%u:%u\n", clock_time.hour, clock_time.minute,
//			clock_time.second);

	return clock_time;
    148a:	85 e0       	ldi	r24, 0x05	; 5
    148c:	fe 01       	movw	r30, r28
    148e:	70 96       	adiw	r30, 0x10	; 16
    1490:	de 01       	movw	r26, r28
    1492:	1b 96       	adiw	r26, 0x0b	; 11
    1494:	01 90       	ld	r0, Z+
    1496:	0d 92       	st	X+, r0
    1498:	8a 95       	dec	r24
    149a:	e1 f7       	brne	.-8      	; 0x1494 <wrapper_time_format+0x138>
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	4b 85       	ldd	r20, Y+11	; 0x0b
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b0:	24 2e       	mov	r2, r20
    14b2:	33 2e       	mov	r3, r19
    14b4:	42 2e       	mov	r4, r18
    14b6:	59 2e       	mov	r5, r25
    14b8:	68 2e       	mov	r6, r24
    14ba:	a2 2c       	mov	r10, r2
    14bc:	b3 2c       	mov	r11, r3
    14be:	c4 2c       	mov	r12, r4
    14c0:	d5 2c       	mov	r13, r5
    14c2:	e6 2c       	mov	r14, r6
    14c4:	f7 2c       	mov	r15, r7
    14c6:	08 2d       	mov	r16, r8
    14c8:	19 2d       	mov	r17, r9
}
    14ca:	2a 2d       	mov	r18, r10
    14cc:	3b 2d       	mov	r19, r11
    14ce:	4c 2d       	mov	r20, r12
    14d0:	5d 2d       	mov	r21, r13
    14d2:	6e 2d       	mov	r22, r14
    14d4:	7f 2d       	mov	r23, r15
    14d6:	80 2f       	mov	r24, r16
    14d8:	91 2f       	mov	r25, r17
    14da:	ac 96       	adiw	r28, 0x2c	; 44
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	3f 90       	pop	r3
    1508:	2f 90       	pop	r2
    150a:	08 95       	ret

0000150c <wrapper_check_rotary>:

static void wrapper_check_rotary(void* param) {
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <wrapper_check_rotary+0x6>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
	check_rotary();
    151a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <check_rotary>
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <fsm_dispatch>:
 * the exit action and the next state will execute the entry action.
 *
 * @param fsm 	points to the Fsm struct which contains the updated states.
 * @param event decides which action the state is going to execute.
 * */
inline static void fsm_dispatch(Fsm* fsm, const Event* event) {
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	27 97       	sbiw	r28, 0x07	; 7
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	9d 83       	std	Y+5, r25	; 0x05
    153e:	8c 83       	std	Y+4, r24	; 0x04
    1540:	7f 83       	std	Y+7, r23	; 0x07
    1542:	6e 83       	std	Y+6, r22	; 0x06
	static Event entryEvent = { .signal = ENTRY };
	static Event exitEvent = { .signal = EXIT };
	State s = fsm->state;
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	fc 01       	movw	r30, r24
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
	fsmReturnStatus r = fsm->state(fsm, event);
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	fc 01       	movw	r30, r24
    1558:	20 81       	ld	r18, Z
    155a:	31 81       	ldd	r19, Z+1	; 0x01
    155c:	4e 81       	ldd	r20, Y+6	; 0x06
    155e:	5f 81       	ldd	r21, Y+7	; 0x07
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	ba 01       	movw	r22, r20
    1566:	f9 01       	movw	r30, r18
    1568:	09 95       	icall
    156a:	8b 83       	std	Y+3, r24	; 0x03
	if (r == RET_TRANSITION) {
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	99 f4       	brne	.+38     	; 0x1598 <fsm_dispatch+0x70>
		s(fsm, &exitEvent); //< call exit action of last state
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	29 81       	ldd	r18, Y+1	; 0x01
    1578:	3a 81       	ldd	r19, Y+2	; 0x02
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	72 e0       	ldi	r23, 0x02	; 2
    157e:	f9 01       	movw	r30, r18
    1580:	09 95       	icall
		fsm->state(fsm, &entryEvent); //< call entry action of new state
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	fc 01       	movw	r30, r24
    1588:	20 81       	ld	r18, Z
    158a:	31 81       	ldd	r19, Z+1	; 0x01
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	66 ea       	ldi	r22, 0xA6	; 166
    1592:	78 e0       	ldi	r23, 0x08	; 8
    1594:	f9 01       	movw	r30, r18
    1596:	09 95       	icall
	}
}
    1598:	27 96       	adiw	r28, 0x07	; 7
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <main>:
void wrapper_ccw();

/*****Global Variable******/
static Fsm fsm;

int main() {
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
//	uart_init(57600); //debugging

	fsm_init(&fsm, alarm_init);
    15b2:	62 ef       	ldi	r22, 0xF2	; 242
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	83 e9       	ldi	r24, 0x93	; 147
    15b8:	98 e0       	ldi	r25, 0x08	; 8
    15ba:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <fsm_init>
	sei();
    15be:	78 94       	sei
	scheduler_run();
    15c0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <scheduler_run>
	return 0;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <fsm_init>:

inline static void fsm_init(Fsm* fsm, State init) {
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <fsm_init+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <fsm_init+0x8>
    15d6:	1f 92       	push	r1
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9b 83       	std	Y+3, r25	; 0x03
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	7d 83       	std	Y+5, r23	; 0x05
    15e2:	6c 83       	std	Y+4, r22	; 0x04
	scheduler_init();
    15e4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <scheduler_init>
	button_init(true);
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 c4 0b 	call	0x1788	; 0x1788 <button_init>
	led_redInit();
    15ee:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <led_redInit>
	led_yellowInit();
    15f2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <led_yellowInit>
	led_greenInit();
    15f6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <led_greenInit>
	lcd_init();
    15fa:	0e 94 30 13 	call	0x2660	; 0x2660 <lcd_init>
	rotary_init();
    15fe:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <rotary_init>

	rotary_setClockwiseCallback(wrapper_cw);
    1602:	80 ea       	ldi	r24, 0xA0	; 160
    1604:	9b e0       	ldi	r25, 0x0B	; 11
    1606:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rotary_setClockwiseCallback>
	rotary_setCounterClockwiseCallback(wrapper_ccw);
    160a:	82 eb       	ldi	r24, 0xB2	; 178
    160c:	9b e0       	ldi	r25, 0x0B	; 11
    160e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <rotary_setCounterClockwiseCallback>

	button_setJoystickButtonCallback(schedule_joystick);
    1612:	8e e2       	ldi	r24, 0x2E	; 46
    1614:	9b e0       	ldi	r25, 0x0B	; 11
    1616:	0e 94 9d 0c 	call	0x193a	; 0x193a <button_setJoystickButtonCallback>
	button_setRotaryButtonCallback(schedule_rotary);
    161a:	87 e6       	ldi	r24, 0x67	; 103
    161c:	9b e0       	ldi	r25, 0x0B	; 11
    161e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <button_setRotaryButtonCallback>

	Event entryEvent = { .signal = ENTRY };
    1622:	19 82       	std	Y+1, r1	; 0x01
	fsm->state = init;
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	2c 81       	ldd	r18, Y+4	; 0x04
    162a:	3d 81       	ldd	r19, Y+5	; 0x05
    162c:	fc 01       	movw	r30, r24
    162e:	31 83       	std	Z+1, r19	; 0x01
    1630:	20 83       	st	Z, r18
	fsm->state(fsm, &entryEvent);
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	fc 01       	movw	r30, r24
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	9b 81       	ldd	r25, Y+3	; 0x03
    1640:	ae 01       	movw	r20, r28
    1642:	4f 5f       	subi	r20, 0xFF	; 255
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	ba 01       	movw	r22, r20
    1648:	f9 01       	movw	r30, r18
    164a:	09 95       	icall
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	08 95       	ret

0000165c <schedule_joystick>:

void schedule_joystick() {
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	static taskDescriptor td2;
	td2.task = &task_joystick;
    1664:	80 e5       	ldi	r24, 0x50	; 80
    1666:	9b e0       	ldi	r25, 0x0B	; 11
    1668:	90 93 9c 08 	sts	0x089C, r25
    166c:	80 93 9b 08 	sts	0x089B, r24
//	td2.param = ;
	td2.expire = 0;  //immediately execute the task
    1670:	10 92 a0 08 	sts	0x08A0, r1
    1674:	10 92 9f 08 	sts	0x089F, r1
	td2.period = 0;
    1678:	10 92 a2 08 	sts	0x08A2, r1
    167c:	10 92 a1 08 	sts	0x08A1, r1
	td2.execute = 0;
    1680:	80 91 a3 08 	lds	r24, 0x08A3
    1684:	8e 7f       	andi	r24, 0xFE	; 254
    1686:	80 93 a3 08 	sts	0x08A3, r24
	td2.next = NULL;
    168a:	10 92 a5 08 	sts	0x08A5, r1
    168e:	10 92 a4 08 	sts	0x08A4, r1
	scheduler_add(&td2);
    1692:	8b e9       	ldi	r24, 0x9B	; 155
    1694:	98 e0       	ldi	r25, 0x08	; 8
    1696:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <task_joystick>:

void task_joystick(void * param) {
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <task_joystick+0x6>
    16a6:	1f 92       	push	r1
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	9b 83       	std	Y+3, r25	; 0x03
    16ae:	8a 83       	std	Y+2, r24	; 0x02
	Event event = { .signal = JOYSTICK_PRESSED };
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	89 83       	std	Y+1, r24	; 0x01
	fsm_dispatch(&fsm, &event);
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	bc 01       	movw	r22, r24
    16ba:	83 e9       	ldi	r24, 0x93	; 147
    16bc:	98 e0       	ldi	r25, 0x08	; 8
    16be:	0e 94 94 0a 	call	0x1528	; 0x1528 <fsm_dispatch>
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <schedule_rotary>:

void schedule_rotary() {
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62

	static taskDescriptor td; //lifetime of local variable
	td.task = &task_rotary;
    16d6:	89 e8       	ldi	r24, 0x89	; 137
    16d8:	9b e0       	ldi	r25, 0x0B	; 11
    16da:	90 93 a8 08 	sts	0x08A8, r25
    16de:	80 93 a7 08 	sts	0x08A7, r24
	td.expire = 0;  //immediately execute the task
    16e2:	10 92 ac 08 	sts	0x08AC, r1
    16e6:	10 92 ab 08 	sts	0x08AB, r1
	td.period = 0;
    16ea:	10 92 ae 08 	sts	0x08AE, r1
    16ee:	10 92 ad 08 	sts	0x08AD, r1
	td.execute = 0;
    16f2:	80 91 af 08 	lds	r24, 0x08AF
    16f6:	8e 7f       	andi	r24, 0xFE	; 254
    16f8:	80 93 af 08 	sts	0x08AF, r24
	td.next = NULL;
    16fc:	10 92 b1 08 	sts	0x08B1, r1
    1700:	10 92 b0 08 	sts	0x08B0, r1
	scheduler_add(&td);
    1704:	87 ea       	ldi	r24, 0xA7	; 167
    1706:	98 e0       	ldi	r25, 0x08	; 8
    1708:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <scheduler_add>
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <task_rotary>:

void task_rotary(void * param) {
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	00 d0       	rcall	.+0      	; 0x1718 <task_rotary+0x6>
    1718:	1f 92       	push	r1
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9b 83       	std	Y+3, r25	; 0x03
    1720:	8a 83       	std	Y+2, r24	; 0x02
	Event event = { .signal = ROTARY_PRESSED };
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	89 83       	std	Y+1, r24	; 0x01
	fsm_dispatch(&fsm, &event);
    1726:	ce 01       	movw	r24, r28
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	bc 01       	movw	r22, r24
    172c:	83 e9       	ldi	r24, 0x93	; 147
    172e:	98 e0       	ldi	r25, 0x08	; 8
    1730:	0e 94 94 0a 	call	0x1528	; 0x1528 <fsm_dispatch>
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <wrapper_cw>:



void wrapper_cw() {
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	1f 92       	push	r1
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	Event event = { .signal = ROTARY_INC };
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	89 83       	std	Y+1, r24	; 0x01
	fsm_dispatch(&fsm, &event);
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	bc 01       	movw	r22, r24
    1754:	83 e9       	ldi	r24, 0x93	; 147
    1756:	98 e0       	ldi	r25, 0x08	; 8
    1758:	0e 94 94 0a 	call	0x1528	; 0x1528 <fsm_dispatch>
}
    175c:	0f 90       	pop	r0
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <wrapper_ccw>:

void wrapper_ccw() {
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	1f 92       	push	r1
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	Event event = { .signal = ROTARY_DEC };
    176e:	86 e0       	ldi	r24, 0x06	; 6
    1770:	89 83       	std	Y+1, r24	; 0x01
	fsm_dispatch(&fsm, &event);
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	bc 01       	movw	r22, r24
    1778:	83 e9       	ldi	r24, 0x93	; 147
    177a:	98 e0       	ldi	r25, 0x08	; 8
    177c:	0e 94 94 0a 	call	0x1528	; 0x1528 <fsm_dispatch>
}
    1780:	0f 90       	pop	r0
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <button_init>:
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	1f 92       	push	r1
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	84 e2       	ldi	r24, 0x24	; 36
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	24 e2       	ldi	r18, 0x24	; 36
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	f9 01       	movw	r30, r18
    179e:	20 81       	ld	r18, Z
    17a0:	2f 7b       	andi	r18, 0xBF	; 191
    17a2:	fc 01       	movw	r30, r24
    17a4:	20 83       	st	Z, r18
    17a6:	84 e2       	ldi	r24, 0x24	; 36
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	24 e2       	ldi	r18, 0x24	; 36
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	f9 01       	movw	r30, r18
    17b0:	20 81       	ld	r18, Z
    17b2:	2f 77       	andi	r18, 0x7F	; 127
    17b4:	fc 01       	movw	r30, r24
    17b6:	20 83       	st	Z, r18
    17b8:	85 e2       	ldi	r24, 0x25	; 37
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	25 e2       	ldi	r18, 0x25	; 37
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	20 64       	ori	r18, 0x40	; 64
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
    17ca:	85 e2       	ldi	r24, 0x25	; 37
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	25 e2       	ldi	r18, 0x25	; 37
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f9 01       	movw	r30, r18
    17d4:	20 81       	ld	r18, Z
    17d6:	20 68       	ori	r18, 0x80	; 128
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	88 23       	and	r24, r24
    17e0:	39 f0       	breq	.+14     	; 0x17f0 <button_init+0x68>
    17e2:	0e 94 65 11 	call	0x22ca	; 0x22ca <timer1_start>
    17e6:	8f ea       	ldi	r24, 0xAF	; 175
    17e8:	9c e0       	ldi	r25, 0x0C	; 12
    17ea:	0e 94 53 11 	call	0x22a6	; 0x22a6 <timer1_setCallback>
    17ee:	1b c0       	rjmp	.+54     	; 0x1826 <button_init+0x9e>
    17f0:	88 e6       	ldi	r24, 0x68	; 104
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	28 e6       	ldi	r18, 0x68	; 104
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	f9 01       	movw	r30, r18
    17fa:	20 81       	ld	r18, Z
    17fc:	21 60       	ori	r18, 0x01	; 1
    17fe:	fc 01       	movw	r30, r24
    1800:	20 83       	st	Z, r18
    1802:	8b e6       	ldi	r24, 0x6B	; 107
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	2b e6       	ldi	r18, 0x6B	; 107
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	f9 01       	movw	r30, r18
    180c:	20 81       	ld	r18, Z
    180e:	20 64       	ori	r18, 0x40	; 64
    1810:	fc 01       	movw	r30, r24
    1812:	20 83       	st	Z, r18
    1814:	8b e6       	ldi	r24, 0x6B	; 107
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	2b e6       	ldi	r18, 0x6B	; 107
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	f9 01       	movw	r30, r18
    181e:	20 81       	ld	r18, Z
    1820:	20 68       	ori	r18, 0x80	; 128
    1822:	fc 01       	movw	r30, r24
    1824:	20 83       	st	Z, r18
    1826:	0f 90       	pop	r0
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <button_isJoystickPressed>:
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	83 e2       	ldi	r24, 0x23	; 35
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	88 23       	and	r24, r24
    1840:	14 f4       	brge	.+4      	; 0x1846 <button_isJoystickPressed+0x18>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <button_isJoystickPressed+0x1a>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <button_isRotaryPressed>:
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	83 e2       	ldi	r24, 0x23	; 35
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	fc 01       	movw	r30, r24
    185c:	80 81       	ld	r24, Z
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	80 74       	andi	r24, 0x40	; 64
    1864:	99 27       	eor	r25, r25
    1866:	89 2b       	or	r24, r25
    1868:	11 f0       	breq	.+4      	; 0x186e <button_isRotaryPressed+0x20>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <button_isRotaryPressed+0x22>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <__vector_9>:
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	00 90 5f 00 	lds	r0, 0x005F
    187e:	0f 92       	push	r0
    1880:	11 24       	eor	r1, r1
    1882:	00 90 5b 00 	lds	r0, 0x005B
    1886:	0f 92       	push	r0
    1888:	2f 93       	push	r18
    188a:	3f 93       	push	r19
    188c:	4f 93       	push	r20
    188e:	5f 93       	push	r21
    1890:	6f 93       	push	r22
    1892:	7f 93       	push	r23
    1894:	8f 93       	push	r24
    1896:	9f 93       	push	r25
    1898:	af 93       	push	r26
    189a:	bf 93       	push	r27
    189c:	ef 93       	push	r30
    189e:	ff 93       	push	r31
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	0e 94 27 0c 	call	0x184e	; 0x184e <button_isRotaryPressed>
    18ac:	88 23       	and	r24, r24
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <__vector_9+0x52>
    18b0:	80 91 b2 08 	lds	r24, 0x08B2
    18b4:	90 91 b3 08 	lds	r25, 0x08B3
    18b8:	89 2b       	or	r24, r25
    18ba:	31 f0       	breq	.+12     	; 0x18c8 <__vector_9+0x52>
    18bc:	80 91 b2 08 	lds	r24, 0x08B2
    18c0:	90 91 b3 08 	lds	r25, 0x08B3
    18c4:	fc 01       	movw	r30, r24
    18c6:	09 95       	icall
    18c8:	0e 94 17 0c 	call	0x182e	; 0x182e <button_isJoystickPressed>
    18cc:	88 23       	and	r24, r24
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <__vector_9+0x72>
    18d0:	80 91 b4 08 	lds	r24, 0x08B4
    18d4:	90 91 b5 08 	lds	r25, 0x08B5
    18d8:	89 2b       	or	r24, r25
    18da:	31 f0       	breq	.+12     	; 0x18e8 <__vector_9+0x72>
    18dc:	80 91 b4 08 	lds	r24, 0x08B4
    18e0:	90 91 b5 08 	lds	r25, 0x08B5
    18e4:	fc 01       	movw	r30, r24
    18e6:	09 95       	icall
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	00 92 5b 00 	sts	0x005B, r0
    190a:	0f 90       	pop	r0
    190c:	00 92 5f 00 	sts	0x005F, r0
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <button_setRotaryButtonCallback>:
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	00 d0       	rcall	.+0      	; 0x191c <button_setRotaryButtonCallback+0x6>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	90 93 b3 08 	sts	0x08B3, r25
    192c:	80 93 b2 08 	sts	0x08B2, r24
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <button_setJoystickButtonCallback>:
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	00 d0       	rcall	.+0      	; 0x1940 <button_setJoystickButtonCallback+0x6>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	90 93 b5 08 	sts	0x08B5, r25
    1950:	80 93 b4 08 	sts	0x08B4, r24
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <button_checkState>:
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	00 d0       	rcall	.+0      	; 0x1964 <button_checkState+0x6>
    1964:	1f 92       	push	r1
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	80 91 b6 08 	lds	r24, 0x08B6
    196e:	8b 83       	std	Y+3, r24	; 0x03
    1970:	80 91 b7 08 	lds	r24, 0x08B7
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	88 54       	subi	r24, 0x48	; 72
    197a:	97 4f       	sbci	r25, 0xF7	; 247
    197c:	fc 01       	movw	r30, r24
    197e:	10 82       	st	Z, r1
    1980:	0e 94 17 0c 	call	0x182e	; 0x182e <button_isJoystickPressed>
    1984:	88 23       	and	r24, r24
    1986:	89 f0       	breq	.+34     	; 0x19aa <button_checkState+0x4c>
    1988:	80 91 b7 08 	lds	r24, 0x08B7
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	20 91 b7 08 	lds	r18, 0x08B7
    1994:	22 2f       	mov	r18, r18
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	28 54       	subi	r18, 0x48	; 72
    199a:	37 4f       	sbci	r19, 0xF7	; 247
    199c:	f9 01       	movw	r30, r18
    199e:	20 81       	ld	r18, Z
    19a0:	21 60       	ori	r18, 0x01	; 1
    19a2:	88 54       	subi	r24, 0x48	; 72
    19a4:	97 4f       	sbci	r25, 0xF7	; 247
    19a6:	fc 01       	movw	r30, r24
    19a8:	20 83       	st	Z, r18
    19aa:	0e 94 27 0c 	call	0x184e	; 0x184e <button_isRotaryPressed>
    19ae:	88 23       	and	r24, r24
    19b0:	89 f0       	breq	.+34     	; 0x19d4 <button_checkState+0x76>
    19b2:	80 91 b7 08 	lds	r24, 0x08B7
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	20 91 b7 08 	lds	r18, 0x08B7
    19be:	22 2f       	mov	r18, r18
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	28 54       	subi	r18, 0x48	; 72
    19c4:	37 4f       	sbci	r19, 0xF7	; 247
    19c6:	f9 01       	movw	r30, r18
    19c8:	20 81       	ld	r18, Z
    19ca:	22 60       	ori	r18, 0x02	; 2
    19cc:	88 54       	subi	r24, 0x48	; 72
    19ce:	97 4f       	sbci	r25, 0xF7	; 247
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
    19d4:	80 91 b7 08 	lds	r24, 0x08B7
    19d8:	8f 5f       	subi	r24, 0xFF	; 255
    19da:	80 93 b7 08 	sts	0x08B7, r24
    19de:	80 91 b7 08 	lds	r24, 0x08B7
    19e2:	85 30       	cpi	r24, 0x05	; 5
    19e4:	11 f4       	brne	.+4      	; 0x19ea <button_checkState+0x8c>
    19e6:	10 92 b7 08 	sts	0x08B7, r1
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	1a 82       	std	Y+2, r1	; 0x02
    19f0:	0d c0       	rjmp	.+26     	; 0x1a0c <button_checkState+0xae>
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	88 54       	subi	r24, 0x48	; 72
    19fa:	97 4f       	sbci	r25, 0xF7	; 247
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	99 81       	ldd	r25, Y+1	; 0x01
    1a02:	89 23       	and	r24, r25
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	85 30       	cpi	r24, 0x05	; 5
    1a10:	80 f3       	brcs	.-32     	; 0x19f2 <button_checkState+0x94>
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	80 93 b6 08 	sts	0x08B6, r24
    1a18:	80 91 b6 08 	lds	r24, 0x08B6
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	99 27       	eor	r25, r25
    1a24:	89 2b       	or	r24, r25
    1a26:	99 f0       	breq	.+38     	; 0x1a4e <button_checkState+0xf0>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	81 70       	andi	r24, 0x01	; 1
    1a30:	99 27       	eor	r25, r25
    1a32:	89 2b       	or	r24, r25
    1a34:	61 f4       	brne	.+24     	; 0x1a4e <button_checkState+0xf0>
    1a36:	80 91 b4 08 	lds	r24, 0x08B4
    1a3a:	90 91 b5 08 	lds	r25, 0x08B5
    1a3e:	89 2b       	or	r24, r25
    1a40:	31 f0       	breq	.+12     	; 0x1a4e <button_checkState+0xf0>
    1a42:	80 91 b4 08 	lds	r24, 0x08B4
    1a46:	90 91 b5 08 	lds	r25, 0x08B5
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	09 95       	icall
    1a4e:	80 91 b6 08 	lds	r24, 0x08B6
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	82 70       	andi	r24, 0x02	; 2
    1a58:	99 27       	eor	r25, r25
    1a5a:	89 2b       	or	r24, r25
    1a5c:	99 f0       	breq	.+38     	; 0x1a84 <button_checkState+0x126>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	82 70       	andi	r24, 0x02	; 2
    1a66:	99 27       	eor	r25, r25
    1a68:	89 2b       	or	r24, r25
    1a6a:	61 f4       	brne	.+24     	; 0x1a84 <button_checkState+0x126>
    1a6c:	80 91 b2 08 	lds	r24, 0x08B2
    1a70:	90 91 b3 08 	lds	r25, 0x08B3
    1a74:	89 2b       	or	r24, r25
    1a76:	31 f0       	breq	.+12     	; 0x1a84 <button_checkState+0x126>
    1a78:	80 91 b2 08 	lds	r24, 0x08B2
    1a7c:	90 91 b3 08 	lds	r25, 0x08B3
    1a80:	fc 01       	movw	r30, r24
    1a82:	09 95       	icall
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <led_redInit>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	83 e3       	ldi	r24, 0x33	; 51
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	23 e3       	ldi	r18, 0x33	; 51
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	f9 01       	movw	r30, r18
    1aa2:	20 81       	ld	r18, Z
    1aa4:	22 60       	ori	r18, 0x02	; 2
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	20 83       	st	Z, r18
    1aaa:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <led_redOff>
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	08 95       	ret

00001ab4 <led_redToggle>:
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	84 e3       	ldi	r24, 0x34	; 52
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	24 e3       	ldi	r18, 0x34	; 52
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	f9 01       	movw	r30, r18
    1ac6:	30 81       	ld	r19, Z
    1ac8:	22 e0       	ldi	r18, 0x02	; 2
    1aca:	23 27       	eor	r18, r19
    1acc:	fc 01       	movw	r30, r24
    1ace:	20 83       	st	Z, r18
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <led_redOn>:
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	84 e3       	ldi	r24, 0x34	; 52
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	24 e3       	ldi	r18, 0x34	; 52
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	f9 01       	movw	r30, r18
    1ae8:	20 81       	ld	r18, Z
    1aea:	2d 7f       	andi	r18, 0xFD	; 253
    1aec:	fc 01       	movw	r30, r24
    1aee:	20 83       	st	Z, r18
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <led_redOff>:
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	84 e3       	ldi	r24, 0x34	; 52
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	24 e3       	ldi	r18, 0x34	; 52
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	f9 01       	movw	r30, r18
    1b08:	20 81       	ld	r18, Z
    1b0a:	22 60       	ori	r18, 0x02	; 2
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <led_yellowInit>:
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	80 e3       	ldi	r24, 0x30	; 48
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	20 e3       	ldi	r18, 0x30	; 48
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	f9 01       	movw	r30, r18
    1b28:	20 81       	ld	r18, Z
    1b2a:	20 68       	ori	r18, 0x80	; 128
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	20 83       	st	Z, r18
    1b30:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <led_yellowOff>
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	08 95       	ret

00001b3a <led_yellowToggle>:
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	81 e3       	ldi	r24, 0x31	; 49
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	21 e3       	ldi	r18, 0x31	; 49
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	30 81       	ld	r19, Z
    1b4e:	20 e8       	ldi	r18, 0x80	; 128
    1b50:	23 27       	eor	r18, r19
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 83       	st	Z, r18
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <led_yellowOn>:
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	81 e3       	ldi	r24, 0x31	; 49
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	21 e3       	ldi	r18, 0x31	; 49
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	20 81       	ld	r18, Z
    1b70:	2f 77       	andi	r18, 0x7F	; 127
    1b72:	fc 01       	movw	r30, r24
    1b74:	20 83       	st	Z, r18
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <led_yellowOff>:
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	81 e3       	ldi	r24, 0x31	; 49
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	21 e3       	ldi	r18, 0x31	; 49
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	20 81       	ld	r18, Z
    1b90:	20 68       	ori	r18, 0x80	; 128
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	08 95       	ret

00001b9c <led_greenInit>:
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	80 e3       	ldi	r24, 0x30	; 48
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	20 e3       	ldi	r18, 0x30	; 48
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	f9 01       	movw	r30, r18
    1bae:	20 81       	ld	r18, Z
    1bb0:	20 64       	ori	r18, 0x40	; 64
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	20 83       	st	Z, r18
    1bb6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <led_greenOff>
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	08 95       	ret

00001bc0 <led_greenToggle>:
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	81 e3       	ldi	r24, 0x31	; 49
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	21 e3       	ldi	r18, 0x31	; 49
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	30 81       	ld	r19, Z
    1bd4:	20 e4       	ldi	r18, 0x40	; 64
    1bd6:	23 27       	eor	r18, r19
    1bd8:	fc 01       	movw	r30, r24
    1bda:	20 83       	st	Z, r18
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <led_greenOn>:
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	81 e3       	ldi	r24, 0x31	; 49
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	21 e3       	ldi	r18, 0x31	; 49
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	f9 01       	movw	r30, r18
    1bf4:	20 81       	ld	r18, Z
    1bf6:	2f 7b       	andi	r18, 0xBF	; 191
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	20 83       	st	Z, r18
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <led_greenOff>:
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	81 e3       	ldi	r24, 0x31	; 49
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	21 e3       	ldi	r18, 0x31	; 49
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	f9 01       	movw	r30, r18
    1c14:	20 81       	ld	r18, Z
    1c16:	20 64       	ori	r18, 0x40	; 64
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <rotary_init>:
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	84 e2       	ldi	r24, 0x24	; 36
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	24 e2       	ldi	r18, 0x24	; 36
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	2f 7d       	andi	r18, 0xDF	; 223
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
    1c3c:	83 e3       	ldi	r24, 0x33	; 51
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	23 e3       	ldi	r18, 0x33	; 51
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	f9 01       	movw	r30, r18
    1c46:	20 81       	ld	r18, Z
    1c48:	2b 7f       	andi	r18, 0xFB	; 251
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 83       	st	Z, r18
    1c4e:	85 e2       	ldi	r24, 0x25	; 37
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	25 e2       	ldi	r18, 0x25	; 37
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	20 81       	ld	r18, Z
    1c5a:	20 62       	ori	r18, 0x20	; 32
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18
    1c60:	84 e3       	ldi	r24, 0x34	; 52
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	24 e3       	ldi	r18, 0x34	; 52
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	f9 01       	movw	r30, r18
    1c6a:	20 81       	ld	r18, Z
    1c6c:	24 60       	ori	r18, 0x04	; 4
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <rotary_setClockwiseCallback>:
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <rotary_setClockwiseCallback+0x6>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	90 93 be 08 	sts	0x08BE, r25
    1c8e:	80 93 bd 08 	sts	0x08BD, r24
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <rotary_setCounterClockwiseCallback>:
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <rotary_setCounterClockwiseCallback+0x6>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	90 93 c0 08 	sts	0x08C0, r25
    1cb2:	80 93 bf 08 	sts	0x08BF, r24
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <check_rotary>:
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <check_rotary+0x6>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	83 e2       	ldi	r24, 0x23	; 35
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	fc 01       	movw	r30, r24
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	80 72       	andi	r24, 0x20	; 32
    1cd8:	99 27       	eor	r25, r25
    1cda:	21 e0       	ldi	r18, 0x01	; 1
    1cdc:	89 2b       	or	r24, r25
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <check_rotary+0x22>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	29 83       	std	Y+1, r18	; 0x01
    1ce4:	82 e3       	ldi	r24, 0x32	; 50
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	fc 01       	movw	r30, r24
    1cea:	80 81       	ld	r24, Z
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	84 70       	andi	r24, 0x04	; 4
    1cf2:	99 27       	eor	r25, r25
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	89 2b       	or	r24, r25
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <check_rotary+0x3c>
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	2a 83       	std	Y+2, r18	; 0x02
    1cfe:	99 81       	ldd	r25, Y+1	; 0x01
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 27       	eor	r24, r25
    1d04:	88 23       	and	r24, r24
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <check_rotary+0x70>
    1d08:	80 91 c1 08 	lds	r24, 0x08C1
    1d0c:	88 23       	and	r24, r24
    1d0e:	81 f0       	breq	.+32     	; 0x1d30 <check_rotary+0x70>
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	88 23       	and	r24, r24
    1d14:	39 f0       	breq	.+14     	; 0x1d24 <check_rotary+0x64>
    1d16:	80 91 bd 08 	lds	r24, 0x08BD
    1d1a:	90 91 be 08 	lds	r25, 0x08BE
    1d1e:	fc 01       	movw	r30, r24
    1d20:	09 95       	icall
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <check_rotary+0x70>
    1d24:	80 91 bf 08 	lds	r24, 0x08BF
    1d28:	90 91 c0 08 	lds	r25, 0x08C0
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	09 95       	icall
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	80 93 c1 08 	sts	0x08C1, r24
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <__iSeiRetVal>:
#include <avr/interrupt.h>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    sei();
    1d48:	78 94       	sei
    return 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
}
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <__iCliRetVal>:

static __inline__ uint8_t __iCliRetVal(void)
{
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    cli();
    1d5a:	f8 94       	cli
    return 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <__iRestore+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    1d72:	8f e5       	ldi	r24, 0x5F	; 95
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	29 81       	ldd	r18, Y+1	; 0x01
    1d78:	3a 81       	ldd	r19, Y+2	; 0x02
    1d7a:	f9 01       	movw	r30, r18
    1d7c:	20 81       	ld	r18, Z
    1d7e:	fc 01       	movw	r30, r24
    1d80:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <scheduler_update>:
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <scheduler_update+0x6>
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	80 91 c4 08 	lds	r24, 0x08C4
    1d9a:	90 91 c5 08 	lds	r25, 0x08C5
    1d9e:	a0 91 c6 08 	lds	r26, 0x08C6
    1da2:	b0 91 c7 08 	lds	r27, 0x08C7
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	a1 1d       	adc	r26, r1
    1daa:	b1 1d       	adc	r27, r1
    1dac:	80 93 c4 08 	sts	0x08C4, r24
    1db0:	90 93 c5 08 	sts	0x08C5, r25
    1db4:	a0 93 c6 08 	sts	0x08C6, r26
    1db8:	b0 93 c7 08 	sts	0x08C7, r27
    1dbc:	80 91 c2 08 	lds	r24, 0x08C2
    1dc0:	90 91 c3 08 	lds	r25, 0x08C3
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	2d c0       	rjmp	.+90     	; 0x1e24 <scheduler_update+0x98>
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	fc 01       	movw	r30, r24
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	95 81       	ldd	r25, Z+5	; 0x05
    1dd4:	89 2b       	or	r24, r25
    1dd6:	91 f4       	brne	.+36     	; 0x1dfc <scheduler_update+0x70>
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 85       	ldd	r18, Z+8	; 0x08
    1de0:	21 60       	ori	r18, 0x01	; 1
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 87       	std	Z+8, r18	; 0x08
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	fc 01       	movw	r30, r24
    1dec:	26 81       	ldd	r18, Z+6	; 0x06
    1dee:	37 81       	ldd	r19, Z+7	; 0x07
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	fc 01       	movw	r30, r24
    1df6:	35 83       	std	Z+5, r19	; 0x05
    1df8:	24 83       	std	Z+4, r18	; 0x04
    1dfa:	0d c0       	rjmp	.+26     	; 0x1e16 <scheduler_update+0x8a>
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	fc 01       	movw	r30, r24
    1e02:	84 81       	ldd	r24, Z+4	; 0x04
    1e04:	95 81       	ldd	r25, Z+5	; 0x05
    1e06:	9c 01       	movw	r18, r24
    1e08:	21 50       	subi	r18, 0x01	; 1
    1e0a:	31 09       	sbc	r19, r1
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	fc 01       	movw	r30, r24
    1e12:	35 83       	std	Z+5, r19	; 0x05
    1e14:	24 83       	std	Z+4, r18	; 0x04
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	81 85       	ldd	r24, Z+9	; 0x09
    1e1e:	92 85       	ldd	r25, Z+10	; 0x0a
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	89 2b       	or	r24, r25
    1e2a:	79 f6       	brne	.-98     	; 0x1dca <scheduler_update+0x3e>
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <scheduler_init>:
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	0e 94 ef 10 	call	0x21de	; 0x21de <timer2_start>
    1e42:	86 ec       	ldi	r24, 0xC6	; 198
    1e44:	9e e0       	ldi	r25, 0x0E	; 14
    1e46:	0e 94 dd 10 	call	0x21ba	; 0x21ba <timer2_setCallback>
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <scheduler_run>:
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	2a 97       	sbiw	r28, 0x0a	; 10
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	8f e5       	ldi	r24, 0x5F	; 95
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	fc 01       	movw	r30, r24
    1e6a:	80 81       	ld	r24, Z
    1e6c:	89 87       	std	Y+9, r24	; 0x09
    1e6e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__iCliRetVal>
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	52 c0       	rjmp	.+164    	; 0x1f1a <scheduler_run+0xca>
    1e76:	80 91 c2 08 	lds	r24, 0x08C2
    1e7a:	90 91 c3 08 	lds	r25, 0x08C3
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	45 c0       	rjmp	.+138    	; 0x1f0e <scheduler_run+0xbe>
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	fc 01       	movw	r30, r24
    1e8a:	80 85       	ldd	r24, Z+8	; 0x08
    1e8c:	81 70       	andi	r24, 0x01	; 1
    1e8e:	88 23       	and	r24, r24
    1e90:	b9 f1       	breq	.+110    	; 0x1f00 <scheduler_run+0xb0>
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	fc 01       	movw	r30, r24
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	98 87       	std	Y+8, r25	; 0x08
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	8f e5       	ldi	r24, 0x5F	; 95
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8a 87       	std	Y+10, r24	; 0x0a
    1eb8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__iSeiRetVal>
    1ebc:	8c 83       	std	Y+4, r24	; 0x04
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <scheduler_run+0x7e>
    1ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec2:	98 85       	ldd	r25, Y+8	; 0x08
    1ec4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ec8:	f9 01       	movw	r30, r18
    1eca:	09 95       	icall
    1ecc:	1c 82       	std	Y+4, r1	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	88 23       	and	r24, r24
    1ed2:	b1 f7       	brne	.-20     	; 0x1ec0 <scheduler_run+0x70>
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	0a 96       	adiw	r24, 0x0a	; 10
    1ed8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__iRestore>
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	20 85       	ldd	r18, Z+8	; 0x08
    1ee4:	2e 7f       	andi	r18, 0xFE	; 254
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	20 87       	std	Z+8, r18	; 0x08
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	fc 01       	movw	r30, r24
    1ef0:	86 81       	ldd	r24, Z+6	; 0x06
    1ef2:	97 81       	ldd	r25, Z+7	; 0x07
    1ef4:	89 2b       	or	r24, r25
    1ef6:	21 f4       	brne	.+8      	; 0x1f00 <scheduler_run+0xb0>
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	0e 94 09 10 	call	0x2012	; 0x2012 <scheduler_remove>
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	fc 01       	movw	r30, r24
    1f06:	81 85       	ldd	r24, Z+9	; 0x09
    1f08:	92 85       	ldd	r25, Z+10	; 0x0a
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	89 2b       	or	r24, r25
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <scheduler_run+0xc8>
    1f16:	b6 cf       	rjmp	.-148    	; 0x1e84 <scheduler_run+0x34>
    1f18:	1b 82       	std	Y+3, r1	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <scheduler_run+0xd2>
    1f20:	aa cf       	rjmp	.-172    	; 0x1e76 <scheduler_run+0x26>
    1f22:	ce 01       	movw	r24, r28
    1f24:	09 96       	adiw	r24, 0x09	; 9
    1f26:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__iRestore>
    1f2a:	9c cf       	rjmp	.-200    	; 0x1e64 <scheduler_run+0x14>

00001f2c <scheduler_add>:
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	27 97       	sbiw	r28, 0x07	; 7
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	9f 83       	std	Y+7, r25	; 0x07
    1f48:	8e 83       	std	Y+6, r24	; 0x06
    1f4a:	8f e5       	ldi	r24, 0x5F	; 95
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__iCliRetVal>
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <scheduler_add+0xae>
    1f5c:	80 91 c2 08 	lds	r24, 0x08C2
    1f60:	90 91 c3 08 	lds	r25, 0x08C3
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	18 c0       	rjmp	.+48     	; 0x1f9a <scheduler_add+0x6e>
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	fc 01       	movw	r30, r24
    1f70:	20 81       	ld	r18, Z
    1f72:	31 81       	ldd	r19, Z+1	; 0x01
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	9f 81       	ldd	r25, Y+7	; 0x07
    1f78:	fc 01       	movw	r30, r24
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	28 17       	cp	r18, r24
    1f80:	39 07       	cpc	r19, r25
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <scheduler_add+0x60>
    1f84:	f1 2c       	mov	r15, r1
    1f86:	00 e0       	ldi	r16, 0x00	; 0
    1f88:	10 e0       	ldi	r17, 0x00	; 0
    1f8a:	2d c0       	rjmp	.+90     	; 0x1fe6 <scheduler_add+0xba>
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	fc 01       	movw	r30, r24
    1f92:	81 85       	ldd	r24, Z+9	; 0x09
    1f94:	92 85       	ldd	r25, Z+10	; 0x0a
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	89 2b       	or	r24, r25
    1fa0:	21 f7       	brne	.-56     	; 0x1f6a <scheduler_add+0x3e>
    1fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa6:	89 2b       	or	r24, r25
    1fa8:	11 f4       	brne	.+4      	; 0x1fae <scheduler_add+0x82>
    1faa:	19 82       	std	Y+1, r1	; 0x01
    1fac:	15 c0       	rjmp	.+42     	; 0x1fd8 <scheduler_add+0xac>
    1fae:	80 91 c2 08 	lds	r24, 0x08C2
    1fb2:	90 91 c3 08 	lds	r25, 0x08C3
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    1fba:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbe:	90 93 c3 08 	sts	0x08C3, r25
    1fc2:	80 93 c2 08 	sts	0x08C2, r24
    1fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fca:	2b 81       	ldd	r18, Y+3	; 0x03
    1fcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fce:	fc 01       	movw	r30, r24
    1fd0:	32 87       	std	Z+10, r19	; 0x0a
    1fd2:	21 87       	std	Z+9, r18	; 0x09
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	1a 82       	std	Y+2, r1	; 0x02
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	88 23       	and	r24, r24
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <scheduler_add+0xb6>
    1fe0:	bd cf       	rjmp	.-134    	; 0x1f5c <scheduler_add+0x30>
    1fe2:	01 e0       	ldi	r16, 0x01	; 1
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	05 96       	adiw	r24, 0x05	; 5
    1fea:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__iRestore>
    1fee:	01 30       	cpi	r16, 0x01	; 1
    1ff0:	11 05       	cpc	r17, r1
    1ff2:	11 f4       	brne	.+4      	; 0x1ff8 <scheduler_add+0xcc>
    1ff4:	00 00       	nop
    1ff6:	f9 80       	ldd	r15, Y+1	; 0x01
    1ff8:	8f 2d       	mov	r24, r15
    1ffa:	27 96       	adiw	r28, 0x07	; 7
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	08 95       	ret

00002012 <scheduler_remove>:
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	29 97       	sbiw	r28, 0x09	; 9
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	99 87       	std	Y+9, r25	; 0x09
    2028:	88 87       	std	Y+8, r24	; 0x08
    202a:	8f e5       	ldi	r24, 0x5F	; 95
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	8f 83       	std	Y+7, r24	; 0x07
    2034:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__iCliRetVal>
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	4a c0       	rjmp	.+148    	; 0x20d0 <scheduler_remove+0xbe>
    203c:	80 91 c2 08 	lds	r24, 0x08C2
    2040:	90 91 c3 08 	lds	r25, 0x08C3
    2044:	9b 83       	std	Y+3, r25	; 0x03
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	1d 82       	std	Y+5, r1	; 0x05
    204a:	1c 82       	std	Y+4, r1	; 0x04
    204c:	1e 82       	std	Y+6, r1	; 0x06
    204e:	36 c0       	rjmp	.+108    	; 0x20bc <scheduler_remove+0xaa>
    2050:	2a 81       	ldd	r18, Y+2	; 0x02
    2052:	3b 81       	ldd	r19, Y+3	; 0x03
    2054:	88 85       	ldd	r24, Y+8	; 0x08
    2056:	99 85       	ldd	r25, Y+9	; 0x09
    2058:	28 17       	cp	r18, r24
    205a:	39 07       	cpc	r19, r25
    205c:	21 f5       	brne	.+72     	; 0x20a6 <scheduler_remove+0x94>
    205e:	80 91 c2 08 	lds	r24, 0x08C2
    2062:	90 91 c3 08 	lds	r25, 0x08C3
    2066:	2a 81       	ldd	r18, Y+2	; 0x02
    2068:	3b 81       	ldd	r19, Y+3	; 0x03
    206a:	28 17       	cp	r18, r24
    206c:	39 07       	cpc	r19, r25
    206e:	71 f4       	brne	.+28     	; 0x208c <scheduler_remove+0x7a>
    2070:	80 91 c2 08 	lds	r24, 0x08C2
    2074:	90 91 c3 08 	lds	r25, 0x08C3
    2078:	fc 01       	movw	r30, r24
    207a:	81 85       	ldd	r24, Z+9	; 0x09
    207c:	92 85       	ldd	r25, Z+10	; 0x0a
    207e:	90 93 c3 08 	sts	0x08C3, r25
    2082:	80 93 c2 08 	sts	0x08C2, r24
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	8e 83       	std	Y+6, r24	; 0x06
    208a:	18 c0       	rjmp	.+48     	; 0x20bc <scheduler_remove+0xaa>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	9b 81       	ldd	r25, Y+3	; 0x03
    2090:	fc 01       	movw	r30, r24
    2092:	21 85       	ldd	r18, Z+9	; 0x09
    2094:	32 85       	ldd	r19, Z+10	; 0x0a
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	fc 01       	movw	r30, r24
    209c:	32 87       	std	Z+10, r19	; 0x0a
    209e:	21 87       	std	Z+9, r18	; 0x09
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	8e 83       	std	Y+6, r24	; 0x06
    20a4:	0b c0       	rjmp	.+22     	; 0x20bc <scheduler_remove+0xaa>
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	9b 81       	ldd	r25, Y+3	; 0x03
    20aa:	9d 83       	std	Y+5, r25	; 0x05
    20ac:	8c 83       	std	Y+4, r24	; 0x04
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	fc 01       	movw	r30, r24
    20b4:	81 85       	ldd	r24, Z+9	; 0x09
    20b6:	92 85       	ldd	r25, Z+10	; 0x0a
    20b8:	9b 83       	std	Y+3, r25	; 0x03
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	89 2b       	or	r24, r25
    20c2:	29 f0       	breq	.+10     	; 0x20ce <scheduler_remove+0xbc>
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	89 27       	eor	r24, r25
    20ca:	88 23       	and	r24, r24
    20cc:	09 f6       	brne	.-126    	; 0x2050 <scheduler_remove+0x3e>
    20ce:	19 82       	std	Y+1, r1	; 0x01
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	88 23       	and	r24, r24
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <scheduler_remove+0xc6>
    20d6:	b2 cf       	rjmp	.-156    	; 0x203c <scheduler_remove+0x2a>
    20d8:	ce 01       	movw	r24, r28
    20da:	07 96       	adiw	r24, 0x07	; 7
    20dc:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__iRestore>
    20e0:	29 96       	adiw	r28, 0x09	; 9
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <scheduler_getTime>:
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <scheduler_getTime+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <scheduler_getTime+0x8>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <scheduler_getTime+0xa>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	8f e5       	ldi	r24, 0x5F	; 95
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	fc 01       	movw	r30, r24
    2106:	80 81       	ld	r24, Z
    2108:	8e 83       	std	Y+6, r24	; 0x06
    210a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__iCliRetVal>
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	0d c0       	rjmp	.+26     	; 0x212c <scheduler_getTime+0x3a>
    2112:	80 91 c4 08 	lds	r24, 0x08C4
    2116:	90 91 c5 08 	lds	r25, 0x08C5
    211a:	a0 91 c6 08 	lds	r26, 0x08C6
    211e:	b0 91 c7 08 	lds	r27, 0x08C7
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	ab 83       	std	Y+3, r26	; 0x03
    2128:	bc 83       	std	Y+4, r27	; 0x04
    212a:	1d 82       	std	Y+5, r1	; 0x05
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	88 23       	and	r24, r24
    2130:	81 f7       	brne	.-32     	; 0x2112 <scheduler_getTime+0x20>
    2132:	ce 01       	movw	r24, r28
    2134:	06 96       	adiw	r24, 0x06	; 6
    2136:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__iRestore>
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	ab 81       	ldd	r26, Y+3	; 0x03
    2140:	bc 81       	ldd	r27, Y+4	; 0x04
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	26 96       	adiw	r28, 0x06	; 6
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	08 95       	ret

00002158 <scheduler_setTime>:
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	00 d0       	rcall	.+0      	; 0x215e <scheduler_setTime+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <scheduler_setTime+0x8>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <scheduler_setTime+0xa>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	6b 83       	std	Y+3, r22	; 0x03
    2168:	7c 83       	std	Y+4, r23	; 0x04
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8f e5       	ldi	r24, 0x5F	; 95
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	fc 01       	movw	r30, r24
    2174:	80 81       	ld	r24, Z
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__iCliRetVal>
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	0d c0       	rjmp	.+26     	; 0x219a <scheduler_setTime+0x42>
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	ad 81       	ldd	r26, Y+5	; 0x05
    2186:	be 81       	ldd	r27, Y+6	; 0x06
    2188:	80 93 c4 08 	sts	0x08C4, r24
    218c:	90 93 c5 08 	sts	0x08C5, r25
    2190:	a0 93 c6 08 	sts	0x08C6, r26
    2194:	b0 93 c7 08 	sts	0x08C7, r27
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	88 23       	and	r24, r24
    219e:	81 f7       	brne	.-32     	; 0x2180 <scheduler_setTime+0x28>
    21a0:	ce 01       	movw	r24, r28
    21a2:	02 96       	adiw	r24, 0x02	; 2
    21a4:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__iRestore>
    21a8:	26 96       	adiw	r28, 0x06	; 6
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <timer2_setCallback>:
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <timer2_setCallback+0x6>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	90 93 cb 08 	sts	0x08CB, r25
    21d0:	80 93 ca 08 	sts	0x08CA, r24
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	08 95       	ret

000021de <timer2_start>:
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	81 eb       	ldi	r24, 0xB1	; 177
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	21 eb       	ldi	r18, 0xB1	; 177
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	f9 01       	movw	r30, r18
    21f0:	20 81       	ld	r18, Z
    21f2:	27 7f       	andi	r18, 0xF7	; 247
    21f4:	fc 01       	movw	r30, r24
    21f6:	20 83       	st	Z, r18
    21f8:	80 eb       	ldi	r24, 0xB0	; 176
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	20 eb       	ldi	r18, 0xB0	; 176
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	f9 01       	movw	r30, r18
    2202:	20 81       	ld	r18, Z
    2204:	22 60       	ori	r18, 0x02	; 2
    2206:	fc 01       	movw	r30, r24
    2208:	20 83       	st	Z, r18
    220a:	80 eb       	ldi	r24, 0xB0	; 176
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	20 eb       	ldi	r18, 0xB0	; 176
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	f9 01       	movw	r30, r18
    2214:	20 81       	ld	r18, Z
    2216:	2e 7f       	andi	r18, 0xFE	; 254
    2218:	fc 01       	movw	r30, r24
    221a:	20 83       	st	Z, r18
    221c:	81 eb       	ldi	r24, 0xB1	; 177
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	21 eb       	ldi	r18, 0xB1	; 177
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	f9 01       	movw	r30, r18
    2226:	20 81       	ld	r18, Z
    2228:	24 60       	ori	r18, 0x04	; 4
    222a:	fc 01       	movw	r30, r24
    222c:	20 83       	st	Z, r18
    222e:	81 eb       	ldi	r24, 0xB1	; 177
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	21 eb       	ldi	r18, 0xB1	; 177
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	f9 01       	movw	r30, r18
    2238:	20 81       	ld	r18, Z
    223a:	2d 7f       	andi	r18, 0xFD	; 253
    223c:	fc 01       	movw	r30, r24
    223e:	20 83       	st	Z, r18
    2240:	81 eb       	ldi	r24, 0xB1	; 177
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	21 eb       	ldi	r18, 0xB1	; 177
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	f9 01       	movw	r30, r18
    224a:	20 81       	ld	r18, Z
    224c:	2e 7f       	andi	r18, 0xFE	; 254
    224e:	fc 01       	movw	r30, r24
    2250:	20 83       	st	Z, r18
    2252:	80 e7       	ldi	r24, 0x70	; 112
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	20 e7       	ldi	r18, 0x70	; 112
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	f9 01       	movw	r30, r18
    225c:	20 81       	ld	r18, Z
    225e:	22 60       	ori	r18, 0x02	; 2
    2260:	fc 01       	movw	r30, r24
    2262:	20 83       	st	Z, r18
    2264:	87 e3       	ldi	r24, 0x37	; 55
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	27 e3       	ldi	r18, 0x37	; 55
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	f9 01       	movw	r30, r18
    226e:	20 81       	ld	r18, Z
    2270:	22 60       	ori	r18, 0x02	; 2
    2272:	fc 01       	movw	r30, r24
    2274:	20 83       	st	Z, r18
    2276:	83 eb       	ldi	r24, 0xB3	; 179
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	29 ef       	ldi	r18, 0xF9	; 249
    227c:	fc 01       	movw	r30, r24
    227e:	20 83       	st	Z, r18
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <timer2_stop>:
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	81 eb       	ldi	r24, 0xB1	; 177
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	21 eb       	ldi	r18, 0xB1	; 177
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	f9 01       	movw	r30, r18
    2298:	20 81       	ld	r18, Z
    229a:	2b 7f       	andi	r18, 0xFB	; 251
    229c:	fc 01       	movw	r30, r24
    229e:	20 83       	st	Z, r18
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <timer1_setCallback>:
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <timer1_setCallback+0x6>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	90 93 c9 08 	sts	0x08C9, r25
    22bc:	80 93 c8 08 	sts	0x08C8, r24
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <timer1_start>:
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	81 e8       	ldi	r24, 0x81	; 129
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	21 e8       	ldi	r18, 0x81	; 129
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	f9 01       	movw	r30, r18
    22dc:	20 81       	ld	r18, Z
    22de:	2f 7e       	andi	r18, 0xEF	; 239
    22e0:	fc 01       	movw	r30, r24
    22e2:	20 83       	st	Z, r18
    22e4:	81 e8       	ldi	r24, 0x81	; 129
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	21 e8       	ldi	r18, 0x81	; 129
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	f9 01       	movw	r30, r18
    22ee:	20 81       	ld	r18, Z
    22f0:	28 60       	ori	r18, 0x08	; 8
    22f2:	fc 01       	movw	r30, r24
    22f4:	20 83       	st	Z, r18
    22f6:	80 e8       	ldi	r24, 0x80	; 128
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	20 e8       	ldi	r18, 0x80	; 128
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	20 81       	ld	r18, Z
    2302:	2d 7f       	andi	r18, 0xFD	; 253
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
    2308:	80 e8       	ldi	r24, 0x80	; 128
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	20 e8       	ldi	r18, 0x80	; 128
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	f9 01       	movw	r30, r18
    2312:	20 81       	ld	r18, Z
    2314:	2e 7f       	andi	r18, 0xFE	; 254
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
    231a:	81 e8       	ldi	r24, 0x81	; 129
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	21 e8       	ldi	r18, 0x81	; 129
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	f9 01       	movw	r30, r18
    2324:	20 81       	ld	r18, Z
    2326:	2b 7f       	andi	r18, 0xFB	; 251
    2328:	fc 01       	movw	r30, r24
    232a:	20 83       	st	Z, r18
    232c:	81 e8       	ldi	r24, 0x81	; 129
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	21 e8       	ldi	r18, 0x81	; 129
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	f9 01       	movw	r30, r18
    2336:	20 81       	ld	r18, Z
    2338:	22 60       	ori	r18, 0x02	; 2
    233a:	fc 01       	movw	r30, r24
    233c:	20 83       	st	Z, r18
    233e:	81 e8       	ldi	r24, 0x81	; 129
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	21 e8       	ldi	r18, 0x81	; 129
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	f9 01       	movw	r30, r18
    2348:	20 81       	ld	r18, Z
    234a:	21 60       	ori	r18, 0x01	; 1
    234c:	fc 01       	movw	r30, r24
    234e:	20 83       	st	Z, r18
    2350:	8f e6       	ldi	r24, 0x6F	; 111
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	2f e6       	ldi	r18, 0x6F	; 111
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	f9 01       	movw	r30, r18
    235a:	20 81       	ld	r18, Z
    235c:	22 60       	ori	r18, 0x02	; 2
    235e:	fc 01       	movw	r30, r24
    2360:	20 83       	st	Z, r18
    2362:	86 e3       	ldi	r24, 0x36	; 54
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	26 e3       	ldi	r18, 0x36	; 54
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	f9 01       	movw	r30, r18
    236c:	20 81       	ld	r18, Z
    236e:	22 60       	ori	r18, 0x02	; 2
    2370:	fc 01       	movw	r30, r24
    2372:	20 83       	st	Z, r18
    2374:	88 e8       	ldi	r24, 0x88	; 136
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	21 ee       	ldi	r18, 0xE1	; 225
    237a:	34 e0       	ldi	r19, 0x04	; 4
    237c:	fc 01       	movw	r30, r24
    237e:	31 83       	std	Z+1, r19	; 0x01
    2380:	20 83       	st	Z, r18
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <timer1_stop>:
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	81 e8       	ldi	r24, 0x81	; 129
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	21 e8       	ldi	r18, 0x81	; 129
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	f9 01       	movw	r30, r18
    239a:	20 81       	ld	r18, Z
    239c:	2d 7f       	andi	r18, 0xFD	; 253
    239e:	fc 01       	movw	r30, r24
    23a0:	20 83       	st	Z, r18
    23a2:	81 e8       	ldi	r24, 0x81	; 129
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	21 e8       	ldi	r18, 0x81	; 129
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	f9 01       	movw	r30, r18
    23ac:	20 81       	ld	r18, Z
    23ae:	2e 7f       	andi	r18, 0xFE	; 254
    23b0:	fc 01       	movw	r30, r24
    23b2:	20 83       	st	Z, r18
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <__vector_17>:
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	00 90 5f 00 	lds	r0, 0x005F
    23c2:	0f 92       	push	r0
    23c4:	11 24       	eor	r1, r1
    23c6:	00 90 5b 00 	lds	r0, 0x005B
    23ca:	0f 92       	push	r0
    23cc:	2f 93       	push	r18
    23ce:	3f 93       	push	r19
    23d0:	4f 93       	push	r20
    23d2:	5f 93       	push	r21
    23d4:	6f 93       	push	r22
    23d6:	7f 93       	push	r23
    23d8:	8f 93       	push	r24
    23da:	9f 93       	push	r25
    23dc:	af 93       	push	r26
    23de:	bf 93       	push	r27
    23e0:	ef 93       	push	r30
    23e2:	ff 93       	push	r31
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	80 91 c8 08 	lds	r24, 0x08C8
    23f0:	90 91 c9 08 	lds	r25, 0x08C9
    23f4:	fc 01       	movw	r30, r24
    23f6:	09 95       	icall
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	00 92 5b 00 	sts	0x005B, r0
    241a:	0f 90       	pop	r0
    241c:	00 92 5f 00 	sts	0x005F, r0
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <__vector_13>:
    2426:	1f 92       	push	r1
    2428:	0f 92       	push	r0
    242a:	00 90 5f 00 	lds	r0, 0x005F
    242e:	0f 92       	push	r0
    2430:	11 24       	eor	r1, r1
    2432:	00 90 5b 00 	lds	r0, 0x005B
    2436:	0f 92       	push	r0
    2438:	2f 93       	push	r18
    243a:	3f 93       	push	r19
    243c:	4f 93       	push	r20
    243e:	5f 93       	push	r21
    2440:	6f 93       	push	r22
    2442:	7f 93       	push	r23
    2444:	8f 93       	push	r24
    2446:	9f 93       	push	r25
    2448:	af 93       	push	r26
    244a:	bf 93       	push	r27
    244c:	ef 93       	push	r30
    244e:	ff 93       	push	r31
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	80 91 ca 08 	lds	r24, 0x08CA
    245c:	90 91 cb 08 	lds	r25, 0x08CB
    2460:	fc 01       	movw	r30, r24
    2462:	09 95       	icall
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	ff 91       	pop	r31
    246a:	ef 91       	pop	r30
    246c:	bf 91       	pop	r27
    246e:	af 91       	pop	r26
    2470:	9f 91       	pop	r25
    2472:	8f 91       	pop	r24
    2474:	7f 91       	pop	r23
    2476:	6f 91       	pop	r22
    2478:	5f 91       	pop	r21
    247a:	4f 91       	pop	r20
    247c:	3f 91       	pop	r19
    247e:	2f 91       	pop	r18
    2480:	0f 90       	pop	r0
    2482:	00 92 5b 00 	sts	0x005B, r0
    2486:	0f 90       	pop	r0
    2488:	00 92 5f 00 	sts	0x005F, r0
    248c:	0f 90       	pop	r0
    248e:	1f 90       	pop	r1
    2490:	18 95       	reti

00002492 <lcd_waitBusy>:
    2492:	0e 94 88 13 	call	0x2710	; 0x2710 <lcdDriver_readStatus>
    2496:	87 fd       	sbrc	r24, 7
    2498:	fc cf       	rjmp	.-8      	; 0x2492 <lcd_waitBusy>
    249a:	08 95       	ret

0000249c <lcd_write>:
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	d8 2f       	mov	r29, r24
    24a4:	c6 2f       	mov	r28, r22
    24a6:	14 2f       	mov	r17, r20
    24a8:	6a 37       	cpi	r22, 0x7A	; 122
    24aa:	10 f5       	brcc	.+68     	; 0x24f0 <lcd_write+0x54>
    24ac:	84 30       	cpi	r24, 0x04	; 4
    24ae:	00 f5       	brcc	.+64     	; 0x24f0 <lcd_write+0x54>
    24b0:	6d 33       	cpi	r22, 0x3D	; 61
    24b2:	40 f0       	brcs	.+16     	; 0x24c4 <lcd_write+0x28>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <lcdDriver_selectController>
    24ba:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    24be:	83 ec       	ldi	r24, 0xC3	; 195
    24c0:	8c 0f       	add	r24, r28
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <lcd_write+0x34>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <lcdDriver_selectController>
    24ca:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    24ce:	8c 2f       	mov	r24, r28
    24d0:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcdDriver_writeCommand>
    24d4:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    24d8:	8d 2f       	mov	r24, r29
    24da:	88 6b       	ori	r24, 0xB8	; 184
    24dc:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcdDriver_writeCommand>
    24e0:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    24e4:	81 2f       	mov	r24, r17
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <lcdDriver_writeData>
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	08 95       	ret

000024f8 <lcd_setCursor>:
    24f8:	80 93 b5 0a 	sts	0x0AB5, r24
    24fc:	60 93 b4 0a 	sts	0x0AB4, r22
    2500:	08 95       	ret

00002502 <lcd_putc>:
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	90 91 b4 0a 	lds	r25, 0x0AB4
    250e:	8a 30       	cpi	r24, 0x0A	; 10
    2510:	31 f4       	brne	.+12     	; 0x251e <lcd_putc+0x1c>
    2512:	10 92 b5 0a 	sts	0x0AB5, r1
    2516:	9f 5f       	subi	r25, 0xFF	; 255
    2518:	90 93 b4 0a 	sts	0x0AB4, r25
    251c:	2d c0       	rjmp	.+90     	; 0x2578 <lcd_putc+0x76>
    251e:	20 91 b5 0a 	lds	r18, 0x0AB5
    2522:	24 31       	cpi	r18, 0x14	; 20
    2524:	29 f4       	brne	.+10     	; 0x2530 <lcd_putc+0x2e>
    2526:	10 92 b5 0a 	sts	0x0AB5, r1
    252a:	9f 5f       	subi	r25, 0xFF	; 255
    252c:	90 93 b4 0a 	sts	0x0AB4, r25
    2530:	90 91 b4 0a 	lds	r25, 0x0AB4
    2534:	94 30       	cpi	r25, 0x04	; 4
    2536:	00 f5       	brcc	.+64     	; 0x2578 <lcd_putc+0x76>
    2538:	96 e0       	ldi	r25, 0x06	; 6
    253a:	89 9f       	mul	r24, r25
    253c:	80 01       	movw	r16, r0
    253e:	11 24       	eor	r1, r1
    2540:	c0 e0       	ldi	r28, 0x00	; 0
    2542:	d0 e0       	ldi	r29, 0x00	; 0
    2544:	07 5a       	subi	r16, 0xA7	; 167
    2546:	1d 4f       	sbci	r17, 0xFD	; 253
    2548:	f8 01       	movw	r30, r16
    254a:	ec 0f       	add	r30, r28
    254c:	fd 1f       	adc	r31, r29
    254e:	80 91 b5 0a 	lds	r24, 0x0AB5
    2552:	68 2f       	mov	r22, r24
    2554:	66 0f       	add	r22, r22
    2556:	68 0f       	add	r22, r24
    2558:	66 0f       	add	r22, r22
    255a:	6c 0f       	add	r22, r28
    255c:	40 81       	ld	r20, Z
    255e:	80 91 b4 0a 	lds	r24, 0x0AB4
    2562:	0e 94 4e 12 	call	0x249c	; 0x249c <lcd_write>
    2566:	21 96       	adiw	r28, 0x01	; 1
    2568:	c6 30       	cpi	r28, 0x06	; 6
    256a:	d1 05       	cpc	r29, r1
    256c:	69 f7       	brne	.-38     	; 0x2548 <lcd_putc+0x46>
    256e:	80 91 b5 0a 	lds	r24, 0x0AB5
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	80 93 b5 0a 	sts	0x0AB5, r24
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <put>:
    2582:	0e 94 81 12 	call	0x2502	; 0x2502 <lcd_putc>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	08 95       	ret

0000258c <lcd_setPixel>:
    258c:	98 2f       	mov	r25, r24
    258e:	96 95       	lsr	r25
    2590:	96 95       	lsr	r25
    2592:	96 95       	lsr	r25
    2594:	94 30       	cpi	r25, 0x04	; 4
    2596:	08 f0       	brcs	.+2      	; 0x259a <lcd_setPixel+0xe>
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <lcd_setPixel+0x8c>
    259a:	6a 37       	cpi	r22, 0x7A	; 122
    259c:	e8 f5       	brcc	.+122    	; 0x2618 <lcd_setPixel+0x8c>
    259e:	87 70       	andi	r24, 0x07	; 7
    25a0:	a9 2f       	mov	r26, r25
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	26 2f       	mov	r18, r22
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	44 23       	and	r20, r20
    25aa:	a1 f0       	breq	.+40     	; 0x25d4 <lcd_setPixel+0x48>
    25ac:	4a e7       	ldi	r20, 0x7A	; 122
    25ae:	4a 9f       	mul	r20, r26
    25b0:	f0 01       	movw	r30, r0
    25b2:	4b 9f       	mul	r20, r27
    25b4:	f0 0d       	add	r31, r0
    25b6:	11 24       	eor	r1, r1
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	e4 53       	subi	r30, 0x34	; 52
    25be:	f7 4f       	sbci	r31, 0xF7	; 247
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <lcd_setPixel+0x3c>
    25c6:	44 0f       	add	r20, r20
    25c8:	8a 95       	dec	r24
    25ca:	ea f7       	brpl	.-6      	; 0x25c6 <lcd_setPixel+0x3a>
    25cc:	80 81       	ld	r24, Z
    25ce:	84 2b       	or	r24, r20
    25d0:	80 83       	st	Z, r24
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <lcd_setPixel+0x70>
    25d4:	4a e7       	ldi	r20, 0x7A	; 122
    25d6:	4a 9f       	mul	r20, r26
    25d8:	f0 01       	movw	r30, r0
    25da:	4b 9f       	mul	r20, r27
    25dc:	f0 0d       	add	r31, r0
    25de:	11 24       	eor	r1, r1
    25e0:	e2 0f       	add	r30, r18
    25e2:	f3 1f       	adc	r31, r19
    25e4:	e4 53       	subi	r30, 0x34	; 52
    25e6:	f7 4f       	sbci	r31, 0xF7	; 247
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <lcd_setPixel+0x64>
    25ee:	44 0f       	add	r20, r20
    25f0:	8a 95       	dec	r24
    25f2:	ea f7       	brpl	.-6      	; 0x25ee <lcd_setPixel+0x62>
    25f4:	40 95       	com	r20
    25f6:	80 81       	ld	r24, Z
    25f8:	48 23       	and	r20, r24
    25fa:	40 83       	st	Z, r20
    25fc:	8a e7       	ldi	r24, 0x7A	; 122
    25fe:	8a 9f       	mul	r24, r26
    2600:	f0 01       	movw	r30, r0
    2602:	8b 9f       	mul	r24, r27
    2604:	f0 0d       	add	r31, r0
    2606:	11 24       	eor	r1, r1
    2608:	e2 0f       	add	r30, r18
    260a:	f3 1f       	adc	r31, r19
    260c:	e4 53       	subi	r30, 0x34	; 52
    260e:	f7 4f       	sbci	r31, 0xF7	; 247
    2610:	40 81       	ld	r20, Z
    2612:	89 2f       	mov	r24, r25
    2614:	0c 94 4e 12 	jmp	0x249c	; 0x249c <lcd_write>
    2618:	08 95       	ret

0000261a <lcd_clear>:
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	0c ec       	ldi	r16, 0xCC	; 204
    2626:	18 e0       	ldi	r17, 0x08	; 8
    2628:	f1 2c       	mov	r15, r1
    262a:	c0 e0       	ldi	r28, 0x00	; 0
    262c:	d0 e0       	ldi	r29, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	6c 2f       	mov	r22, r28
    2632:	8f 2d       	mov	r24, r15
    2634:	0e 94 4e 12 	call	0x249c	; 0x249c <lcd_write>
    2638:	f8 01       	movw	r30, r16
    263a:	ec 0f       	add	r30, r28
    263c:	fd 1f       	adc	r31, r29
    263e:	10 82       	st	Z, r1
    2640:	21 96       	adiw	r28, 0x01	; 1
    2642:	ca 37       	cpi	r28, 0x7A	; 122
    2644:	d1 05       	cpc	r29, r1
    2646:	99 f7       	brne	.-26     	; 0x262e <lcd_clear+0x14>
    2648:	f3 94       	inc	r15
    264a:	06 58       	subi	r16, 0x86	; 134
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	84 e0       	ldi	r24, 0x04	; 4
    2650:	f8 12       	cpse	r15, r24
    2652:	eb cf       	rjmp	.-42     	; 0x262a <lcd_clear+0x10>
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	08 95       	ret

00002660 <lcd_init>:
    2660:	0e 94 63 13 	call	0x26c6	; 0x26c6 <lcdDriver_init>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	0e 94 7f 13 	call	0x26fe	; 0x26fe <lcdDriver_selectController>
    266a:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    266e:	82 ee       	ldi	r24, 0xE2	; 226
    2670:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcdDriver_writeCommand>
    2674:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    2678:	8f ea       	ldi	r24, 0xAF	; 175
    267a:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcdDriver_writeCommand>
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	0e 94 7f 13 	call	0x26fe	; 0x26fe <lcdDriver_selectController>
    2684:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    2688:	82 ee       	ldi	r24, 0xE2	; 226
    268a:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcdDriver_writeCommand>
    268e:	0e 94 49 12 	call	0x2492	; 0x2492 <lcd_waitBusy>
    2692:	8f ea       	ldi	r24, 0xAF	; 175
    2694:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcdDriver_writeCommand>
    2698:	0e 94 0d 13 	call	0x261a	; 0x261a <lcd_clear>
    269c:	10 92 b5 0a 	sts	0x0AB5, r1
    26a0:	10 92 b4 0a 	sts	0x0AB4, r1
    26a4:	8e e0       	ldi	r24, 0x0E	; 14
    26a6:	e6 eb       	ldi	r30, 0xB6	; 182
    26a8:	fa e0       	ldi	r31, 0x0A	; 10
    26aa:	df 01       	movw	r26, r30
    26ac:	1d 92       	st	X+, r1
    26ae:	8a 95       	dec	r24
    26b0:	e9 f7       	brne	.-6      	; 0x26ac <lcd_init+0x4c>
    26b2:	81 ec       	ldi	r24, 0xC1	; 193
    26b4:	92 e1       	ldi	r25, 0x12	; 18
    26b6:	90 93 bf 0a 	sts	0x0ABF, r25
    26ba:	80 93 be 0a 	sts	0x0ABE, r24
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	80 93 b9 0a 	sts	0x0AB9, r24
    26c4:	08 95       	ret

000026c6 <lcdDriver_init>:
    26c6:	54 9a       	sbi	0x0a, 4	; 10
    26c8:	55 9a       	sbi	0x0a, 5	; 10
    26ca:	5d 9a       	sbi	0x0b, 5	; 11
    26cc:	57 9a       	sbi	0x0a, 7	; 10
    26ce:	5f 9a       	sbi	0x0b, 7	; 11
    26d0:	56 9a       	sbi	0x0a, 6	; 10
    26d2:	08 95       	ret

000026d4 <lcdDriver_writeData>:
    26d4:	5e 9a       	sbi	0x0b, 6	; 11
    26d6:	9f ef       	ldi	r25, 0xFF	; 255
    26d8:	9d b9       	out	0x0d, r25	; 13
    26da:	8e b9       	out	0x0e, r24	; 14
    26dc:	5d 98       	cbi	0x0b, 5	; 11
    26de:	00 00       	nop
    26e0:	00 00       	nop
    26e2:	00 00       	nop
    26e4:	5d 9a       	sbi	0x0b, 5	; 11
    26e6:	5e 98       	cbi	0x0b, 6	; 11
    26e8:	08 95       	ret

000026ea <lcdDriver_writeCommand>:
    26ea:	5e 98       	cbi	0x0b, 6	; 11
    26ec:	9f ef       	ldi	r25, 0xFF	; 255
    26ee:	9d b9       	out	0x0d, r25	; 13
    26f0:	8e b9       	out	0x0e, r24	; 14
    26f2:	5d 98       	cbi	0x0b, 5	; 11
    26f4:	00 00       	nop
    26f6:	00 00       	nop
    26f8:	00 00       	nop
    26fa:	5d 9a       	sbi	0x0b, 5	; 11
    26fc:	08 95       	ret

000026fe <lcdDriver_selectController>:
    26fe:	2b b1       	in	r18, 0x0b	; 11
    2700:	30 e1       	ldi	r19, 0x10	; 16
    2702:	83 9f       	mul	r24, r19
    2704:	c0 01       	movw	r24, r0
    2706:	11 24       	eor	r1, r1
    2708:	2f 7e       	andi	r18, 0xEF	; 239
    270a:	28 2b       	or	r18, r24
    270c:	2b b9       	out	0x0b, r18	; 11
    270e:	08 95       	ret

00002710 <lcdDriver_readStatus>:
    2710:	5e 98       	cbi	0x0b, 6	; 11
    2712:	1d b8       	out	0x0d, r1	; 13
    2714:	1e b8       	out	0x0e, r1	; 14
    2716:	5f 98       	cbi	0x0b, 7	; 11
    2718:	00 00       	nop
    271a:	00 00       	nop
    271c:	00 00       	nop
    271e:	8c b1       	in	r24, 0x0c	; 12
    2720:	5f 9a       	sbi	0x0b, 7	; 11
    2722:	08 95       	ret

00002724 <__mulsi3>:
    2724:	db 01       	movw	r26, r22
    2726:	8f 93       	push	r24
    2728:	9f 93       	push	r25
    272a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__muluhisi3>
    272e:	bf 91       	pop	r27
    2730:	af 91       	pop	r26
    2732:	a2 9f       	mul	r26, r18
    2734:	80 0d       	add	r24, r0
    2736:	91 1d       	adc	r25, r1
    2738:	a3 9f       	mul	r26, r19
    273a:	90 0d       	add	r25, r0
    273c:	b2 9f       	mul	r27, r18
    273e:	90 0d       	add	r25, r0
    2740:	11 24       	eor	r1, r1
    2742:	08 95       	ret

00002744 <__udivmodsi4>:
    2744:	a1 e2       	ldi	r26, 0x21	; 33
    2746:	1a 2e       	mov	r1, r26
    2748:	aa 1b       	sub	r26, r26
    274a:	bb 1b       	sub	r27, r27
    274c:	fd 01       	movw	r30, r26
    274e:	0d c0       	rjmp	.+26     	; 0x276a <__udivmodsi4_ep>

00002750 <__udivmodsi4_loop>:
    2750:	aa 1f       	adc	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	ee 1f       	adc	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	a2 17       	cp	r26, r18
    275a:	b3 07       	cpc	r27, r19
    275c:	e4 07       	cpc	r30, r20
    275e:	f5 07       	cpc	r31, r21
    2760:	20 f0       	brcs	.+8      	; 0x276a <__udivmodsi4_ep>
    2762:	a2 1b       	sub	r26, r18
    2764:	b3 0b       	sbc	r27, r19
    2766:	e4 0b       	sbc	r30, r20
    2768:	f5 0b       	sbc	r31, r21

0000276a <__udivmodsi4_ep>:
    276a:	66 1f       	adc	r22, r22
    276c:	77 1f       	adc	r23, r23
    276e:	88 1f       	adc	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	1a 94       	dec	r1
    2774:	69 f7       	brne	.-38     	; 0x2750 <__udivmodsi4_loop>
    2776:	60 95       	com	r22
    2778:	70 95       	com	r23
    277a:	80 95       	com	r24
    277c:	90 95       	com	r25
    277e:	9b 01       	movw	r18, r22
    2780:	ac 01       	movw	r20, r24
    2782:	bd 01       	movw	r22, r26
    2784:	cf 01       	movw	r24, r30
    2786:	08 95       	ret

00002788 <__umulhisi3>:
    2788:	a2 9f       	mul	r26, r18
    278a:	b0 01       	movw	r22, r0
    278c:	b3 9f       	mul	r27, r19
    278e:	c0 01       	movw	r24, r0
    2790:	a3 9f       	mul	r26, r19
    2792:	70 0d       	add	r23, r0
    2794:	81 1d       	adc	r24, r1
    2796:	11 24       	eor	r1, r1
    2798:	91 1d       	adc	r25, r1
    279a:	b2 9f       	mul	r27, r18
    279c:	70 0d       	add	r23, r0
    279e:	81 1d       	adc	r24, r1
    27a0:	11 24       	eor	r1, r1
    27a2:	91 1d       	adc	r25, r1
    27a4:	08 95       	ret

000027a6 <__muluhisi3>:
    27a6:	0e 94 c4 13 	call	0x2788	; 0x2788 <__umulhisi3>
    27aa:	a5 9f       	mul	r26, r21
    27ac:	90 0d       	add	r25, r0
    27ae:	b4 9f       	mul	r27, r20
    27b0:	90 0d       	add	r25, r0
    27b2:	a4 9f       	mul	r26, r20
    27b4:	80 0d       	add	r24, r0
    27b6:	91 1d       	adc	r25, r1
    27b8:	11 24       	eor	r1, r1
    27ba:	08 95       	ret

000027bc <fprintf>:
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	ae 01       	movw	r20, r28
    27c6:	47 5f       	subi	r20, 0xF7	; 247
    27c8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ca:	6f 81       	ldd	r22, Y+7	; 0x07
    27cc:	78 85       	ldd	r23, Y+8	; 0x08
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	0e 94 30 14 	call	0x2860	; 0x2860 <vfprintf>
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	08 95       	ret

000027dc <fwrite>:
    27dc:	8f 92       	push	r8
    27de:	9f 92       	push	r9
    27e0:	af 92       	push	r10
    27e2:	bf 92       	push	r11
    27e4:	cf 92       	push	r12
    27e6:	df 92       	push	r13
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	5b 01       	movw	r10, r22
    27f6:	4a 01       	movw	r8, r20
    27f8:	79 01       	movw	r14, r18
    27fa:	d9 01       	movw	r26, r18
    27fc:	13 96       	adiw	r26, 0x03	; 3
    27fe:	2c 91       	ld	r18, X
    2800:	21 ff       	sbrs	r18, 1
    2802:	1d c0       	rjmp	.+58     	; 0x283e <fwrite+0x62>
    2804:	c0 e0       	ldi	r28, 0x00	; 0
    2806:	d0 e0       	ldi	r29, 0x00	; 0
    2808:	c8 15       	cp	r28, r8
    280a:	d9 05       	cpc	r29, r9
    280c:	d9 f0       	breq	.+54     	; 0x2844 <fwrite+0x68>
    280e:	8c 01       	movw	r16, r24
    2810:	6c 01       	movw	r12, r24
    2812:	ca 0c       	add	r12, r10
    2814:	db 1c       	adc	r13, r11
    2816:	c8 01       	movw	r24, r16
    2818:	0c 15       	cp	r16, r12
    281a:	1d 05       	cpc	r17, r13
    281c:	71 f0       	breq	.+28     	; 0x283a <fwrite+0x5e>
    281e:	0f 5f       	subi	r16, 0xFF	; 255
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	d7 01       	movw	r26, r14
    2824:	18 96       	adiw	r26, 0x08	; 8
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	19 97       	sbiw	r26, 0x09	; 9
    282c:	b7 01       	movw	r22, r14
    282e:	dc 01       	movw	r26, r24
    2830:	8c 91       	ld	r24, X
    2832:	09 95       	icall
    2834:	89 2b       	or	r24, r25
    2836:	79 f3       	breq	.-34     	; 0x2816 <fwrite+0x3a>
    2838:	05 c0       	rjmp	.+10     	; 0x2844 <fwrite+0x68>
    283a:	21 96       	adiw	r28, 0x01	; 1
    283c:	e5 cf       	rjmp	.-54     	; 0x2808 <fwrite+0x2c>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <fwrite+0x6a>
    2844:	ce 01       	movw	r24, r28
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	08 95       	ret

00002860 <vfprintf>:
    2860:	2f 92       	push	r2
    2862:	3f 92       	push	r3
    2864:	4f 92       	push	r4
    2866:	5f 92       	push	r5
    2868:	6f 92       	push	r6
    286a:	7f 92       	push	r7
    286c:	8f 92       	push	r8
    286e:	9f 92       	push	r9
    2870:	af 92       	push	r10
    2872:	bf 92       	push	r11
    2874:	cf 92       	push	r12
    2876:	df 92       	push	r13
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	2c 97       	sbiw	r28, 0x0c	; 12
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	7c 01       	movw	r14, r24
    2896:	6b 01       	movw	r12, r22
    2898:	8a 01       	movw	r16, r20
    289a:	fc 01       	movw	r30, r24
    289c:	17 82       	std	Z+7, r1	; 0x07
    289e:	16 82       	std	Z+6, r1	; 0x06
    28a0:	83 81       	ldd	r24, Z+3	; 0x03
    28a2:	81 ff       	sbrs	r24, 1
    28a4:	bd c1       	rjmp	.+890    	; 0x2c20 <vfprintf+0x3c0>
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	4c 01       	movw	r8, r24
    28ac:	f7 01       	movw	r30, r14
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	f6 01       	movw	r30, r12
    28b2:	93 fd       	sbrc	r25, 3
    28b4:	85 91       	lpm	r24, Z+
    28b6:	93 ff       	sbrs	r25, 3
    28b8:	81 91       	ld	r24, Z+
    28ba:	6f 01       	movw	r12, r30
    28bc:	88 23       	and	r24, r24
    28be:	09 f4       	brne	.+2      	; 0x28c2 <vfprintf+0x62>
    28c0:	ab c1       	rjmp	.+854    	; 0x2c18 <vfprintf+0x3b8>
    28c2:	85 32       	cpi	r24, 0x25	; 37
    28c4:	39 f4       	brne	.+14     	; 0x28d4 <vfprintf+0x74>
    28c6:	93 fd       	sbrc	r25, 3
    28c8:	85 91       	lpm	r24, Z+
    28ca:	93 ff       	sbrs	r25, 3
    28cc:	81 91       	ld	r24, Z+
    28ce:	6f 01       	movw	r12, r30
    28d0:	85 32       	cpi	r24, 0x25	; 37
    28d2:	29 f4       	brne	.+10     	; 0x28de <vfprintf+0x7e>
    28d4:	b7 01       	movw	r22, r14
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    28dc:	e7 cf       	rjmp	.-50     	; 0x28ac <vfprintf+0x4c>
    28de:	51 2c       	mov	r5, r1
    28e0:	31 2c       	mov	r3, r1
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	20 32       	cpi	r18, 0x20	; 32
    28e6:	a0 f4       	brcc	.+40     	; 0x2910 <vfprintf+0xb0>
    28e8:	8b 32       	cpi	r24, 0x2B	; 43
    28ea:	69 f0       	breq	.+26     	; 0x2906 <vfprintf+0xa6>
    28ec:	30 f4       	brcc	.+12     	; 0x28fa <vfprintf+0x9a>
    28ee:	80 32       	cpi	r24, 0x20	; 32
    28f0:	59 f0       	breq	.+22     	; 0x2908 <vfprintf+0xa8>
    28f2:	83 32       	cpi	r24, 0x23	; 35
    28f4:	69 f4       	brne	.+26     	; 0x2910 <vfprintf+0xb0>
    28f6:	20 61       	ori	r18, 0x10	; 16
    28f8:	2c c0       	rjmp	.+88     	; 0x2952 <vfprintf+0xf2>
    28fa:	8d 32       	cpi	r24, 0x2D	; 45
    28fc:	39 f0       	breq	.+14     	; 0x290c <vfprintf+0xac>
    28fe:	80 33       	cpi	r24, 0x30	; 48
    2900:	39 f4       	brne	.+14     	; 0x2910 <vfprintf+0xb0>
    2902:	21 60       	ori	r18, 0x01	; 1
    2904:	26 c0       	rjmp	.+76     	; 0x2952 <vfprintf+0xf2>
    2906:	22 60       	ori	r18, 0x02	; 2
    2908:	24 60       	ori	r18, 0x04	; 4
    290a:	23 c0       	rjmp	.+70     	; 0x2952 <vfprintf+0xf2>
    290c:	28 60       	ori	r18, 0x08	; 8
    290e:	21 c0       	rjmp	.+66     	; 0x2952 <vfprintf+0xf2>
    2910:	27 fd       	sbrc	r18, 7
    2912:	27 c0       	rjmp	.+78     	; 0x2962 <vfprintf+0x102>
    2914:	30 ed       	ldi	r19, 0xD0	; 208
    2916:	38 0f       	add	r19, r24
    2918:	3a 30       	cpi	r19, 0x0A	; 10
    291a:	78 f4       	brcc	.+30     	; 0x293a <vfprintf+0xda>
    291c:	26 ff       	sbrs	r18, 6
    291e:	06 c0       	rjmp	.+12     	; 0x292c <vfprintf+0xcc>
    2920:	fa e0       	ldi	r31, 0x0A	; 10
    2922:	5f 9e       	mul	r5, r31
    2924:	30 0d       	add	r19, r0
    2926:	11 24       	eor	r1, r1
    2928:	53 2e       	mov	r5, r19
    292a:	13 c0       	rjmp	.+38     	; 0x2952 <vfprintf+0xf2>
    292c:	8a e0       	ldi	r24, 0x0A	; 10
    292e:	38 9e       	mul	r3, r24
    2930:	30 0d       	add	r19, r0
    2932:	11 24       	eor	r1, r1
    2934:	33 2e       	mov	r3, r19
    2936:	20 62       	ori	r18, 0x20	; 32
    2938:	0c c0       	rjmp	.+24     	; 0x2952 <vfprintf+0xf2>
    293a:	8e 32       	cpi	r24, 0x2E	; 46
    293c:	21 f4       	brne	.+8      	; 0x2946 <vfprintf+0xe6>
    293e:	26 fd       	sbrc	r18, 6
    2940:	6b c1       	rjmp	.+726    	; 0x2c18 <vfprintf+0x3b8>
    2942:	20 64       	ori	r18, 0x40	; 64
    2944:	06 c0       	rjmp	.+12     	; 0x2952 <vfprintf+0xf2>
    2946:	8c 36       	cpi	r24, 0x6C	; 108
    2948:	11 f4       	brne	.+4      	; 0x294e <vfprintf+0xee>
    294a:	20 68       	ori	r18, 0x80	; 128
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <vfprintf+0xf2>
    294e:	88 36       	cpi	r24, 0x68	; 104
    2950:	41 f4       	brne	.+16     	; 0x2962 <vfprintf+0x102>
    2952:	f6 01       	movw	r30, r12
    2954:	93 fd       	sbrc	r25, 3
    2956:	85 91       	lpm	r24, Z+
    2958:	93 ff       	sbrs	r25, 3
    295a:	81 91       	ld	r24, Z+
    295c:	6f 01       	movw	r12, r30
    295e:	81 11       	cpse	r24, r1
    2960:	c1 cf       	rjmp	.-126    	; 0x28e4 <vfprintf+0x84>
    2962:	98 2f       	mov	r25, r24
    2964:	9f 7d       	andi	r25, 0xDF	; 223
    2966:	95 54       	subi	r25, 0x45	; 69
    2968:	93 30       	cpi	r25, 0x03	; 3
    296a:	28 f4       	brcc	.+10     	; 0x2976 <vfprintf+0x116>
    296c:	0c 5f       	subi	r16, 0xFC	; 252
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	ff e3       	ldi	r31, 0x3F	; 63
    2972:	f9 83       	std	Y+1, r31	; 0x01
    2974:	0d c0       	rjmp	.+26     	; 0x2990 <vfprintf+0x130>
    2976:	83 36       	cpi	r24, 0x63	; 99
    2978:	31 f0       	breq	.+12     	; 0x2986 <vfprintf+0x126>
    297a:	83 37       	cpi	r24, 0x73	; 115
    297c:	71 f0       	breq	.+28     	; 0x299a <vfprintf+0x13a>
    297e:	83 35       	cpi	r24, 0x53	; 83
    2980:	09 f0       	breq	.+2      	; 0x2984 <vfprintf+0x124>
    2982:	5b c0       	rjmp	.+182    	; 0x2a3a <vfprintf+0x1da>
    2984:	22 c0       	rjmp	.+68     	; 0x29ca <vfprintf+0x16a>
    2986:	f8 01       	movw	r30, r16
    2988:	80 81       	ld	r24, Z
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	0e 5f       	subi	r16, 0xFE	; 254
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	44 24       	eor	r4, r4
    2992:	43 94       	inc	r4
    2994:	51 2c       	mov	r5, r1
    2996:	54 01       	movw	r10, r8
    2998:	15 c0       	rjmp	.+42     	; 0x29c4 <vfprintf+0x164>
    299a:	38 01       	movw	r6, r16
    299c:	f2 e0       	ldi	r31, 0x02	; 2
    299e:	6f 0e       	add	r6, r31
    29a0:	71 1c       	adc	r7, r1
    29a2:	f8 01       	movw	r30, r16
    29a4:	a0 80       	ld	r10, Z
    29a6:	b1 80       	ldd	r11, Z+1	; 0x01
    29a8:	26 ff       	sbrs	r18, 6
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <vfprintf+0x152>
    29ac:	65 2d       	mov	r22, r5
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <vfprintf+0x156>
    29b2:	6f ef       	ldi	r22, 0xFF	; 255
    29b4:	7f ef       	ldi	r23, 0xFF	; 255
    29b6:	c5 01       	movw	r24, r10
    29b8:	2c 87       	std	Y+12, r18	; 0x0c
    29ba:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <strnlen>
    29be:	2c 01       	movw	r4, r24
    29c0:	83 01       	movw	r16, r6
    29c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    29c4:	2f 77       	andi	r18, 0x7F	; 127
    29c6:	22 2e       	mov	r2, r18
    29c8:	17 c0       	rjmp	.+46     	; 0x29f8 <vfprintf+0x198>
    29ca:	38 01       	movw	r6, r16
    29cc:	f2 e0       	ldi	r31, 0x02	; 2
    29ce:	6f 0e       	add	r6, r31
    29d0:	71 1c       	adc	r7, r1
    29d2:	f8 01       	movw	r30, r16
    29d4:	a0 80       	ld	r10, Z
    29d6:	b1 80       	ldd	r11, Z+1	; 0x01
    29d8:	26 ff       	sbrs	r18, 6
    29da:	03 c0       	rjmp	.+6      	; 0x29e2 <vfprintf+0x182>
    29dc:	65 2d       	mov	r22, r5
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <vfprintf+0x186>
    29e2:	6f ef       	ldi	r22, 0xFF	; 255
    29e4:	7f ef       	ldi	r23, 0xFF	; 255
    29e6:	c5 01       	movw	r24, r10
    29e8:	2c 87       	std	Y+12, r18	; 0x0c
    29ea:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <strnlen_P>
    29ee:	2c 01       	movw	r4, r24
    29f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    29f2:	20 68       	ori	r18, 0x80	; 128
    29f4:	22 2e       	mov	r2, r18
    29f6:	83 01       	movw	r16, r6
    29f8:	23 fc       	sbrc	r2, 3
    29fa:	1b c0       	rjmp	.+54     	; 0x2a32 <vfprintf+0x1d2>
    29fc:	83 2d       	mov	r24, r3
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	48 16       	cp	r4, r24
    2a02:	59 06       	cpc	r5, r25
    2a04:	b0 f4       	brcc	.+44     	; 0x2a32 <vfprintf+0x1d2>
    2a06:	b7 01       	movw	r22, r14
    2a08:	80 e2       	ldi	r24, 0x20	; 32
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2a10:	3a 94       	dec	r3
    2a12:	f4 cf       	rjmp	.-24     	; 0x29fc <vfprintf+0x19c>
    2a14:	f5 01       	movw	r30, r10
    2a16:	27 fc       	sbrc	r2, 7
    2a18:	85 91       	lpm	r24, Z+
    2a1a:	27 fe       	sbrs	r2, 7
    2a1c:	81 91       	ld	r24, Z+
    2a1e:	5f 01       	movw	r10, r30
    2a20:	b7 01       	movw	r22, r14
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2a28:	31 10       	cpse	r3, r1
    2a2a:	3a 94       	dec	r3
    2a2c:	f1 e0       	ldi	r31, 0x01	; 1
    2a2e:	4f 1a       	sub	r4, r31
    2a30:	51 08       	sbc	r5, r1
    2a32:	41 14       	cp	r4, r1
    2a34:	51 04       	cpc	r5, r1
    2a36:	71 f7       	brne	.-36     	; 0x2a14 <vfprintf+0x1b4>
    2a38:	e5 c0       	rjmp	.+458    	; 0x2c04 <vfprintf+0x3a4>
    2a3a:	84 36       	cpi	r24, 0x64	; 100
    2a3c:	11 f0       	breq	.+4      	; 0x2a42 <vfprintf+0x1e2>
    2a3e:	89 36       	cpi	r24, 0x69	; 105
    2a40:	39 f5       	brne	.+78     	; 0x2a90 <vfprintf+0x230>
    2a42:	f8 01       	movw	r30, r16
    2a44:	27 ff       	sbrs	r18, 7
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <vfprintf+0x1f6>
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	0c 5f       	subi	r16, 0xFC	; 252
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	08 c0       	rjmp	.+16     	; 0x2a66 <vfprintf+0x206>
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	07 2e       	mov	r0, r23
    2a5c:	00 0c       	add	r0, r0
    2a5e:	88 0b       	sbc	r24, r24
    2a60:	99 0b       	sbc	r25, r25
    2a62:	0e 5f       	subi	r16, 0xFE	; 254
    2a64:	1f 4f       	sbci	r17, 0xFF	; 255
    2a66:	2f 76       	andi	r18, 0x6F	; 111
    2a68:	72 2e       	mov	r7, r18
    2a6a:	97 ff       	sbrs	r25, 7
    2a6c:	09 c0       	rjmp	.+18     	; 0x2a80 <vfprintf+0x220>
    2a6e:	90 95       	com	r25
    2a70:	80 95       	com	r24
    2a72:	70 95       	com	r23
    2a74:	61 95       	neg	r22
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	8f 4f       	sbci	r24, 0xFF	; 255
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	20 68       	ori	r18, 0x80	; 128
    2a7e:	72 2e       	mov	r7, r18
    2a80:	2a e0       	ldi	r18, 0x0A	; 10
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	a4 01       	movw	r20, r8
    2a86:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__ultoa_invert>
    2a8a:	a8 2e       	mov	r10, r24
    2a8c:	a8 18       	sub	r10, r8
    2a8e:	44 c0       	rjmp	.+136    	; 0x2b18 <vfprintf+0x2b8>
    2a90:	85 37       	cpi	r24, 0x75	; 117
    2a92:	29 f4       	brne	.+10     	; 0x2a9e <vfprintf+0x23e>
    2a94:	2f 7e       	andi	r18, 0xEF	; 239
    2a96:	b2 2e       	mov	r11, r18
    2a98:	2a e0       	ldi	r18, 0x0A	; 10
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	25 c0       	rjmp	.+74     	; 0x2ae8 <vfprintf+0x288>
    2a9e:	f2 2f       	mov	r31, r18
    2aa0:	f9 7f       	andi	r31, 0xF9	; 249
    2aa2:	bf 2e       	mov	r11, r31
    2aa4:	8f 36       	cpi	r24, 0x6F	; 111
    2aa6:	c1 f0       	breq	.+48     	; 0x2ad8 <vfprintf+0x278>
    2aa8:	18 f4       	brcc	.+6      	; 0x2ab0 <vfprintf+0x250>
    2aaa:	88 35       	cpi	r24, 0x58	; 88
    2aac:	79 f0       	breq	.+30     	; 0x2acc <vfprintf+0x26c>
    2aae:	b4 c0       	rjmp	.+360    	; 0x2c18 <vfprintf+0x3b8>
    2ab0:	80 37       	cpi	r24, 0x70	; 112
    2ab2:	19 f0       	breq	.+6      	; 0x2aba <vfprintf+0x25a>
    2ab4:	88 37       	cpi	r24, 0x78	; 120
    2ab6:	21 f0       	breq	.+8      	; 0x2ac0 <vfprintf+0x260>
    2ab8:	af c0       	rjmp	.+350    	; 0x2c18 <vfprintf+0x3b8>
    2aba:	2f 2f       	mov	r18, r31
    2abc:	20 61       	ori	r18, 0x10	; 16
    2abe:	b2 2e       	mov	r11, r18
    2ac0:	b4 fe       	sbrs	r11, 4
    2ac2:	0d c0       	rjmp	.+26     	; 0x2ade <vfprintf+0x27e>
    2ac4:	8b 2d       	mov	r24, r11
    2ac6:	84 60       	ori	r24, 0x04	; 4
    2ac8:	b8 2e       	mov	r11, r24
    2aca:	09 c0       	rjmp	.+18     	; 0x2ade <vfprintf+0x27e>
    2acc:	24 ff       	sbrs	r18, 4
    2ace:	0a c0       	rjmp	.+20     	; 0x2ae4 <vfprintf+0x284>
    2ad0:	9f 2f       	mov	r25, r31
    2ad2:	96 60       	ori	r25, 0x06	; 6
    2ad4:	b9 2e       	mov	r11, r25
    2ad6:	06 c0       	rjmp	.+12     	; 0x2ae4 <vfprintf+0x284>
    2ad8:	28 e0       	ldi	r18, 0x08	; 8
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	05 c0       	rjmp	.+10     	; 0x2ae8 <vfprintf+0x288>
    2ade:	20 e1       	ldi	r18, 0x10	; 16
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <vfprintf+0x288>
    2ae4:	20 e1       	ldi	r18, 0x10	; 16
    2ae6:	32 e0       	ldi	r19, 0x02	; 2
    2ae8:	f8 01       	movw	r30, r16
    2aea:	b7 fe       	sbrs	r11, 7
    2aec:	07 c0       	rjmp	.+14     	; 0x2afc <vfprintf+0x29c>
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	0c 5f       	subi	r16, 0xFC	; 252
    2af8:	1f 4f       	sbci	r17, 0xFF	; 255
    2afa:	06 c0       	rjmp	.+12     	; 0x2b08 <vfprintf+0x2a8>
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 5f       	subi	r16, 0xFE	; 254
    2b06:	1f 4f       	sbci	r17, 0xFF	; 255
    2b08:	a4 01       	movw	r20, r8
    2b0a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__ultoa_invert>
    2b0e:	a8 2e       	mov	r10, r24
    2b10:	a8 18       	sub	r10, r8
    2b12:	fb 2d       	mov	r31, r11
    2b14:	ff 77       	andi	r31, 0x7F	; 127
    2b16:	7f 2e       	mov	r7, r31
    2b18:	76 fe       	sbrs	r7, 6
    2b1a:	0b c0       	rjmp	.+22     	; 0x2b32 <vfprintf+0x2d2>
    2b1c:	37 2d       	mov	r19, r7
    2b1e:	3e 7f       	andi	r19, 0xFE	; 254
    2b20:	a5 14       	cp	r10, r5
    2b22:	50 f4       	brcc	.+20     	; 0x2b38 <vfprintf+0x2d8>
    2b24:	74 fe       	sbrs	r7, 4
    2b26:	0a c0       	rjmp	.+20     	; 0x2b3c <vfprintf+0x2dc>
    2b28:	72 fc       	sbrc	r7, 2
    2b2a:	08 c0       	rjmp	.+16     	; 0x2b3c <vfprintf+0x2dc>
    2b2c:	37 2d       	mov	r19, r7
    2b2e:	3e 7e       	andi	r19, 0xEE	; 238
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <vfprintf+0x2dc>
    2b32:	ba 2c       	mov	r11, r10
    2b34:	37 2d       	mov	r19, r7
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <vfprintf+0x2de>
    2b38:	ba 2c       	mov	r11, r10
    2b3a:	01 c0       	rjmp	.+2      	; 0x2b3e <vfprintf+0x2de>
    2b3c:	b5 2c       	mov	r11, r5
    2b3e:	34 ff       	sbrs	r19, 4
    2b40:	0d c0       	rjmp	.+26     	; 0x2b5c <vfprintf+0x2fc>
    2b42:	fe 01       	movw	r30, r28
    2b44:	ea 0d       	add	r30, r10
    2b46:	f1 1d       	adc	r31, r1
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 33       	cpi	r24, 0x30	; 48
    2b4c:	11 f4       	brne	.+4      	; 0x2b52 <vfprintf+0x2f2>
    2b4e:	39 7e       	andi	r19, 0xE9	; 233
    2b50:	09 c0       	rjmp	.+18     	; 0x2b64 <vfprintf+0x304>
    2b52:	32 ff       	sbrs	r19, 2
    2b54:	06 c0       	rjmp	.+12     	; 0x2b62 <vfprintf+0x302>
    2b56:	b3 94       	inc	r11
    2b58:	b3 94       	inc	r11
    2b5a:	04 c0       	rjmp	.+8      	; 0x2b64 <vfprintf+0x304>
    2b5c:	83 2f       	mov	r24, r19
    2b5e:	86 78       	andi	r24, 0x86	; 134
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <vfprintf+0x304>
    2b62:	b3 94       	inc	r11
    2b64:	33 fd       	sbrc	r19, 3
    2b66:	13 c0       	rjmp	.+38     	; 0x2b8e <vfprintf+0x32e>
    2b68:	30 ff       	sbrs	r19, 0
    2b6a:	06 c0       	rjmp	.+12     	; 0x2b78 <vfprintf+0x318>
    2b6c:	5a 2c       	mov	r5, r10
    2b6e:	b3 14       	cp	r11, r3
    2b70:	18 f4       	brcc	.+6      	; 0x2b78 <vfprintf+0x318>
    2b72:	53 0c       	add	r5, r3
    2b74:	5b 18       	sub	r5, r11
    2b76:	b3 2c       	mov	r11, r3
    2b78:	b3 14       	cp	r11, r3
    2b7a:	68 f4       	brcc	.+26     	; 0x2b96 <vfprintf+0x336>
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	3c 87       	std	Y+12, r19	; 0x0c
    2b84:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2b88:	b3 94       	inc	r11
    2b8a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b8c:	f5 cf       	rjmp	.-22     	; 0x2b78 <vfprintf+0x318>
    2b8e:	b3 14       	cp	r11, r3
    2b90:	10 f4       	brcc	.+4      	; 0x2b96 <vfprintf+0x336>
    2b92:	3b 18       	sub	r3, r11
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <vfprintf+0x338>
    2b96:	31 2c       	mov	r3, r1
    2b98:	34 ff       	sbrs	r19, 4
    2b9a:	12 c0       	rjmp	.+36     	; 0x2bc0 <vfprintf+0x360>
    2b9c:	b7 01       	movw	r22, r14
    2b9e:	80 e3       	ldi	r24, 0x30	; 48
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	3c 87       	std	Y+12, r19	; 0x0c
    2ba4:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2ba8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2baa:	32 ff       	sbrs	r19, 2
    2bac:	17 c0       	rjmp	.+46     	; 0x2bdc <vfprintf+0x37c>
    2bae:	31 fd       	sbrc	r19, 1
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <vfprintf+0x358>
    2bb2:	88 e7       	ldi	r24, 0x78	; 120
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <vfprintf+0x35c>
    2bb8:	88 e5       	ldi	r24, 0x58	; 88
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	b7 01       	movw	r22, r14
    2bbe:	0c c0       	rjmp	.+24     	; 0x2bd8 <vfprintf+0x378>
    2bc0:	83 2f       	mov	r24, r19
    2bc2:	86 78       	andi	r24, 0x86	; 134
    2bc4:	59 f0       	breq	.+22     	; 0x2bdc <vfprintf+0x37c>
    2bc6:	31 ff       	sbrs	r19, 1
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <vfprintf+0x36e>
    2bca:	8b e2       	ldi	r24, 0x2B	; 43
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <vfprintf+0x370>
    2bce:	80 e2       	ldi	r24, 0x20	; 32
    2bd0:	37 fd       	sbrc	r19, 7
    2bd2:	8d e2       	ldi	r24, 0x2D	; 45
    2bd4:	b7 01       	movw	r22, r14
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2bdc:	a5 14       	cp	r10, r5
    2bde:	38 f4       	brcc	.+14     	; 0x2bee <vfprintf+0x38e>
    2be0:	b7 01       	movw	r22, r14
    2be2:	80 e3       	ldi	r24, 0x30	; 48
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2bea:	5a 94       	dec	r5
    2bec:	f7 cf       	rjmp	.-18     	; 0x2bdc <vfprintf+0x37c>
    2bee:	aa 94       	dec	r10
    2bf0:	f4 01       	movw	r30, r8
    2bf2:	ea 0d       	add	r30, r10
    2bf4:	f1 1d       	adc	r31, r1
    2bf6:	80 81       	ld	r24, Z
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2c00:	a1 10       	cpse	r10, r1
    2c02:	f5 cf       	rjmp	.-22     	; 0x2bee <vfprintf+0x38e>
    2c04:	33 20       	and	r3, r3
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <vfprintf+0x3aa>
    2c08:	51 ce       	rjmp	.-862    	; 0x28ac <vfprintf+0x4c>
    2c0a:	b7 01       	movw	r22, r14
    2c0c:	80 e2       	ldi	r24, 0x20	; 32
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 41 16 	call	0x2c82	; 0x2c82 <fputc>
    2c14:	3a 94       	dec	r3
    2c16:	f6 cf       	rjmp	.-20     	; 0x2c04 <vfprintf+0x3a4>
    2c18:	f7 01       	movw	r30, r14
    2c1a:	86 81       	ldd	r24, Z+6	; 0x06
    2c1c:	97 81       	ldd	r25, Z+7	; 0x07
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <vfprintf+0x3c4>
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	9f ef       	ldi	r25, 0xFF	; 255
    2c24:	2c 96       	adiw	r28, 0x0c	; 12
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	bf 90       	pop	r11
    2c42:	af 90       	pop	r10
    2c44:	9f 90       	pop	r9
    2c46:	8f 90       	pop	r8
    2c48:	7f 90       	pop	r7
    2c4a:	6f 90       	pop	r6
    2c4c:	5f 90       	pop	r5
    2c4e:	4f 90       	pop	r4
    2c50:	3f 90       	pop	r3
    2c52:	2f 90       	pop	r2
    2c54:	08 95       	ret

00002c56 <strnlen_P>:
    2c56:	fc 01       	movw	r30, r24
    2c58:	05 90       	lpm	r0, Z+
    2c5a:	61 50       	subi	r22, 0x01	; 1
    2c5c:	70 40       	sbci	r23, 0x00	; 0
    2c5e:	01 10       	cpse	r0, r1
    2c60:	d8 f7       	brcc	.-10     	; 0x2c58 <strnlen_P+0x2>
    2c62:	80 95       	com	r24
    2c64:	90 95       	com	r25
    2c66:	8e 0f       	add	r24, r30
    2c68:	9f 1f       	adc	r25, r31
    2c6a:	08 95       	ret

00002c6c <strnlen>:
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	61 50       	subi	r22, 0x01	; 1
    2c70:	70 40       	sbci	r23, 0x00	; 0
    2c72:	01 90       	ld	r0, Z+
    2c74:	01 10       	cpse	r0, r1
    2c76:	d8 f7       	brcc	.-10     	; 0x2c6e <strnlen+0x2>
    2c78:	80 95       	com	r24
    2c7a:	90 95       	com	r25
    2c7c:	8e 0f       	add	r24, r30
    2c7e:	9f 1f       	adc	r25, r31
    2c80:	08 95       	ret

00002c82 <fputc>:
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	fb 01       	movw	r30, r22
    2c8c:	23 81       	ldd	r18, Z+3	; 0x03
    2c8e:	21 fd       	sbrc	r18, 1
    2c90:	03 c0       	rjmp	.+6      	; 0x2c98 <fputc+0x16>
    2c92:	8f ef       	ldi	r24, 0xFF	; 255
    2c94:	9f ef       	ldi	r25, 0xFF	; 255
    2c96:	28 c0       	rjmp	.+80     	; 0x2ce8 <fputc+0x66>
    2c98:	22 ff       	sbrs	r18, 2
    2c9a:	16 c0       	rjmp	.+44     	; 0x2cc8 <fputc+0x46>
    2c9c:	46 81       	ldd	r20, Z+6	; 0x06
    2c9e:	57 81       	ldd	r21, Z+7	; 0x07
    2ca0:	24 81       	ldd	r18, Z+4	; 0x04
    2ca2:	35 81       	ldd	r19, Z+5	; 0x05
    2ca4:	42 17       	cp	r20, r18
    2ca6:	53 07       	cpc	r21, r19
    2ca8:	44 f4       	brge	.+16     	; 0x2cba <fputc+0x38>
    2caa:	a0 81       	ld	r26, Z
    2cac:	b1 81       	ldd	r27, Z+1	; 0x01
    2cae:	9d 01       	movw	r18, r26
    2cb0:	2f 5f       	subi	r18, 0xFF	; 255
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	31 83       	std	Z+1, r19	; 0x01
    2cb6:	20 83       	st	Z, r18
    2cb8:	8c 93       	st	X, r24
    2cba:	26 81       	ldd	r18, Z+6	; 0x06
    2cbc:	37 81       	ldd	r19, Z+7	; 0x07
    2cbe:	2f 5f       	subi	r18, 0xFF	; 255
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	37 83       	std	Z+7, r19	; 0x07
    2cc4:	26 83       	std	Z+6, r18	; 0x06
    2cc6:	10 c0       	rjmp	.+32     	; 0x2ce8 <fputc+0x66>
    2cc8:	eb 01       	movw	r28, r22
    2cca:	09 2f       	mov	r16, r25
    2ccc:	18 2f       	mov	r17, r24
    2cce:	00 84       	ldd	r0, Z+8	; 0x08
    2cd0:	f1 85       	ldd	r31, Z+9	; 0x09
    2cd2:	e0 2d       	mov	r30, r0
    2cd4:	09 95       	icall
    2cd6:	89 2b       	or	r24, r25
    2cd8:	e1 f6       	brne	.-72     	; 0x2c92 <fputc+0x10>
    2cda:	8e 81       	ldd	r24, Y+6	; 0x06
    2cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	9f 83       	std	Y+7, r25	; 0x07
    2ce2:	8e 83       	std	Y+6, r24	; 0x06
    2ce4:	81 2f       	mov	r24, r17
    2ce6:	90 2f       	mov	r25, r16
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	08 95       	ret

00002cf2 <__ultoa_invert>:
    2cf2:	fa 01       	movw	r30, r20
    2cf4:	aa 27       	eor	r26, r26
    2cf6:	28 30       	cpi	r18, 0x08	; 8
    2cf8:	51 f1       	breq	.+84     	; 0x2d4e <__ultoa_invert+0x5c>
    2cfa:	20 31       	cpi	r18, 0x10	; 16
    2cfc:	81 f1       	breq	.+96     	; 0x2d5e <__ultoa_invert+0x6c>
    2cfe:	e8 94       	clt
    2d00:	6f 93       	push	r22
    2d02:	6e 7f       	andi	r22, 0xFE	; 254
    2d04:	6e 5f       	subi	r22, 0xFE	; 254
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	af 4f       	sbci	r26, 0xFF	; 255
    2d0e:	b1 e0       	ldi	r27, 0x01	; 1
    2d10:	3e d0       	rcall	.+124    	; 0x2d8e <__ultoa_invert+0x9c>
    2d12:	b4 e0       	ldi	r27, 0x04	; 4
    2d14:	3c d0       	rcall	.+120    	; 0x2d8e <__ultoa_invert+0x9c>
    2d16:	67 0f       	add	r22, r23
    2d18:	78 1f       	adc	r23, r24
    2d1a:	89 1f       	adc	r24, r25
    2d1c:	9a 1f       	adc	r25, r26
    2d1e:	a1 1d       	adc	r26, r1
    2d20:	68 0f       	add	r22, r24
    2d22:	79 1f       	adc	r23, r25
    2d24:	8a 1f       	adc	r24, r26
    2d26:	91 1d       	adc	r25, r1
    2d28:	a1 1d       	adc	r26, r1
    2d2a:	6a 0f       	add	r22, r26
    2d2c:	71 1d       	adc	r23, r1
    2d2e:	81 1d       	adc	r24, r1
    2d30:	91 1d       	adc	r25, r1
    2d32:	a1 1d       	adc	r26, r1
    2d34:	20 d0       	rcall	.+64     	; 0x2d76 <__ultoa_invert+0x84>
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <__ultoa_invert+0x48>
    2d38:	68 94       	set
    2d3a:	3f 91       	pop	r19
    2d3c:	2a e0       	ldi	r18, 0x0A	; 10
    2d3e:	26 9f       	mul	r18, r22
    2d40:	11 24       	eor	r1, r1
    2d42:	30 19       	sub	r19, r0
    2d44:	30 5d       	subi	r19, 0xD0	; 208
    2d46:	31 93       	st	Z+, r19
    2d48:	de f6       	brtc	.-74     	; 0x2d00 <__ultoa_invert+0xe>
    2d4a:	cf 01       	movw	r24, r30
    2d4c:	08 95       	ret
    2d4e:	46 2f       	mov	r20, r22
    2d50:	47 70       	andi	r20, 0x07	; 7
    2d52:	40 5d       	subi	r20, 0xD0	; 208
    2d54:	41 93       	st	Z+, r20
    2d56:	b3 e0       	ldi	r27, 0x03	; 3
    2d58:	0f d0       	rcall	.+30     	; 0x2d78 <__ultoa_invert+0x86>
    2d5a:	c9 f7       	brne	.-14     	; 0x2d4e <__ultoa_invert+0x5c>
    2d5c:	f6 cf       	rjmp	.-20     	; 0x2d4a <__ultoa_invert+0x58>
    2d5e:	46 2f       	mov	r20, r22
    2d60:	4f 70       	andi	r20, 0x0F	; 15
    2d62:	40 5d       	subi	r20, 0xD0	; 208
    2d64:	4a 33       	cpi	r20, 0x3A	; 58
    2d66:	18 f0       	brcs	.+6      	; 0x2d6e <__ultoa_invert+0x7c>
    2d68:	49 5d       	subi	r20, 0xD9	; 217
    2d6a:	31 fd       	sbrc	r19, 1
    2d6c:	40 52       	subi	r20, 0x20	; 32
    2d6e:	41 93       	st	Z+, r20
    2d70:	02 d0       	rcall	.+4      	; 0x2d76 <__ultoa_invert+0x84>
    2d72:	a9 f7       	brne	.-22     	; 0x2d5e <__ultoa_invert+0x6c>
    2d74:	ea cf       	rjmp	.-44     	; 0x2d4a <__ultoa_invert+0x58>
    2d76:	b4 e0       	ldi	r27, 0x04	; 4
    2d78:	a6 95       	lsr	r26
    2d7a:	97 95       	ror	r25
    2d7c:	87 95       	ror	r24
    2d7e:	77 95       	ror	r23
    2d80:	67 95       	ror	r22
    2d82:	ba 95       	dec	r27
    2d84:	c9 f7       	brne	.-14     	; 0x2d78 <__ultoa_invert+0x86>
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	61 05       	cpc	r22, r1
    2d8a:	71 05       	cpc	r23, r1
    2d8c:	08 95       	ret
    2d8e:	9b 01       	movw	r18, r22
    2d90:	ac 01       	movw	r20, r24
    2d92:	0a 2e       	mov	r0, r26
    2d94:	06 94       	lsr	r0
    2d96:	57 95       	ror	r21
    2d98:	47 95       	ror	r20
    2d9a:	37 95       	ror	r19
    2d9c:	27 95       	ror	r18
    2d9e:	ba 95       	dec	r27
    2da0:	c9 f7       	brne	.-14     	; 0x2d94 <__ultoa_invert+0xa2>
    2da2:	62 0f       	add	r22, r18
    2da4:	73 1f       	adc	r23, r19
    2da6:	84 1f       	adc	r24, r20
    2da8:	95 1f       	adc	r25, r21
    2daa:	a0 1d       	adc	r26, r0
    2dac:	08 95       	ret

00002dae <_exit>:
    2dae:	f8 94       	cli

00002db0 <__stop_program>:
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <__stop_program>
