
5_multitasking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000be6  00000c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001452  00800208  00800208  00000c82  2**0
                  ALLOC
  3 .stab         00001cf8  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000047a1  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0000711d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007150  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
   8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
   c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  44:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_17>
  48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  68:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  a8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  ac:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  cc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  d0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  d4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  d8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  dc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  e0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  e4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  e8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  ec:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  f0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  f4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  f8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  fc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 100:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 104:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 108:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 10c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 110:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 114:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 118:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
 11c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf ef       	ldi	r28, 0xFF	; 255
 126:	d1 e4       	ldi	r29, 0x41	; 65
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
 12c:	12 e0       	ldi	r17, 0x02	; 2
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b2 e0       	ldi	r27, 0x02	; 2
 132:	e6 ee       	ldi	r30, 0xE6	; 230
 134:	fb e0       	ldi	r31, 0x0B	; 11
 136:	00 e0       	ldi	r16, 0x00	; 0
 138:	0b bf       	out	0x3b, r16	; 59
 13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
 13c:	07 90       	elpm	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	a8 30       	cpi	r26, 0x08	; 8
 142:	b1 07       	cpc	r27, r17
 144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
 146:	26 e1       	ldi	r18, 0x16	; 22
 148:	a8 e0       	ldi	r26, 0x08	; 8
 14a:	b2 e0       	ldi	r27, 0x02	; 2
 14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
 14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
 150:	aa 35       	cpi	r26, 0x5A	; 90
 152:	b2 07       	cpc	r27, r18
 154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
 156:	0e 94 34 02 	call	0x468	; 0x468 <main>
 15a:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <_exit>

0000015e <__bad_interrupt>:
 15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <taskA>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	2e 97       	sbiw	r28, 0x0e	; 14
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	0e 94 0d 04 	call	0x81a	; 0x81a <led_redInit>
 17a:	0e 94 1f 04 	call	0x83e	; 0x83e <led_redToggle>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	aa e7       	ldi	r26, 0x7A	; 122
 184:	b4 e4       	ldi	r27, 0x44	; 68
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	ab 83       	std	Y+3, r26	; 0x03
 18c:	bc 83       	std	Y+4, r27	; 0x04
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	4a e7       	ldi	r20, 0x7A	; 122
 194:	55 e4       	ldi	r21, 0x45	; 69
 196:	69 81       	ldd	r22, Y+1	; 0x01
 198:	7a 81       	ldd	r23, Y+2	; 0x02
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	0e 94 5c 05 	call	0xab8	; 0xab8 <__mulsf3>
 1a2:	dc 01       	movw	r26, r24
 1a4:	cb 01       	movw	r24, r22
 1a6:	8d 83       	std	Y+5, r24	; 0x05
 1a8:	9e 83       	std	Y+6, r25	; 0x06
 1aa:	af 83       	std	Y+7, r26	; 0x07
 1ac:	b8 87       	std	Y+8, r27	; 0x08
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e8       	ldi	r20, 0x80	; 128
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	6d 81       	ldd	r22, Y+5	; 0x05
 1b8:	7e 81       	ldd	r23, Y+6	; 0x06
 1ba:	8f 81       	ldd	r24, Y+7	; 0x07
 1bc:	98 85       	ldd	r25, Y+8	; 0x08
 1be:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__cmpsf2>
 1c2:	88 23       	and	r24, r24
 1c4:	2c f4       	brge	.+10     	; 0x1d0 <taskA+0x6e>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9a 87       	std	Y+10, r25	; 0x0a
 1cc:	89 87       	std	Y+9, r24	; 0x09
 1ce:	3f c0       	rjmp	.+126    	; 0x24e <taskA+0xec>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	3f ef       	ldi	r19, 0xFF	; 255
 1d4:	4f e7       	ldi	r20, 0x7F	; 127
 1d6:	57 e4       	ldi	r21, 0x47	; 71
 1d8:	6d 81       	ldd	r22, Y+5	; 0x05
 1da:	7e 81       	ldd	r23, Y+6	; 0x06
 1dc:	8f 81       	ldd	r24, Y+7	; 0x07
 1de:	98 85       	ldd	r25, Y+8	; 0x08
 1e0:	0e 94 57 05 	call	0xaae	; 0xaae <__gesf2>
 1e4:	18 16       	cp	r1, r24
 1e6:	4c f5       	brge	.+82     	; 0x23a <taskA+0xd8>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e2       	ldi	r20, 0x20	; 32
 1ee:	51 e4       	ldi	r21, 0x41	; 65
 1f0:	69 81       	ldd	r22, Y+1	; 0x01
 1f2:	7a 81       	ldd	r23, Y+2	; 0x02
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	0e 94 5c 05 	call	0xab8	; 0xab8 <__mulsf3>
 1fc:	dc 01       	movw	r26, r24
 1fe:	cb 01       	movw	r24, r22
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixunssfsi>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	9a 87       	std	Y+10, r25	; 0x0a
 20e:	89 87       	std	Y+9, r24	; 0x09
 210:	0f c0       	rjmp	.+30     	; 0x230 <taskA+0xce>
 212:	80 e9       	ldi	r24, 0x90	; 144
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	9c 87       	std	Y+12, r25	; 0x0c
 218:	8b 87       	std	Y+11, r24	; 0x0b
 21a:	8b 85       	ldd	r24, Y+11	; 0x0b
 21c:	9c 85       	ldd	r25, Y+12	; 0x0c
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <taskA+0xbc>
 222:	9c 87       	std	Y+12, r25	; 0x0c
 224:	8b 87       	std	Y+11, r24	; 0x0b
 226:	89 85       	ldd	r24, Y+9	; 0x09
 228:	9a 85       	ldd	r25, Y+10	; 0x0a
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	9a 87       	std	Y+10, r25	; 0x0a
 22e:	89 87       	std	Y+9, r24	; 0x09
 230:	89 85       	ldd	r24, Y+9	; 0x09
 232:	9a 85       	ldd	r25, Y+10	; 0x0a
 234:	89 2b       	or	r24, r25
 236:	69 f7       	brne	.-38     	; 0x212 <taskA+0xb0>
 238:	14 c0       	rjmp	.+40     	; 0x262 <taskA+0x100>
 23a:	6d 81       	ldd	r22, Y+5	; 0x05
 23c:	7e 81       	ldd	r23, Y+6	; 0x06
 23e:	8f 81       	ldd	r24, Y+7	; 0x07
 240:	98 85       	ldd	r25, Y+8	; 0x08
 242:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixunssfsi>
 246:	dc 01       	movw	r26, r24
 248:	cb 01       	movw	r24, r22
 24a:	9a 87       	std	Y+10, r25	; 0x0a
 24c:	89 87       	std	Y+9, r24	; 0x09
 24e:	89 85       	ldd	r24, Y+9	; 0x09
 250:	9a 85       	ldd	r25, Y+10	; 0x0a
 252:	9e 87       	std	Y+14, r25	; 0x0e
 254:	8d 87       	std	Y+13, r24	; 0x0d
 256:	8d 85       	ldd	r24, Y+13	; 0x0d
 258:	9e 85       	ldd	r25, Y+14	; 0x0e
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <taskA+0xf8>
 25e:	9e 87       	std	Y+14, r25	; 0x0e
 260:	8d 87       	std	Y+13, r24	; 0x0d
 262:	8b cf       	rjmp	.-234    	; 0x17a <taskA+0x18>

00000264 <taskB>:
	while (1) {
		led_redToggle();
		_delay_ms(1000);
	}
}
void taskB(void) {
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	2e 97       	sbiw	r28, 0x0e	; 14
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61

	led_yellowInit();
 278:	0e 94 50 04 	call	0x8a0	; 0x8a0 <led_yellowInit>

	while (1) {
		led_yellowToggle();
 27c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <led_yellowToggle>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	aa ef       	ldi	r26, 0xFA	; 250
 286:	b4 e4       	ldi	r27, 0x44	; 68
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	ab 83       	std	Y+3, r26	; 0x03
 28e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	4a e7       	ldi	r20, 0x7A	; 122
 296:	55 e4       	ldi	r21, 0x45	; 69
 298:	69 81       	ldd	r22, Y+1	; 0x01
 29a:	7a 81       	ldd	r23, Y+2	; 0x02
 29c:	8b 81       	ldd	r24, Y+3	; 0x03
 29e:	9c 81       	ldd	r25, Y+4	; 0x04
 2a0:	0e 94 5c 05 	call	0xab8	; 0xab8 <__mulsf3>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	8d 83       	std	Y+5, r24	; 0x05
 2aa:	9e 83       	std	Y+6, r25	; 0x06
 2ac:	af 83       	std	Y+7, r26	; 0x07
 2ae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e8       	ldi	r20, 0x80	; 128
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ba:	7e 81       	ldd	r23, Y+6	; 0x06
 2bc:	8f 81       	ldd	r24, Y+7	; 0x07
 2be:	98 85       	ldd	r25, Y+8	; 0x08
 2c0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__cmpsf2>
 2c4:	88 23       	and	r24, r24
 2c6:	2c f4       	brge	.+10     	; 0x2d2 <taskB+0x6e>
		__ticks = 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	9a 87       	std	Y+10, r25	; 0x0a
 2ce:	89 87       	std	Y+9, r24	; 0x09
 2d0:	3f c0       	rjmp	.+126    	; 0x350 <taskB+0xec>
	else if (__tmp > 65535)
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	3f ef       	ldi	r19, 0xFF	; 255
 2d6:	4f e7       	ldi	r20, 0x7F	; 127
 2d8:	57 e4       	ldi	r21, 0x47	; 71
 2da:	6d 81       	ldd	r22, Y+5	; 0x05
 2dc:	7e 81       	ldd	r23, Y+6	; 0x06
 2de:	8f 81       	ldd	r24, Y+7	; 0x07
 2e0:	98 85       	ldd	r25, Y+8	; 0x08
 2e2:	0e 94 57 05 	call	0xaae	; 0xaae <__gesf2>
 2e6:	18 16       	cp	r1, r24
 2e8:	4c f5       	brge	.+82     	; 0x33c <taskB+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 e2       	ldi	r20, 0x20	; 32
 2f0:	51 e4       	ldi	r21, 0x41	; 65
 2f2:	69 81       	ldd	r22, Y+1	; 0x01
 2f4:	7a 81       	ldd	r23, Y+2	; 0x02
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	9c 81       	ldd	r25, Y+4	; 0x04
 2fa:	0e 94 5c 05 	call	0xab8	; 0xab8 <__mulsf3>
 2fe:	dc 01       	movw	r26, r24
 300:	cb 01       	movw	r24, r22
 302:	bc 01       	movw	r22, r24
 304:	cd 01       	movw	r24, r26
 306:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixunssfsi>
 30a:	dc 01       	movw	r26, r24
 30c:	cb 01       	movw	r24, r22
 30e:	9a 87       	std	Y+10, r25	; 0x0a
 310:	89 87       	std	Y+9, r24	; 0x09
 312:	0f c0       	rjmp	.+30     	; 0x332 <taskB+0xce>
 314:	80 e9       	ldi	r24, 0x90	; 144
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	9c 87       	std	Y+12, r25	; 0x0c
 31a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 31c:	8b 85       	ldd	r24, Y+11	; 0x0b
 31e:	9c 85       	ldd	r25, Y+12	; 0x0c
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <taskB+0xbc>
 324:	9c 87       	std	Y+12, r25	; 0x0c
 326:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 328:	89 85       	ldd	r24, Y+9	; 0x09
 32a:	9a 85       	ldd	r25, Y+10	; 0x0a
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	9a 87       	std	Y+10, r25	; 0x0a
 330:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 332:	89 85       	ldd	r24, Y+9	; 0x09
 334:	9a 85       	ldd	r25, Y+10	; 0x0a
 336:	89 2b       	or	r24, r25
 338:	69 f7       	brne	.-38     	; 0x314 <taskB+0xb0>
 33a:	14 c0       	rjmp	.+40     	; 0x364 <taskB+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 33c:	6d 81       	ldd	r22, Y+5	; 0x05
 33e:	7e 81       	ldd	r23, Y+6	; 0x06
 340:	8f 81       	ldd	r24, Y+7	; 0x07
 342:	98 85       	ldd	r25, Y+8	; 0x08
 344:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixunssfsi>
 348:	dc 01       	movw	r26, r24
 34a:	cb 01       	movw	r24, r22
 34c:	9a 87       	std	Y+10, r25	; 0x0a
 34e:	89 87       	std	Y+9, r24	; 0x09
 350:	89 85       	ldd	r24, Y+9	; 0x09
 352:	9a 85       	ldd	r25, Y+10	; 0x0a
 354:	9e 87       	std	Y+14, r25	; 0x0e
 356:	8d 87       	std	Y+13, r24	; 0x0d
 358:	8d 85       	ldd	r24, Y+13	; 0x0d
 35a:	9e 85       	ldd	r25, Y+14	; 0x0e
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <taskB+0xf8>
 360:	9e 87       	std	Y+14, r25	; 0x0e
 362:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(2000);
	}
 364:	8b cf       	rjmp	.-234    	; 0x27c <taskB+0x18>

00000366 <taskC>:
}
void taskC(void) {
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	2e 97       	sbiw	r28, 0x0e	; 14
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61

	led_greenInit();
 37a:	0e 94 93 04 	call	0x926	; 0x926 <led_greenInit>

	while (1) {
		led_greenToggle();
 37e:	0e 94 a5 04 	call	0x94a	; 0x94a <led_greenToggle>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e8       	ldi	r25, 0x80	; 128
 386:	ab e3       	ldi	r26, 0x3B	; 59
 388:	b5 e4       	ldi	r27, 0x45	; 69
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	9a 83       	std	Y+2, r25	; 0x02
 38e:	ab 83       	std	Y+3, r26	; 0x03
 390:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	4a e7       	ldi	r20, 0x7A	; 122
 398:	55 e4       	ldi	r21, 0x45	; 69
 39a:	69 81       	ldd	r22, Y+1	; 0x01
 39c:	7a 81       	ldd	r23, Y+2	; 0x02
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	9c 81       	ldd	r25, Y+4	; 0x04
 3a2:	0e 94 5c 05 	call	0xab8	; 0xab8 <__mulsf3>
 3a6:	dc 01       	movw	r26, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	8d 83       	std	Y+5, r24	; 0x05
 3ac:	9e 83       	std	Y+6, r25	; 0x06
 3ae:	af 83       	std	Y+7, r26	; 0x07
 3b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	40 e8       	ldi	r20, 0x80	; 128
 3b8:	5f e3       	ldi	r21, 0x3F	; 63
 3ba:	6d 81       	ldd	r22, Y+5	; 0x05
 3bc:	7e 81       	ldd	r23, Y+6	; 0x06
 3be:	8f 81       	ldd	r24, Y+7	; 0x07
 3c0:	98 85       	ldd	r25, Y+8	; 0x08
 3c2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__cmpsf2>
 3c6:	88 23       	and	r24, r24
 3c8:	2c f4       	brge	.+10     	; 0x3d4 <taskC+0x6e>
		__ticks = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	9a 87       	std	Y+10, r25	; 0x0a
 3d0:	89 87       	std	Y+9, r24	; 0x09
 3d2:	3f c0       	rjmp	.+126    	; 0x452 <taskC+0xec>
	else if (__tmp > 65535)
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	3f ef       	ldi	r19, 0xFF	; 255
 3d8:	4f e7       	ldi	r20, 0x7F	; 127
 3da:	57 e4       	ldi	r21, 0x47	; 71
 3dc:	6d 81       	ldd	r22, Y+5	; 0x05
 3de:	7e 81       	ldd	r23, Y+6	; 0x06
 3e0:	8f 81       	ldd	r24, Y+7	; 0x07
 3e2:	98 85       	ldd	r25, Y+8	; 0x08
 3e4:	0e 94 57 05 	call	0xaae	; 0xaae <__gesf2>
 3e8:	18 16       	cp	r1, r24
 3ea:	4c f5       	brge	.+82     	; 0x43e <taskC+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e2       	ldi	r20, 0x20	; 32
 3f2:	51 e4       	ldi	r21, 0x41	; 65
 3f4:	69 81       	ldd	r22, Y+1	; 0x01
 3f6:	7a 81       	ldd	r23, Y+2	; 0x02
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	9c 81       	ldd	r25, Y+4	; 0x04
 3fc:	0e 94 5c 05 	call	0xab8	; 0xab8 <__mulsf3>
 400:	dc 01       	movw	r26, r24
 402:	cb 01       	movw	r24, r22
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixunssfsi>
 40c:	dc 01       	movw	r26, r24
 40e:	cb 01       	movw	r24, r22
 410:	9a 87       	std	Y+10, r25	; 0x0a
 412:	89 87       	std	Y+9, r24	; 0x09
 414:	0f c0       	rjmp	.+30     	; 0x434 <taskC+0xce>
 416:	80 e9       	ldi	r24, 0x90	; 144
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9c 87       	std	Y+12, r25	; 0x0c
 41c:	8b 87       	std	Y+11, r24	; 0x0b
 41e:	8b 85       	ldd	r24, Y+11	; 0x0b
 420:	9c 85       	ldd	r25, Y+12	; 0x0c
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <taskC+0xbc>
 426:	9c 87       	std	Y+12, r25	; 0x0c
 428:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	89 85       	ldd	r24, Y+9	; 0x09
 42c:	9a 85       	ldd	r25, Y+10	; 0x0a
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	9a 87       	std	Y+10, r25	; 0x0a
 432:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 434:	89 85       	ldd	r24, Y+9	; 0x09
 436:	9a 85       	ldd	r25, Y+10	; 0x0a
 438:	89 2b       	or	r24, r25
 43a:	69 f7       	brne	.-38     	; 0x416 <taskC+0xb0>
 43c:	14 c0       	rjmp	.+40     	; 0x466 <taskC+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 43e:	6d 81       	ldd	r22, Y+5	; 0x05
 440:	7e 81       	ldd	r23, Y+6	; 0x06
 442:	8f 81       	ldd	r24, Y+7	; 0x07
 444:	98 85       	ldd	r25, Y+8	; 0x08
 446:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixunssfsi>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	9a 87       	std	Y+10, r25	; 0x0a
 450:	89 87       	std	Y+9, r24	; 0x09
 452:	89 85       	ldd	r24, Y+9	; 0x09
 454:	9a 85       	ldd	r25, Y+10	; 0x0a
 456:	9e 87       	std	Y+14, r25	; 0x0e
 458:	8d 87       	std	Y+13, r24	; 0x0d
 45a:	8d 85       	ldd	r24, Y+13	; 0x0d
 45c:	9e 85       	ldd	r25, Y+14	; 0x0e
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <taskC+0xf8>
 462:	9e 87       	std	Y+14, r25	; 0x0e
 464:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(3000);
	}
 466:	8b cf       	rjmp	.-234    	; 0x37e <taskC+0x18>

00000468 <main>:
}

task_t taskList[] = { taskA, taskB, taskC };

int main(void) {
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62

	pscheduler_run(taskList, 3);
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 a1 02 	call	0x542	; 0x542 <pscheduler_run>
	return 0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <timer1_init>:
			"pop r0 \n\t"	\
			"out __SREG__, r0 \n\t"	\
			"pop r0 \n\t"	\
	)

static void timer1_init() {
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62

	// CTC mode for compare A  0x04
	TCCR1B &= ~(1 << WGM13);
 48c:	81 e8       	ldi	r24, 0x81	; 129
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	21 e8       	ldi	r18, 0x81	; 129
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	f9 01       	movw	r30, r18
 496:	20 81       	ld	r18, Z
 498:	2f 7e       	andi	r18, 0xEF	; 239
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12);
 49e:	81 e8       	ldi	r24, 0x81	; 129
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	21 e8       	ldi	r18, 0x81	; 129
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	f9 01       	movw	r30, r18
 4a8:	20 81       	ld	r18, Z
 4aa:	28 60       	ori	r18, 0x08	; 8
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
	TCCR1A &= ~(1 << WGM11);
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	20 e8       	ldi	r18, 0x80	; 128
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	f9 01       	movw	r30, r18
 4ba:	20 81       	ld	r18, Z
 4bc:	2d 7f       	andi	r18, 0xFD	; 253
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
	TCCR1A &= ~(1 << WGM10);
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	20 e8       	ldi	r18, 0x80	; 128
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	f9 01       	movw	r30, r18
 4cc:	20 81       	ld	r18, Z
 4ce:	2e 7f       	andi	r18, 0xFE	; 254
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 83       	st	Z, r18
	//prescaler
	TCCR1B &= ~(1 << CS12);
 4d4:	81 e8       	ldi	r24, 0x81	; 129
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	21 e8       	ldi	r18, 0x81	; 129
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	2b 7f       	andi	r18, 0xFB	; 251
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS11);
 4e6:	81 e8       	ldi	r24, 0x81	; 129
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	21 e8       	ldi	r18, 0x81	; 129
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	22 60       	ori	r18, 0x02	; 2
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS10);
 4f8:	81 e8       	ldi	r24, 0x81	; 129
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	21 e8       	ldi	r18, 0x81	; 129
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	f9 01       	movw	r30, r18
 502:	20 81       	ld	r18, Z
 504:	21 60       	ori	r18, 0x01	; 1
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
	//Set interrupt mask
	TIMSK1 |= (1 << OCIE1A);
 50a:	8f e6       	ldi	r24, 0x6F	; 111
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	2f e6       	ldi	r18, 0x6F	; 111
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	20 81       	ld	r18, Z
 516:	22 60       	ori	r18, 0x02	; 2
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
	//Clear the interrupt flag
	TIFR1 |= (1 << OCF1A);
 51c:	86 e3       	ldi	r24, 0x36	; 54
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	26 e3       	ldi	r18, 0x36	; 54
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	f9 01       	movw	r30, r18
 526:	20 81       	ld	r18, Z
 528:	22 60       	ori	r18, 0x02	; 2
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
	//set value for comparing.
	OCR1A = TIMER1_CYC_FOR_1MILLISEC;
 52e:	88 e8       	ldi	r24, 0x88	; 136
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	29 ef       	ldi	r18, 0xF9	; 249
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	31 83       	std	Z+1, r19	; 0x01
 53a:	20 83       	st	Z, r18
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <pscheduler_run>:

void pscheduler_run(task_t *task_list, uint8_t num_task) {
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <pscheduler_run+0x6>
 548:	00 d0       	rcall	.+0      	; 0x54a <pscheduler_run+0x8>
 54a:	00 d0       	rcall	.+0      	; 0x54c <pscheduler_run+0xa>
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	9d 83       	std	Y+5, r25	; 0x05
 552:	8c 83       	std	Y+4, r24	; 0x04
 554:	6e 83       	std	Y+6, r22	; 0x06

	uint8_t index;
	timer1_init();
 556:	0e 94 42 02 	call	0x484	; 0x484 <timer1_init>

	for (index = 0; index < num_task; index++) {
 55a:	19 82       	std	Y+1, r1	; 0x01
 55c:	ad c0       	rjmp	.+346    	; 0x6b8 <pscheduler_run+0x176>

		contextArray[index].pstack = &(contextArray[index].stack[220]);
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	68 2f       	mov	r22, r24
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	48 2f       	mov	r20, r24
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	24 e0       	ldi	r18, 0x04	; 4
 56c:	31 e0       	ldi	r19, 0x01	; 1
 56e:	42 9f       	mul	r20, r18
 570:	c0 01       	movw	r24, r0
 572:	43 9f       	mul	r20, r19
 574:	90 0d       	add	r25, r0
 576:	52 9f       	mul	r21, r18
 578:	90 0d       	add	r25, r0
 57a:	11 24       	eor	r1, r1
 57c:	84 52       	subi	r24, 0x24	; 36
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	9c 01       	movw	r18, r24
 582:	28 5f       	subi	r18, 0xF8	; 248
 584:	3d 4f       	sbci	r19, 0xFD	; 253
 586:	44 e0       	ldi	r20, 0x04	; 4
 588:	51 e0       	ldi	r21, 0x01	; 1
 58a:	64 9f       	mul	r22, r20
 58c:	c0 01       	movw	r24, r0
 58e:	65 9f       	mul	r22, r21
 590:	90 0d       	add	r25, r0
 592:	74 9f       	mul	r23, r20
 594:	90 0d       	add	r25, r0
 596:	11 24       	eor	r1, r1
 598:	88 5f       	subi	r24, 0xF8	; 248
 59a:	9c 4f       	sbci	r25, 0xFC	; 252
 59c:	fc 01       	movw	r30, r24
 59e:	31 83       	std	Z+1, r19	; 0x01
 5a0:	20 83       	st	Z, r18
		contextArray[index].stack[252] = 0x80; //enable global interrupt
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	48 2f       	mov	r20, r24
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	24 e0       	ldi	r18, 0x04	; 4
 5aa:	31 e0       	ldi	r19, 0x01	; 1
 5ac:	42 9f       	mul	r20, r18
 5ae:	c0 01       	movw	r24, r0
 5b0:	43 9f       	mul	r20, r19
 5b2:	90 0d       	add	r25, r0
 5b4:	52 9f       	mul	r21, r18
 5b6:	90 0d       	add	r25, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	8c 5f       	subi	r24, 0xFC	; 252
 5bc:	9c 4f       	sbci	r25, 0xFC	; 252
 5be:	20 e8       	ldi	r18, 0x80	; 128
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
		task_t my_task = task_list[index]; // without & in front of func ptr
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	88 2f       	mov	r24, r24
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	2c 81       	ldd	r18, Y+4	; 0x04
 5d0:	3d 81       	ldd	r19, Y+5	; 0x05
 5d2:	82 0f       	add	r24, r18
 5d4:	93 1f       	adc	r25, r19
 5d6:	fc 01       	movw	r30, r24
 5d8:	80 81       	ld	r24, Z
 5da:	91 81       	ldd	r25, Z+1	; 0x01
 5dc:	9b 83       	std	Y+3, r25	; 0x03
 5de:	8a 83       	std	Y+2, r24	; 0x02

		//put the function pointer onto the top of the stack
		contextArray[index].stack[254] = (uint8_t) ((uint16_t) my_task >> 8); //high
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	48 2f       	mov	r20, r24
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	9b 81       	ldd	r25, Y+3	; 0x03
 5ea:	89 2f       	mov	r24, r25
 5ec:	99 27       	eor	r25, r25
 5ee:	68 2f       	mov	r22, r24
 5f0:	24 e0       	ldi	r18, 0x04	; 4
 5f2:	31 e0       	ldi	r19, 0x01	; 1
 5f4:	42 9f       	mul	r20, r18
 5f6:	c0 01       	movw	r24, r0
 5f8:	43 9f       	mul	r20, r19
 5fa:	90 0d       	add	r25, r0
 5fc:	52 9f       	mul	r21, r18
 5fe:	90 0d       	add	r25, r0
 600:	11 24       	eor	r1, r1
 602:	8a 5f       	subi	r24, 0xFA	; 250
 604:	9c 4f       	sbci	r25, 0xFC	; 252
 606:	fc 01       	movw	r30, r24
 608:	60 83       	st	Z, r22
		contextArray[index].stack[255] = (uint8_t) ((uint16_t) my_task & 0xFF); //low
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	48 2f       	mov	r20, r24
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	9b 81       	ldd	r25, Y+3	; 0x03
 614:	68 2f       	mov	r22, r24
 616:	24 e0       	ldi	r18, 0x04	; 4
 618:	31 e0       	ldi	r19, 0x01	; 1
 61a:	42 9f       	mul	r20, r18
 61c:	c0 01       	movw	r24, r0
 61e:	43 9f       	mul	r20, r19
 620:	90 0d       	add	r25, r0
 622:	52 9f       	mul	r21, r18
 624:	90 0d       	add	r25, r0
 626:	11 24       	eor	r1, r1
 628:	89 5f       	subi	r24, 0xF9	; 249
 62a:	9c 4f       	sbci	r25, 0xFC	; 252
 62c:	fc 01       	movw	r30, r24
 62e:	60 83       	st	Z, r22

		if (index == num_task - 1) //last node points to the first node.
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	8e 81       	ldd	r24, Y+6	; 0x06
 638:	88 2f       	mov	r24, r24
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	28 17       	cp	r18, r24
 640:	39 07       	cpc	r19, r25
 642:	a1 f4       	brne	.+40     	; 0x66c <pscheduler_run+0x12a>
			contextArray[index].next = &contextArray[0];
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	48 2f       	mov	r20, r24
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	24 e0       	ldi	r18, 0x04	; 4
 64c:	31 e0       	ldi	r19, 0x01	; 1
 64e:	42 9f       	mul	r20, r18
 650:	c0 01       	movw	r24, r0
 652:	43 9f       	mul	r20, r19
 654:	90 0d       	add	r25, r0
 656:	52 9f       	mul	r21, r18
 658:	90 0d       	add	r25, r0
 65a:	11 24       	eor	r1, r1
 65c:	86 5f       	subi	r24, 0xF6	; 246
 65e:	9c 4f       	sbci	r25, 0xFC	; 252
 660:	28 e0       	ldi	r18, 0x08	; 8
 662:	32 e0       	ldi	r19, 0x02	; 2
 664:	fc 01       	movw	r30, r24
 666:	31 83       	std	Z+1, r19	; 0x01
 668:	20 83       	st	Z, r18
 66a:	23 c0       	rjmp	.+70     	; 0x6b2 <pscheduler_run+0x170>
		else
			contextArray[index].next = &contextArray[index + 1];
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	68 2f       	mov	r22, r24
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	ac 01       	movw	r20, r24
 67a:	4f 5f       	subi	r20, 0xFF	; 255
 67c:	5f 4f       	sbci	r21, 0xFF	; 255
 67e:	24 e0       	ldi	r18, 0x04	; 4
 680:	31 e0       	ldi	r19, 0x01	; 1
 682:	42 9f       	mul	r20, r18
 684:	c0 01       	movw	r24, r0
 686:	43 9f       	mul	r20, r19
 688:	90 0d       	add	r25, r0
 68a:	52 9f       	mul	r21, r18
 68c:	90 0d       	add	r25, r0
 68e:	11 24       	eor	r1, r1
 690:	9c 01       	movw	r18, r24
 692:	28 5f       	subi	r18, 0xF8	; 248
 694:	3d 4f       	sbci	r19, 0xFD	; 253
 696:	44 e0       	ldi	r20, 0x04	; 4
 698:	51 e0       	ldi	r21, 0x01	; 1
 69a:	64 9f       	mul	r22, r20
 69c:	c0 01       	movw	r24, r0
 69e:	65 9f       	mul	r22, r21
 6a0:	90 0d       	add	r25, r0
 6a2:	74 9f       	mul	r23, r20
 6a4:	90 0d       	add	r25, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	86 5f       	subi	r24, 0xF6	; 246
 6aa:	9c 4f       	sbci	r25, 0xFC	; 252
 6ac:	fc 01       	movw	r30, r24
 6ae:	31 83       	std	Z+1, r19	; 0x01
 6b0:	20 83       	st	Z, r18
void pscheduler_run(task_t *task_list, uint8_t num_task) {

	uint8_t index;
	timer1_init();

	for (index = 0; index < num_task; index++) {
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	8f 5f       	subi	r24, 0xFF	; 255
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	99 81       	ldd	r25, Y+1	; 0x01
 6ba:	8e 81       	ldd	r24, Y+6	; 0x06
 6bc:	98 17       	cp	r25, r24
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <pscheduler_run+0x180>
 6c0:	4e cf       	rjmp	.-356    	; 0x55e <pscheduler_run+0x1c>
			contextArray[index].next = &contextArray[0];
		else
			contextArray[index].next = &contextArray[index + 1];
	}

	pxCurrentTCB = &(contextArray[0].pstack); // will call the task 1
 6c2:	88 e0       	ldi	r24, 0x08	; 8
 6c4:	93 e0       	ldi	r25, 0x03	; 3
 6c6:	90 93 59 16 	sts	0x1659, r25
 6ca:	80 93 58 16 	sts	0x1658, r24
	restore_context();
 6ce:	a0 91 58 16 	lds	r26, 0x1658
 6d2:	b0 91 59 16 	lds	r27, 0x1659
 6d6:	cd 91       	ld	r28, X+
 6d8:	cd bf       	out	0x3d, r28	; 61
 6da:	dd 91       	ld	r29, X+
 6dc:	de bf       	out	0x3e, r29	; 62
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	df 90       	pop	r13
 704:	cf 90       	pop	r12
 706:	bf 90       	pop	r11
 708:	af 90       	pop	r10
 70a:	9f 90       	pop	r9
 70c:	8f 90       	pop	r8
 70e:	7f 90       	pop	r7
 710:	6f 90       	pop	r6
 712:	5f 90       	pop	r5
 714:	4f 90       	pop	r4
 716:	3f 90       	pop	r3
 718:	2f 90       	pop	r2
 71a:	1f 90       	pop	r1
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0

	//ret, not reti, to execute the function.
	asm volatile (
 722:	08 95       	ret
			"ret \n\t"
	);
}
 724:	26 96       	adiw	r28, 0x06	; 6
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <__vector_17>:

ISR(TIMER1_COMPA_vect, ISR_NAKED) {
	//here inside the save context, the global interrupt is disabled.
	save_context();
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	0f 92       	push	r0
 73e:	1f 92       	push	r1
 740:	11 24       	eor	r1, r1
 742:	2f 92       	push	r2
 744:	3f 92       	push	r3
 746:	4f 92       	push	r4
 748:	5f 92       	push	r5
 74a:	6f 92       	push	r6
 74c:	7f 92       	push	r7
 74e:	8f 92       	push	r8
 750:	9f 92       	push	r9
 752:	af 92       	push	r10
 754:	bf 92       	push	r11
 756:	cf 92       	push	r12
 758:	df 92       	push	r13
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	2f 93       	push	r18
 764:	3f 93       	push	r19
 766:	4f 93       	push	r20
 768:	5f 93       	push	r21
 76a:	6f 93       	push	r22
 76c:	7f 93       	push	r23
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	af 93       	push	r26
 774:	bf 93       	push	r27
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	ef 93       	push	r30
 77c:	ff 93       	push	r31
 77e:	a0 91 58 16 	lds	r26, 0x1658
 782:	b0 91 59 16 	lds	r27, 0x1659
 786:	0d b6       	in	r0, 0x3d	; 61
 788:	0d 92       	st	X+, r0
 78a:	0e b6       	in	r0, 0x3e	; 62
 78c:	0d 92       	st	X+, r0

	static context *my_context = contextArray;
	my_context = my_context->next;
 78e:	80 91 06 02 	lds	r24, 0x0206
 792:	90 91 07 02 	lds	r25, 0x0207
 796:	8e 5f       	subi	r24, 0xFE	; 254
 798:	9e 4f       	sbci	r25, 0xFE	; 254
 79a:	fc 01       	movw	r30, r24
 79c:	80 81       	ld	r24, Z
 79e:	91 81       	ldd	r25, Z+1	; 0x01
 7a0:	90 93 07 02 	sts	0x0207, r25
 7a4:	80 93 06 02 	sts	0x0206, r24
	pxCurrentTCB = &((my_context->next)->pstack);
 7a8:	80 91 06 02 	lds	r24, 0x0206
 7ac:	90 91 07 02 	lds	r25, 0x0207
 7b0:	8e 5f       	subi	r24, 0xFE	; 254
 7b2:	9e 4f       	sbci	r25, 0xFE	; 254
 7b4:	fc 01       	movw	r30, r24
 7b6:	80 81       	ld	r24, Z
 7b8:	91 81       	ldd	r25, Z+1	; 0x01
 7ba:	93 95       	inc	r25
 7bc:	90 93 59 16 	sts	0x1659, r25
 7c0:	80 93 58 16 	sts	0x1658, r24

	restore_context();
 7c4:	a0 91 58 16 	lds	r26, 0x1658
 7c8:	b0 91 59 16 	lds	r27, 0x1659
 7cc:	cd 91       	ld	r28, X+
 7ce:	cd bf       	out	0x3d, r28	; 61
 7d0:	dd 91       	ld	r29, X+
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	7f 91       	pop	r23
 7e6:	6f 91       	pop	r22
 7e8:	5f 91       	pop	r21
 7ea:	4f 91       	pop	r20
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	df 90       	pop	r13
 7fa:	cf 90       	pop	r12
 7fc:	bf 90       	pop	r11
 7fe:	af 90       	pop	r10
 800:	9f 90       	pop	r9
 802:	8f 90       	pop	r8
 804:	7f 90       	pop	r7
 806:	6f 90       	pop	r6
 808:	5f 90       	pop	r5
 80a:	4f 90       	pop	r4
 80c:	3f 90       	pop	r3
 80e:	2f 90       	pop	r2
 810:	1f 90       	pop	r1
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
	asm volatile (
 818:	18 95       	reti

0000081a <led_redInit>:
#define LED_GREEN_PORT 		PORTF
#define LED_GREEN_PIN       	6

/* FUNCTION DEFINITION *******************************************************/

void led_redInit(void) {
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
	//DDG(LED_RED_PIN) = 1;
	DDR_REGISTER(LED_RED_PORT) |= (1 << LED_RED_PIN ); //set as output
 822:	83 e3       	ldi	r24, 0x33	; 51
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	23 e3       	ldi	r18, 0x33	; 51
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	f9 01       	movw	r30, r18
 82c:	20 81       	ld	r18, Z
 82e:	22 60       	ori	r18, 0x02	; 2
 830:	fc 01       	movw	r30, r24
 832:	20 83       	st	Z, r18
	led_redOff();
 834:	0e 94 40 04 	call	0x880	; 0x880 <led_redOff>
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <led_redToggle>:

void led_redToggle(void) {
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
	LED_RED_PORT ^= 1 << LED_RED_PIN ;
 846:	84 e3       	ldi	r24, 0x34	; 52
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	24 e3       	ldi	r18, 0x34	; 52
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	f9 01       	movw	r30, r18
 850:	30 81       	ld	r19, Z
 852:	22 e0       	ldi	r18, 0x02	; 2
 854:	23 27       	eor	r18, r19
 856:	fc 01       	movw	r30, r24
 858:	20 83       	st	Z, r18
	//PIN_REGISTER(LED_RED_PORT) |= 1 <<LED_RED_PIN;
}
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <led_redOn>:

void led_redOn(void) {
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
	LED_RED_PORT &= ~(1 << LED_RED_PIN );
 868:	84 e3       	ldi	r24, 0x34	; 52
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	24 e3       	ldi	r18, 0x34	; 52
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	f9 01       	movw	r30, r18
 872:	20 81       	ld	r18, Z
 874:	2d 7f       	andi	r18, 0xFD	; 253
 876:	fc 01       	movw	r30, r24
 878:	20 83       	st	Z, r18
}
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	08 95       	ret

00000880 <led_redOff>:

void led_redOff(void) {
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
	LED_RED_PORT |= 1 << LED_RED_PIN ;
 888:	84 e3       	ldi	r24, 0x34	; 52
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	24 e3       	ldi	r18, 0x34	; 52
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	f9 01       	movw	r30, r18
 892:	20 81       	ld	r18, Z
 894:	22 60       	ori	r18, 0x02	; 2
 896:	fc 01       	movw	r30, r24
 898:	20 83       	st	Z, r18
}
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <led_yellowInit>:

void led_yellowInit(void) {
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
	DDR_REGISTER(LED_YELLOW_PORT) |= (1 << LED_YELLOW_PIN); //set as output
 8a8:	80 e3       	ldi	r24, 0x30	; 48
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	20 e3       	ldi	r18, 0x30	; 48
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	f9 01       	movw	r30, r18
 8b2:	20 81       	ld	r18, Z
 8b4:	20 68       	ori	r18, 0x80	; 128
 8b6:	fc 01       	movw	r30, r24
 8b8:	20 83       	st	Z, r18
	led_yellowOff();
 8ba:	0e 94 83 04 	call	0x906	; 0x906 <led_yellowOff>
}
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	08 95       	ret

000008c4 <led_yellowToggle>:

void led_yellowToggle(void) {
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
	LED_YELLOW_PORT ^= 1 << LED_YELLOW_PIN;
 8cc:	81 e3       	ldi	r24, 0x31	; 49
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	21 e3       	ldi	r18, 0x31	; 49
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	f9 01       	movw	r30, r18
 8d6:	30 81       	ld	r19, Z
 8d8:	20 e8       	ldi	r18, 0x80	; 128
 8da:	23 27       	eor	r18, r19
 8dc:	fc 01       	movw	r30, r24
 8de:	20 83       	st	Z, r18
}
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	08 95       	ret

000008e6 <led_yellowOn>:

void led_yellowOn(void) {
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
	LED_YELLOW_PORT &= ~(1 << LED_YELLOW_PIN);
 8ee:	81 e3       	ldi	r24, 0x31	; 49
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	21 e3       	ldi	r18, 0x31	; 49
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	f9 01       	movw	r30, r18
 8f8:	20 81       	ld	r18, Z
 8fa:	2f 77       	andi	r18, 0x7F	; 127
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 83       	st	Z, r18
}
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <led_yellowOff>:

void led_yellowOff(void) {
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
	LED_YELLOW_PORT |= 1 << LED_YELLOW_PIN;
 90e:	81 e3       	ldi	r24, 0x31	; 49
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	21 e3       	ldi	r18, 0x31	; 49
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	f9 01       	movw	r30, r18
 918:	20 81       	ld	r18, Z
 91a:	20 68       	ori	r18, 0x80	; 128
 91c:	fc 01       	movw	r30, r24
 91e:	20 83       	st	Z, r18
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	08 95       	ret

00000926 <led_greenInit>:

void led_greenInit(void) {
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
	DDR_REGISTER(LED_GREEN_PORT) |= (1 << LED_GREEN_PIN);
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	20 e3       	ldi	r18, 0x30	; 48
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	f9 01       	movw	r30, r18
 938:	20 81       	ld	r18, Z
 93a:	20 64       	ori	r18, 0x40	; 64
 93c:	fc 01       	movw	r30, r24
 93e:	20 83       	st	Z, r18
	led_greenOff();
 940:	0e 94 c6 04 	call	0x98c	; 0x98c <led_greenOff>
}
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <led_greenToggle>:

void led_greenToggle(void) {
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
	LED_GREEN_PORT ^= (1 << LED_GREEN_PIN);
 952:	81 e3       	ldi	r24, 0x31	; 49
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	21 e3       	ldi	r18, 0x31	; 49
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	f9 01       	movw	r30, r18
 95c:	30 81       	ld	r19, Z
 95e:	20 e4       	ldi	r18, 0x40	; 64
 960:	23 27       	eor	r18, r19
 962:	fc 01       	movw	r30, r24
 964:	20 83       	st	Z, r18
}
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	08 95       	ret

0000096c <led_greenOn>:

void led_greenOn(void) {
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
	LED_GREEN_PORT &= ~(1 << LED_GREEN_PIN);
 974:	81 e3       	ldi	r24, 0x31	; 49
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	21 e3       	ldi	r18, 0x31	; 49
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	f9 01       	movw	r30, r18
 97e:	20 81       	ld	r18, Z
 980:	2f 7b       	andi	r18, 0xBF	; 191
 982:	fc 01       	movw	r30, r24
 984:	20 83       	st	Z, r18
}
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	08 95       	ret

0000098c <led_greenOff>:

void led_greenOff(void) {
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
	LED_GREEN_PORT |= (1 << LED_GREEN_PIN);
 994:	81 e3       	ldi	r24, 0x31	; 49
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	21 e3       	ldi	r18, 0x31	; 49
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	f9 01       	movw	r30, r18
 99e:	20 81       	ld	r18, Z
 9a0:	20 64       	ori	r18, 0x40	; 64
 9a2:	fc 01       	movw	r30, r24
 9a4:	20 83       	st	Z, r18
}
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	08 95       	ret

000009ac <__cmpsf2>:
 9ac:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_cmp>
 9b0:	08 f4       	brcc	.+2      	; 0x9b4 <__cmpsf2+0x8>
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	08 95       	ret

000009b6 <__fixunssfsi>:
 9b6:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_splitA>
 9ba:	88 f0       	brcs	.+34     	; 0x9de <__fixunssfsi+0x28>
 9bc:	9f 57       	subi	r25, 0x7F	; 127
 9be:	98 f0       	brcs	.+38     	; 0x9e6 <__fixunssfsi+0x30>
 9c0:	b9 2f       	mov	r27, r25
 9c2:	99 27       	eor	r25, r25
 9c4:	b7 51       	subi	r27, 0x17	; 23
 9c6:	b0 f0       	brcs	.+44     	; 0x9f4 <__fixunssfsi+0x3e>
 9c8:	e1 f0       	breq	.+56     	; 0xa02 <__fixunssfsi+0x4c>
 9ca:	66 0f       	add	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	1a f0       	brmi	.+6      	; 0x9da <__fixunssfsi+0x24>
 9d4:	ba 95       	dec	r27
 9d6:	c9 f7       	brne	.-14     	; 0x9ca <__fixunssfsi+0x14>
 9d8:	14 c0       	rjmp	.+40     	; 0xa02 <__fixunssfsi+0x4c>
 9da:	b1 30       	cpi	r27, 0x01	; 1
 9dc:	91 f0       	breq	.+36     	; 0xa02 <__fixunssfsi+0x4c>
 9de:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_zero>
 9e2:	b1 e0       	ldi	r27, 0x01	; 1
 9e4:	08 95       	ret
 9e6:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_zero>
 9ea:	67 2f       	mov	r22, r23
 9ec:	78 2f       	mov	r23, r24
 9ee:	88 27       	eor	r24, r24
 9f0:	b8 5f       	subi	r27, 0xF8	; 248
 9f2:	39 f0       	breq	.+14     	; 0xa02 <__fixunssfsi+0x4c>
 9f4:	b9 3f       	cpi	r27, 0xF9	; 249
 9f6:	cc f3       	brlt	.-14     	; 0x9ea <__fixunssfsi+0x34>
 9f8:	86 95       	lsr	r24
 9fa:	77 95       	ror	r23
 9fc:	67 95       	ror	r22
 9fe:	b3 95       	inc	r27
 a00:	d9 f7       	brne	.-10     	; 0x9f8 <__fixunssfsi+0x42>
 a02:	3e f4       	brtc	.+14     	; 0xa12 <__fixunssfsi+0x5c>
 a04:	90 95       	com	r25
 a06:	80 95       	com	r24
 a08:	70 95       	com	r23
 a0a:	61 95       	neg	r22
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255
 a0e:	8f 4f       	sbci	r24, 0xFF	; 255
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	08 95       	ret

00000a14 <__fp_cmp>:
 a14:	99 0f       	add	r25, r25
 a16:	00 08       	sbc	r0, r0
 a18:	55 0f       	add	r21, r21
 a1a:	aa 0b       	sbc	r26, r26
 a1c:	e0 e8       	ldi	r30, 0x80	; 128
 a1e:	fe ef       	ldi	r31, 0xFE	; 254
 a20:	16 16       	cp	r1, r22
 a22:	17 06       	cpc	r1, r23
 a24:	e8 07       	cpc	r30, r24
 a26:	f9 07       	cpc	r31, r25
 a28:	c0 f0       	brcs	.+48     	; 0xa5a <__fp_cmp+0x46>
 a2a:	12 16       	cp	r1, r18
 a2c:	13 06       	cpc	r1, r19
 a2e:	e4 07       	cpc	r30, r20
 a30:	f5 07       	cpc	r31, r21
 a32:	98 f0       	brcs	.+38     	; 0xa5a <__fp_cmp+0x46>
 a34:	62 1b       	sub	r22, r18
 a36:	73 0b       	sbc	r23, r19
 a38:	84 0b       	sbc	r24, r20
 a3a:	95 0b       	sbc	r25, r21
 a3c:	39 f4       	brne	.+14     	; 0xa4c <__fp_cmp+0x38>
 a3e:	0a 26       	eor	r0, r26
 a40:	61 f0       	breq	.+24     	; 0xa5a <__fp_cmp+0x46>
 a42:	23 2b       	or	r18, r19
 a44:	24 2b       	or	r18, r20
 a46:	25 2b       	or	r18, r21
 a48:	21 f4       	brne	.+8      	; 0xa52 <__fp_cmp+0x3e>
 a4a:	08 95       	ret
 a4c:	0a 26       	eor	r0, r26
 a4e:	09 f4       	brne	.+2      	; 0xa52 <__fp_cmp+0x3e>
 a50:	a1 40       	sbci	r26, 0x01	; 1
 a52:	a6 95       	lsr	r26
 a54:	8f ef       	ldi	r24, 0xFF	; 255
 a56:	81 1d       	adc	r24, r1
 a58:	81 1d       	adc	r24, r1
 a5a:	08 95       	ret

00000a5c <__fp_split3>:
 a5c:	57 fd       	sbrc	r21, 7
 a5e:	90 58       	subi	r25, 0x80	; 128
 a60:	44 0f       	add	r20, r20
 a62:	55 1f       	adc	r21, r21
 a64:	59 f0       	breq	.+22     	; 0xa7c <__fp_splitA+0x10>
 a66:	5f 3f       	cpi	r21, 0xFF	; 255
 a68:	71 f0       	breq	.+28     	; 0xa86 <__fp_splitA+0x1a>
 a6a:	47 95       	ror	r20

00000a6c <__fp_splitA>:
 a6c:	88 0f       	add	r24, r24
 a6e:	97 fb       	bst	r25, 7
 a70:	99 1f       	adc	r25, r25
 a72:	61 f0       	breq	.+24     	; 0xa8c <__fp_splitA+0x20>
 a74:	9f 3f       	cpi	r25, 0xFF	; 255
 a76:	79 f0       	breq	.+30     	; 0xa96 <__fp_splitA+0x2a>
 a78:	87 95       	ror	r24
 a7a:	08 95       	ret
 a7c:	12 16       	cp	r1, r18
 a7e:	13 06       	cpc	r1, r19
 a80:	14 06       	cpc	r1, r20
 a82:	55 1f       	adc	r21, r21
 a84:	f2 cf       	rjmp	.-28     	; 0xa6a <__fp_split3+0xe>
 a86:	46 95       	lsr	r20
 a88:	f1 df       	rcall	.-30     	; 0xa6c <__fp_splitA>
 a8a:	08 c0       	rjmp	.+16     	; 0xa9c <__fp_splitA+0x30>
 a8c:	16 16       	cp	r1, r22
 a8e:	17 06       	cpc	r1, r23
 a90:	18 06       	cpc	r1, r24
 a92:	99 1f       	adc	r25, r25
 a94:	f1 cf       	rjmp	.-30     	; 0xa78 <__fp_splitA+0xc>
 a96:	86 95       	lsr	r24
 a98:	71 05       	cpc	r23, r1
 a9a:	61 05       	cpc	r22, r1
 a9c:	08 94       	sec
 a9e:	08 95       	ret

00000aa0 <__fp_zero>:
 aa0:	e8 94       	clt

00000aa2 <__fp_szero>:
 aa2:	bb 27       	eor	r27, r27
 aa4:	66 27       	eor	r22, r22
 aa6:	77 27       	eor	r23, r23
 aa8:	cb 01       	movw	r24, r22
 aaa:	97 f9       	bld	r25, 7
 aac:	08 95       	ret

00000aae <__gesf2>:
 aae:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_cmp>
 ab2:	08 f4       	brcc	.+2      	; 0xab6 <__gesf2+0x8>
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	08 95       	ret

00000ab8 <__mulsf3>:
 ab8:	0e 94 6f 05 	call	0xade	; 0xade <__mulsf3x>
 abc:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_round>
 ac0:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_pscA>
 ac4:	38 f0       	brcs	.+14     	; 0xad4 <__mulsf3+0x1c>
 ac6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_pscB>
 aca:	20 f0       	brcs	.+8      	; 0xad4 <__mulsf3+0x1c>
 acc:	95 23       	and	r25, r21
 ace:	11 f0       	breq	.+4      	; 0xad4 <__mulsf3+0x1c>
 ad0:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__fp_inf>
 ad4:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_nan>
 ad8:	11 24       	eor	r1, r1
 ada:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_szero>

00000ade <__mulsf3x>:
 ade:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_split3>
 ae2:	70 f3       	brcs	.-36     	; 0xac0 <__mulsf3+0x8>

00000ae4 <__mulsf3_pse>:
 ae4:	95 9f       	mul	r25, r21
 ae6:	c1 f3       	breq	.-16     	; 0xad8 <__mulsf3+0x20>
 ae8:	95 0f       	add	r25, r21
 aea:	50 e0       	ldi	r21, 0x00	; 0
 aec:	55 1f       	adc	r21, r21
 aee:	62 9f       	mul	r22, r18
 af0:	f0 01       	movw	r30, r0
 af2:	72 9f       	mul	r23, r18
 af4:	bb 27       	eor	r27, r27
 af6:	f0 0d       	add	r31, r0
 af8:	b1 1d       	adc	r27, r1
 afa:	63 9f       	mul	r22, r19
 afc:	aa 27       	eor	r26, r26
 afe:	f0 0d       	add	r31, r0
 b00:	b1 1d       	adc	r27, r1
 b02:	aa 1f       	adc	r26, r26
 b04:	64 9f       	mul	r22, r20
 b06:	66 27       	eor	r22, r22
 b08:	b0 0d       	add	r27, r0
 b0a:	a1 1d       	adc	r26, r1
 b0c:	66 1f       	adc	r22, r22
 b0e:	82 9f       	mul	r24, r18
 b10:	22 27       	eor	r18, r18
 b12:	b0 0d       	add	r27, r0
 b14:	a1 1d       	adc	r26, r1
 b16:	62 1f       	adc	r22, r18
 b18:	73 9f       	mul	r23, r19
 b1a:	b0 0d       	add	r27, r0
 b1c:	a1 1d       	adc	r26, r1
 b1e:	62 1f       	adc	r22, r18
 b20:	83 9f       	mul	r24, r19
 b22:	a0 0d       	add	r26, r0
 b24:	61 1d       	adc	r22, r1
 b26:	22 1f       	adc	r18, r18
 b28:	74 9f       	mul	r23, r20
 b2a:	33 27       	eor	r19, r19
 b2c:	a0 0d       	add	r26, r0
 b2e:	61 1d       	adc	r22, r1
 b30:	23 1f       	adc	r18, r19
 b32:	84 9f       	mul	r24, r20
 b34:	60 0d       	add	r22, r0
 b36:	21 1d       	adc	r18, r1
 b38:	82 2f       	mov	r24, r18
 b3a:	76 2f       	mov	r23, r22
 b3c:	6a 2f       	mov	r22, r26
 b3e:	11 24       	eor	r1, r1
 b40:	9f 57       	subi	r25, 0x7F	; 127
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	9a f0       	brmi	.+38     	; 0xb6c <__mulsf3_pse+0x88>
 b46:	f1 f0       	breq	.+60     	; 0xb84 <__mulsf3_pse+0xa0>
 b48:	88 23       	and	r24, r24
 b4a:	4a f0       	brmi	.+18     	; 0xb5e <__mulsf3_pse+0x7a>
 b4c:	ee 0f       	add	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	bb 1f       	adc	r27, r27
 b52:	66 1f       	adc	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	91 50       	subi	r25, 0x01	; 1
 b5a:	50 40       	sbci	r21, 0x00	; 0
 b5c:	a9 f7       	brne	.-22     	; 0xb48 <__mulsf3_pse+0x64>
 b5e:	9e 3f       	cpi	r25, 0xFE	; 254
 b60:	51 05       	cpc	r21, r1
 b62:	80 f0       	brcs	.+32     	; 0xb84 <__mulsf3_pse+0xa0>
 b64:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__fp_inf>
 b68:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_szero>
 b6c:	5f 3f       	cpi	r21, 0xFF	; 255
 b6e:	e4 f3       	brlt	.-8      	; 0xb68 <__mulsf3_pse+0x84>
 b70:	98 3e       	cpi	r25, 0xE8	; 232
 b72:	d4 f3       	brlt	.-12     	; 0xb68 <__mulsf3_pse+0x84>
 b74:	86 95       	lsr	r24
 b76:	77 95       	ror	r23
 b78:	67 95       	ror	r22
 b7a:	b7 95       	ror	r27
 b7c:	f7 95       	ror	r31
 b7e:	e7 95       	ror	r30
 b80:	9f 5f       	subi	r25, 0xFF	; 255
 b82:	c1 f7       	brne	.-16     	; 0xb74 <__mulsf3_pse+0x90>
 b84:	fe 2b       	or	r31, r30
 b86:	88 0f       	add	r24, r24
 b88:	91 1d       	adc	r25, r1
 b8a:	96 95       	lsr	r25
 b8c:	87 95       	ror	r24
 b8e:	97 f9       	bld	r25, 7
 b90:	08 95       	ret

00000b92 <__fp_inf>:
 b92:	97 f9       	bld	r25, 7
 b94:	9f 67       	ori	r25, 0x7F	; 127
 b96:	80 e8       	ldi	r24, 0x80	; 128
 b98:	70 e0       	ldi	r23, 0x00	; 0
 b9a:	60 e0       	ldi	r22, 0x00	; 0
 b9c:	08 95       	ret

00000b9e <__fp_nan>:
 b9e:	9f ef       	ldi	r25, 0xFF	; 255
 ba0:	80 ec       	ldi	r24, 0xC0	; 192
 ba2:	08 95       	ret

00000ba4 <__fp_pscA>:
 ba4:	00 24       	eor	r0, r0
 ba6:	0a 94       	dec	r0
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	18 06       	cpc	r1, r24
 bae:	09 06       	cpc	r0, r25
 bb0:	08 95       	ret

00000bb2 <__fp_pscB>:
 bb2:	00 24       	eor	r0, r0
 bb4:	0a 94       	dec	r0
 bb6:	12 16       	cp	r1, r18
 bb8:	13 06       	cpc	r1, r19
 bba:	14 06       	cpc	r1, r20
 bbc:	05 06       	cpc	r0, r21
 bbe:	08 95       	ret

00000bc0 <__fp_round>:
 bc0:	09 2e       	mov	r0, r25
 bc2:	03 94       	inc	r0
 bc4:	00 0c       	add	r0, r0
 bc6:	11 f4       	brne	.+4      	; 0xbcc <__fp_round+0xc>
 bc8:	88 23       	and	r24, r24
 bca:	52 f0       	brmi	.+20     	; 0xbe0 <__fp_round+0x20>
 bcc:	bb 0f       	add	r27, r27
 bce:	40 f4       	brcc	.+16     	; 0xbe0 <__fp_round+0x20>
 bd0:	bf 2b       	or	r27, r31
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <__fp_round+0x18>
 bd4:	60 ff       	sbrs	r22, 0
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__fp_round+0x20>
 bd8:	6f 5f       	subi	r22, 0xFF	; 255
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	08 95       	ret

00000be2 <_exit>:
 be2:	f8 94       	cli

00000be4 <__stop_program>:
 be4:	ff cf       	rjmp	.-2      	; 0xbe4 <__stop_program>
